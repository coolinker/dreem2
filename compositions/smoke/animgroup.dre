<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Animation Group'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view width="100%" height="100%" scrollable="true">
      <testingtimer>15000</testingtimer>
      <expectedoutput>Clobbering global reference: koala2
Clobbering global reference: koala3</expectedoutput>
      
      <!-- Sequential Animation -->
      <view width="50" height="50" bgcolor="red">
        <animgroup name="animgroup1" delay="500" parallel="false" repeat="2">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" to="100" duration="500" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').x, 100);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="true">
            <animator name="subanim1" attribute="y" to="50" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').y, 50);
              </handler>
            </animator>
            <animator name="subanim2" attribute="y" to="100" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').y, 100);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').y, 100);
            </handler>
          </animgroup>
          
          <animator name="anim3" attribute="x" to="0" duration="700" delay="300" repeat="2">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').x, 0);
            </handler>
          </animator>
          
          <animator name="anim4" attribute="y" from="0" to="100" duration="800" delay="400" reverse="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').y, 0);
            </handler>
          </animator>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                  "onloop anim1 0", 
                  "onloop anim1 1", 
                  "onloop anim1 2", 
                "onend anim1", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                "onend anim2", 
                
                "onstart anim3", 
                  "onloop anim3 0", 
                  "onloop anim3 1", 
                "onend anim3", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onloop animgroup1 1", 
                
                "onstart anim1", 
                  "onloop anim1 0", 
                  "onloop anim1 1", 
                  "onloop anim1 2", 
                "onend anim1", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                "onend anim2", 
                
                "onstart anim3", 
                  "onloop anim3 0", 
                  "onloop anim3 1", 
                "onend anim3", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.getActualAttribute('target').x, 0);
            assert.equal(this.getActualAttribute('target').y, 0);
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 1800);
            assert.equal(this.anim1.totalDuration, 1800);
            
            assert.equal(this.anim2.__puppetStart, 1800);
            assert.equal(this.anim2.__puppetEnd, 2600);
            assert.equal(this.anim2.totalDuration, 800);
            
            assert.equal(this.anim3.__puppetStart, 2600);
            assert.equal(this.anim3.__puppetEnd, 4600);
            assert.equal(this.anim3.totalDuration, 2000);
            
            assert.equal(this.anim4.__puppetStart, 4600);
            assert.equal(this.anim4.__puppetEnd, 5800);
            assert.equal(this.anim4.totalDuration, 1200);
            
            assert.equal(this.totalDuration, 6300 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Reversed sequential animation -->
      <view width="50" height="50" x="200" bgcolor="orange">
        <animgroup name="animgroup1" delay="500" parallel="false" repeat="2" reverse="true">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" from="200" to="300" duration="500" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').x, 200, 'in animgroup1.anim1');
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="true">
            <animator name="subanim1" attribute="y" from="0" to="50" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').y, 0);
              </handler>
            </animator>
            <animator name="subanim2" attribute="y" from="50" to="100" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').y, 50);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').y, 0);
            </handler>
          </animgroup>
          
          <animator name="anim3" attribute="x" from="300" to="200" duration="700" delay="300" repeat="2">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').x, 300);
            </handler>
          </animator>
          
          <animator name="anim4" attribute="y" from="0" to="100" duration="800" delay="400" reverse="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').y, 100);
            </handler>
          </animator>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 1", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onstart anim3", 
                  "onloop anim3 1", 
                  "onloop anim3 0", 
                "onend anim3", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                "onend anim2", 
                
                "onstart anim1", 
                  "onloop anim1 2", 
                  "onloop anim1 1", 
                  "onloop anim1 0", 
                "onend anim1", 
                
                "onloop animgroup1 0", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onstart anim3", 
                  "onloop anim3 1", 
                  "onloop anim3 0", 
                "onend anim3", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                "onend anim2", 
                
                "onstart anim1", 
                  "onloop anim1 2", 
                  "onloop anim1 1", 
                  "onloop anim1 0", 
                "onend anim1", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.getActualAttribute('target').x, 200, 'In animgroup1 onend handler.');
            assert.equal(this.getActualAttribute('target').y, 0);
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 1800);
            assert.equal(this.anim1.totalDuration, 1800);
            
            assert.equal(this.anim2.__puppetStart, 1800);
            assert.equal(this.anim2.__puppetEnd, 2600);
            assert.equal(this.anim2.totalDuration, 800);
            
            assert.equal(this.anim3.__puppetStart, 2600);
            assert.equal(this.anim3.__puppetEnd, 4600);
            assert.equal(this.anim3.totalDuration, 2000);
            
            assert.equal(this.anim4.__puppetStart, 4600);
            assert.equal(this.anim4.__puppetEnd, 5800);
            assert.equal(this.anim4.totalDuration, 1200);
            
            assert.equal(this.totalDuration, 6300 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Bounced sequential Animation -->
      <view y="200" width="50" height="50" bgcolor="green">
        <animgroup name="animgroup1" delay="500" parallel="false" repeat="2" bounce="true">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" from="0" to="100" duration="500" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="true">
            <animator name="subanim1" attribute="y" from="200" to="250" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            <animator name="subanim2" attribute="y" from="250" to="300" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animgroup>
          
          <animator name="anim3" attribute="x" from="100" to="0" duration="700" delay="300" repeat="2">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animator name="anim4" attribute="y" from="200" to="300" duration="800" delay="400" reverse="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                  "onloop anim1 0", 
                  "onloop anim1 1", 
                  "onloop anim1 2", 
                "onend anim1", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                "onend anim2", 
                
                "onstart anim3", 
                  "onloop anim3 0", 
                  "onloop anim3 1", 
                "onend anim3", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                  
                "onloop animgroup1 1", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onstart anim3", 
                  "onloop anim3 1", 
                  "onloop anim3 0", 
                "onend anim3", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                "onend anim2", 
                
                "onstart anim1", 
                  "onloop anim1 2", 
                  "onloop anim1 1", 
                  "onloop anim1 0", 
                "onend anim1", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.getActualAttribute('target').x, 0);
            assert.equal(this.getActualAttribute('target').y, 200, 'In bounced sequential animation.');
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 1800);
            assert.equal(this.anim1.totalDuration, 1800);
            
            assert.equal(this.anim2.__puppetStart, 1800);
            assert.equal(this.anim2.__puppetEnd, 2600);
            assert.equal(this.anim2.totalDuration, 800);
            
            assert.equal(this.anim3.__puppetStart, 2600);
            assert.equal(this.anim3.__puppetEnd, 4600);
            assert.equal(this.anim3.totalDuration, 2000);
            
            assert.equal(this.anim4.__puppetStart, 4600);
            assert.equal(this.anim4.__puppetEnd, 5800);
            assert.equal(this.anim4.totalDuration, 1200);
            
            assert.equal(this.totalDuration, 6300 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Reversed and Bounced sequential Animation -->
      <view x="200" y="200" width="50" height="50" bgcolor="purple">
        <animgroup name="animgroup1" delay="500" parallel="false" repeat="2" reverse="true" bounce="true">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" from="200" to="300" duration="500" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="true">
            <animator name="subanim1" attribute="y" from="200" to="250" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            <animator name="subanim2" attribute="y" from="250" to="300" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animgroup>
          
          <animator name="anim3" attribute="x" from="300" to="200" duration="700" delay="300" repeat="2">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animator name="anim4" attribute="y" from="200" to="300" duration="800" delay="400" reverse="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 1", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onstart anim3", 
                  "onloop anim3 1", 
                  "onloop anim3 0", 
                "onend anim3", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                "onend anim2", 
                
                "onstart anim1", 
                  "onloop anim1 2", 
                  "onloop anim1 1", 
                  "onloop anim1 0", 
                "onend anim1", 
                
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                  "onloop anim1 0", 
                  "onloop anim1 1", 
                  "onloop anim1 2", 
                "onend anim1", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                "onend anim2", 
                
                "onstart anim3", 
                  "onloop anim3 0", 
                  "onloop anim3 1", 
                "onend anim3", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.getActualAttribute('target').x, 200, 'X value in reversed and bounced sequential animation.');
            assert.equal(this.getActualAttribute('target').y, 200, 'Y value in reversed and bounced sequential animation.');
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 1800);
            assert.equal(this.anim1.totalDuration, 1800);
            
            assert.equal(this.anim2.__puppetStart, 1800);
            assert.equal(this.anim2.__puppetEnd, 2600);
            assert.equal(this.anim2.totalDuration, 800);
            
            assert.equal(this.anim3.__puppetStart, 2600);
            assert.equal(this.anim3.__puppetEnd, 4600);
            assert.equal(this.anim3.totalDuration, 2000);
            
            assert.equal(this.anim4.__puppetStart, 4600);
            assert.equal(this.anim4.__puppetEnd, 5800);
            assert.equal(this.anim4.totalDuration, 1200);
            
            assert.equal(this.totalDuration, 6300 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Parallel Animation -->
      <view y="400" width="10" height="10" bgcolor="red">
        <animgroup name="animgroup1" delay="500" parallel="true" repeat="2">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" to="100" duration="1400" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').x, 100);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="false" repeat="2">
            <animator name="subanim1" attribute="width" from="10" to="50" duration="1200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').width, 50);
              </handler>
            </animator>
            <animator name="subanim2" attribute="height" from="10" to="50" duration="1200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').height, 50);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').width, 50);
              assert.equal(this.getActualAttribute('target').height, 50);
            </handler>
          </animgroup>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                "onloop anim1 0", 
                "onstart anim2", 
                "onloop anim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onloop anim1 1", 
                "onend subanim1", 
                "onend subanim2", 
                "onloop anim2 1", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onloop anim1 2", 
                "onend subanim1", 
                "onend subanim2", 
                "onend anim2", 
                "onend anim1", 
                
                "onloop animgroup1 1", 
                
                "onstart anim1", 
                "onloop anim1 0", 
                "onstart anim2", 
                "onloop anim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onloop anim1 1", 
                "onend subanim1", 
                "onend subanim2", 
                "onloop anim2 1", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onloop anim1 2", 
                "onend subanim1", 
                "onend subanim2", 
                "onend anim2", 
                "onend anim1", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.parent.width, 50);
            assert.equal(this.parent.height, 50);
            assert.equal(this.parent.x, 100);
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 4500);
            assert.equal(this.anim1.totalDuration, 4500);
            
            assert.equal(this.anim2.__puppetStart, 0);
            assert.equal(this.anim2.__puppetEnd, 3000);
            assert.equal(this.anim2.totalDuration, 3000);
            
            assert.equal(this.totalDuration, 5000 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Reversed Parallel Animation -->
      <view y="450" width="10" height="10" bgcolor="red">
        <animgroup name="animgroup1" delay="500" parallel="true" repeat="2" reverse="true">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" to="100" duration="1400" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').x, 0);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="false" repeat="2">
            <animator name="subanim1" attribute="width" from="10" to="50" duration="500" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').width, 10);
              </handler>
            </animator>
            <animator name="subanim2" attribute="height" from="10" to="50" duration="500" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
                assert.equal(this.getActualAttribute('target').height, 10);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
              assert.equal(this.getActualAttribute('target').width, 10);
              assert.equal(this.getActualAttribute('target').height, 10);
            </handler>
          </animgroup>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 1", 
                
                "onstart anim1", 
                "onloop anim1 2", 
                "onloop anim1 1", 
                "onstart anim2", 
                "onloop anim2 1", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onloop anim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onloop anim2 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onend anim2", 
                "onend anim1", 
                
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                "onloop anim1 2", 
                "onloop anim1 1", 
                "onstart anim2", 
                "onloop anim2 1", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onloop anim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onloop anim2 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onend anim2", 
                "onend anim1", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.parent.width, 10);
            assert.equal(this.parent.height, 10);
            assert.equal(this.parent.x, 0);
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 4500);
            assert.equal(this.anim1.totalDuration, 4500);
            
            assert.equal(this.anim2.__puppetStart, 0);
            assert.equal(this.anim2.__puppetEnd, 1600);
            assert.equal(this.anim2.totalDuration, 1600);
            
            assert.equal(this.totalDuration, 5000 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Bounced Parallel Animation -->
      <view y="500" width="10" height="10" bgcolor="red">
        <animgroup name="animgroup1" delay="500" parallel="true" repeat="2" bounce="true">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" to="100" duration="1400" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="false" repeat="2">
            <animator name="subanim1" attribute="width" from="10" to="50" duration="500" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            <animator name="subanim2" attribute="height" from="10" to="50" duration="500" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animgroup>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                "onloop anim1 0", 
                "onstart anim2", 
                "onloop anim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onend subanim1", 
                "onend subanim2", 
                "onloop anim2 1", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onloop anim1 1", 
                "onend subanim1", 
                "onend subanim2", 
                "onend anim2", 
                "onloop anim1 2", 
                "onend anim1", 
                
                "onloop animgroup1 1", 
                
                "onstart anim1", 
                "onloop anim1 2", 
                "onloop anim1 1", 
                "onstart anim2", 
                "onloop anim2 1", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onloop anim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onloop anim2 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onend anim2", 
                "onend anim1", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.parent.width, 10);
            assert.equal(this.parent.height, 10);
            assert.equal(this.parent.x, 0);
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 4500);
            assert.equal(this.anim1.totalDuration, 4500);
            
            assert.equal(this.anim2.__puppetStart, 0);
            assert.equal(this.anim2.__puppetEnd, 1600);
            assert.equal(this.anim2.totalDuration, 1600);
            
            assert.equal(this.totalDuration, 5000 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Reversed and Bounced Parallel Animation -->
      <view y="550" width="10" height="10" bgcolor="red">
        <animgroup name="animgroup1" delay="500" parallel="true" repeat="2" bounce="true" reverse="true">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" to="100" duration="1400" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="false" repeat="2">
            <animator name="subanim1" attribute="width" from="10" to="50" duration="500" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            <animator name="subanim2" attribute="height" from="10" to="50" duration="500" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animgroup>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 1", 
                
                "onstart anim1", 
                "onloop anim1 2", 
                "onloop anim1 1", 
                "onstart anim2", 
                "onloop anim2 1", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onloop anim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onloop anim2 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onend subanim2", 
                "onend subanim1", 
                "onend anim2", 
                "onend anim1", 
                
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                "onloop anim1 0", 
                "onstart anim2", 
                "onloop anim2 0", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onend subanim1", 
                "onend subanim2", 
                "onloop anim2 1", 
                "onstart subanim1", 
                "onloop subanim1 0", 
                "onstart subanim2", 
                "onloop subanim2 0", 
                "onloop anim1 1", 
                "onend subanim1", 
                "onend subanim2", 
                "onend anim2", 
                "onloop anim1 2", 
                "onend anim1", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
            
            assert.equal(this.parent.width, 50);
            assert.equal(this.parent.height, 50);
            assert.equal(this.parent.x, 100);
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 4500);
            assert.equal(this.anim1.totalDuration, 4500);
            
            assert.equal(this.anim2.__puppetStart, 0);
            assert.equal(this.anim2.__puppetEnd, 1600);
            assert.equal(this.anim2.totalDuration, 1600);
            
            assert.equal(this.totalDuration, 5000 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Tests from dreem1 -->
      <view x="400" width="500" height="500" bgcolor="#cccccc">
        <view bgcolor='red' id="koala1" x="10" y="0" width="auto" height="auto">
          <text text='Nesting'></text>
          <animgroup delay='100' id="myanim1" repeat="1" bounce="true" parallel='false'>
            <handler event='onend'>
              assert.equal(this.getActualAttribute('target').x, 14)
              assert.equal(this.getActualAttribute('target').y, 12)
            </handler>
            <animator attribute="x" to="100" duration="100" motion="linear">
              <handler event='onend'>
                assert.equal(this.getActualAttribute('target').x, 100)
              </handler>
            </animator>
            <animator attribute="y" to="100" duration="500">
              <handler event='onend'>
                assert.equal(this.getActualAttribute('target').x, 100)
                assert.equal(this.getActualAttribute('target').y, 100)
              </handler>
            </animator>
            <animgroup repeat="1" bounce="false" parallel='true'>
              <animator attribute="x" to="14" duration="1000" motion="linear">
                <handler event='onend'>
                  assert.equal(this.getActualAttribute('target').x, 14)
                </handler>
              </animator>
              <animator delay="500" attribute="y" to="12" duration="1000" motion="linear">
                <handler event='onend'>
                  assert.equal(this.getActualAttribute('target').x, 14)
                  assert.equal(this.getActualAttribute('target').y, 12)
                </handler>
              </animator>
              <handler event='onend'>
                assert.equal(this.getActualAttribute('target').x, 14)
                assert.equal(this.getActualAttribute('target').y, 12)
              </handler>
            </animgroup>
          </animgroup>
        </view>
    
        <view bgcolor='red' id="koala2" x="10" y="75" width="auto" height="auto">
          <text text='Paused'></text>
          <animgroup delay='100' paused='true' repeat="1" bounce="true" sequential='true'>
            <handler event='oninit'>
              setTimeout(function(){
                this.setAttribute('paused', false)
              }.bind(this), 100)
            </handler>
            <handler event='onend'> 
              assert.equal(this.parent.x, 14)
              assert.equal(this.parent.y, 76)
            </handler>
            <animator attribute="x" to="200" duration="100" motion="linear"></animator>
            <animator attribute="y" to="150" duration="500"></animator>
            <animgroup repeat="1" bounce="false" sequential='false'>
              <animator attribute="x" to="14" duration="100" motion="linear"></animator>
              <animator delay="50" attribute="y" to="76" duration="100" motion="linear"></animator>
            </animgroup>
          </animgroup>
        </view>
    
        <view bgcolor='red' id="koala2" x="10" y="150" width="auto" height="auto">
          <text text='Color'></text>
          <animgroup delay='100' repeat="3" bounce="true" parallel='true'>
            <handler event='onend'>
              assert.equal(this.parent.x, 10)
              assert.equal(this.parent.bgcolor, '#0000ff')
            </handler>
            <animator attribute="x" to="100" duration="100" repeat='4' bounce='true' motion="linear"></animator>
            <animator attribute="bgcolor" to="blue" duration="500"></animator>
          </animgroup>
        </view>
    
        <view bgcolor='red' id="koala3" x="10" y="210" width="auto" height="auto">
          <text text='Pause mid'></text>
          <animgroup delay='100' repeat="3" bounce="true" parallel='true'>
            <handler event='ontick' args='time'>
              if (time > 300 && !this._trigger_) {
                this._trigger_ = true
                this.setAttribute('paused', true)
                setTimeout(function(){
                  this.setAttribute('paused', false)
                }.bind(this),1200)
              }
            </handler>
            <animator attribute="x" to="100" duration="100" repeat='4' bounce='true' motion="inOutExpo"></animator>
            <animator attribute="bgcolor" to="orange" repeat='6' bounce='true' duration="100"></animator>
          </animgroup>
        </view>
    
        <view bgcolor='red' id="koala4" x="10" y="260" width="auto" height="auto">
          <text text='Inheritance'></text>
          <animgroup duration="1000">
            <animgroup to='200' bounce="true" parallel='true'>
              <handler event='onend'>
                assert.equal(this.parent.parent.x, 200, 'In tests from dreem 1.')
              </handler>
              <animator attribute="x" repeat='1' bounce='true' motion="inOutExpo"></animator>
            </animgroup>
          </animgroup>
        </view>
    
        <view bgcolor='red' id="koala3" x="10" y="310" width="auto" height="auto">
          <text text='Paused start'></text>
          <animgroup paused='true' repeat="1" bounce="true" parallel='true'>
            <handler event='oninit' args='time'>
              setTimeout(function(){
                this.setAttribute('paused', false)
              }.bind(this),500)
              setTimeout(function(){
                assert.equal(this.parent.x, 101)
              }.bind(this),800)
            </handler>
            <animator attribute="x" to="101" duration="100" repeat='1' bounce='true' motion="inOutExpo"></animator>
          </animgroup>
        </view>
      </view>
    </view>
  </screen>
</screens>
</composition>