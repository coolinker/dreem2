<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<node id="editormodel">
  <handler event="oninit">
    var _this = this;
    // rewrite the file to be editable, which will reload this page automatically
    dr.global.requestor.fetch(window.location.toString() + '?raw=1').success(
      function(data, status) {
        var parser = new dr.htmlparser();
        var jsobj = parser.parse(data)
        _this.setAttribute('model', jsobj);
        _this.sendEvent('onmodelchange', _this)
        //console.log('loaded model', jsobj)
      }
    );
  </handler>

  <attribute name="ready" value="false" type="boolean"></attribute>
  
  <method name="updateAttr" args="id, name, value">
    //console.log('updateAttr', id, name, value);
    var model = this.model;
    if (model) {
      var child = this._findChild(id, model);
      if (child) {
        if (value == null) {
          delete child.attr[name];
        } else {
          child.attr[name] = value;
        }
        if (['name', 'title', 'tag', 'text'].indexOf(name) >= 0) {
          this.sendEvent('onmodelchange', this);
        }
      }
    }
  </method>

  <attribute name="replicatorchanges" value="false" type="boolean"></attribute>
  <handler name="_showReplicationWarning" event="onreplicatorchanges">
    if (preview.visible !== true) {
      messages.addMessage('Changes to replicated classes may require a save or preview to show changes accurately.');
    }
  </handler>
  <method name="_findClassInModel" args="classname">
    var model = this.model;
    if (model) {
      var classmodel = this._findChildByTag('class', model);
      if (classmodel.attr.name === classname) {
        // console.log('found inline class model', classname, classmodel);
        return classmodel;
      }
    }
  </method>
  <method name="updateClassAttr" args="classname, name, value">
    //console.log('updateAttr', id, name, value);
    var classmodel = this._findClassInModel(classname);
    if (classmodel) {
      classmodel.attr[name] = value;
      this.setAttribute('replicatorchanges', true);
      this.sendEvent('onmodelchange', this);
    }
  </method>
  <handler event="onselectedview" args="selected" reference="selectionmanager">
    if (this.replicatorchanges && selected) {
      // selection was lost and we have changes that would require a save
      this._showReplicationWarning();
    }
  </handler>
  
  <method name="deleteNode" args="child, oldParentId">
    var id = child.id,
      model = this.model;
    //console.log('delete', id, oldParentId);
    if (model) {
      var childModel = this._findChild(id, model),
        parentModel = this._findChild(oldParentId, model);
      if (childModel && parentModel) {
        var idx = this._findChildIndex(parentModel, childModel);
        if (idx >= 0) {
          child.__editorModel = parentModel.child[idx];
          parentModel.child.splice(idx, 1);
          this.sendEvent('onmodelchange', this);
        }
      }
    }
  </method>
  
  <method name="createClassNode" args="child, classname">
    var parent = this._findClassInModel(classname);
    if (child && parent) {
      if (!parent.child) parent.child = [];
      parent.child.push(child.__editorModel || child.objectify({}));
      this.setAttribute('replicatorchanges', true);
      this.sendEvent('onmodelchange', this);
    }
  </method>

  <method name="createNode" args="child, newParentId">
    //console.log('create', newParentId, child);
    var model = this.model;
    if (model) {
      var parent = this._findChild(newParentId, model);
      if (child && parent) {
        if (!parent.child) parent.child = [];
        
        if (child.isA(dr.View)) {
          var prevSiblingView = child.getPrevSiblingView(),
            prevSibling = prevSiblingView ? this._findChild(prevSiblingView.id, model) : null,
            idx = prevSibling ? this._findChildIndex(parent, prevSibling) : -1;
          
          // Convert child (and tree) to object structure and insert
          parent.child.splice(idx + 1, 0, child.__editorModel || child.objectify({}));
          this.sendEvent('onmodelchange', this);

        } else {

          parent.child.push(child.__editorModel || child.objectify({}));
          this.sendEvent('onmodelchange', this);

        }
      }
    }
  </method>
  
  <method name="moveNode" args="childView, oldParentId, newParentId">
    var model = this.model;
    if (model) {
      var id = childView.id,
        child = this._findChild(id, model),
        parent = this._findChild(oldParentId, model);
      if (child && parent) {
        var idx = this._findChildIndex(parent, child);
        if (idx >= 0) {
          parent.child.splice(idx, 1);
          
          var newParent = this._findChild(newParentId, model);
          if (newParent) {
            var prevSiblingView = childView.getPrevSiblingView(),
              prevSibling = prevSiblingView ? this._findChild(prevSiblingView.id, model) : null,
              newIdx = prevSibling ? this._findChildIndex(newParent, prevSibling) : -1;
            
            if (!newParent.child) newParent.child = [];
            
            newParent.child.splice(newIdx + 1, 0, child);
          }
          this.sendEvent('onmodelchange', this);

        }
      }
    }
  </method>
  
  <method name="moveInFrontOf" args="id, siblingId, parentId">
    //console.log('moveInFrontOf', id, siblingId, parentId);
    var model = this.model;
    if (model) {
      var child = this._findChild(id, model),
        sibling = this._findChild(siblingId, model),
        parent = this._findChild(parentId, model);
      if (child && sibling && parent) {
        // Remove child
        var idx = this._findChildIndex(parent, child);
        if (idx >= 0) parent.child.splice(idx, 1);
        
        // Insert child
        idx = this._findChildIndex(parent, sibling);
        if (idx >= 0) parent.child.splice(idx + 1, 0, child);
        this.sendEvent('onmodelchange', this);
      }
    }
  </method>
  
  <method name="moveToBack" args="id, parentId">
    //console.log('moveToBack', id, parentId);
    var model = this.model;
    if (model) {
      var child = this._findChild(id, model),
        parent = this._findChild(parentId, model);
      if (child && parent) {
        var idx = this._findChildIndex(parent, child);
        if (idx > 0) {
          parent.child.splice(idx, 1);
          
          // HACK: if the parent is the root then the first child must continue
          // to be the editor include tag.
          var searchChild;
          for (var i = 0, len = parent.child.length; len > i; i++) {
            searchChild = parent.child[i];
            if (searchChild.tag !== 'include') {
              parent.child.splice(i, 0, child);
              break;
            }
          }
          this.sendEvent('onmodelchange', this);
        }
      }
    }
  </method>
  
  <method name="save">
    dr.global.requestor.send(window.location.toString() + '?edit=1', JSON.stringify(this.model));
  </method>

  <method name="stop">
    dr.global.requestor.send(window.location.toString() + '?edit=1&stripeditor=1', JSON.stringify(this.model));
  </method>
  
  <method name="getPkg">
    var compositionNode = this._findChildByTag('composition', this.model);
    
    // Copy it
    compositionNode = JSON.parse(JSON.stringify(compositionNode));
    
    // Clean composition node
    var depth = 0;
    function cleanComposition(jsobj) {
      depth++;
      
      var children = jsobj.child;
      if (children) {
        var child, i = children.length, attrs;
        while (i) {
          child = children[--i];
          
          attrs = child.attr;
          if (attrs) {
            if (depth === 4 && attrs.placement === 'editor') delete attrs.placement;
            
            var mixins = attrs.with;
            if (mixins) {
              var newMixins = [];
              mixins.split(define.SEPARATOR_REGEX).forEach(
                function(mixinName) {
                  if (mixinName !== 'editable') newMixins.push(mixinName);
                }
              );
              attrs.with = newMixins.join(',');
            }
          }
          
          if (child.tag === 'include') {
            children.splice(i, 1);
          } else {
            cleanComposition(child);
          }
        }
      }
      
      depth--;
    };
    cleanComposition(compositionNode);
    
    return {
      composition:compositionNode,
      classmap:dr.classmap
    };
  </method>
  
  <method name="_findChildIndex" args="parent, child">
    var children = parent.child;
    if (children) {
      var i = children.length, child,
        searchId = child.attr.id;
      while (i) {
        child = children[--i];
        if (child.attr && child.attr.id === searchId) return i;
      }
    } else {
      return -1;
    }
  </method>
  
  <method name="_findChild" args="id, jsobj">
    if (!id) return null;
    
    var children = jsobj.child, child;
    for (var i = 0; children.length > i; i++) {
      child = children[i]
      if (child.attr && child.attr.id === id) {
        return child;
      } else if (child.child) {
        var newchild = this._findChild(id, child);
        if (newchild) return newchild;
      }
    }
  </method>
  
  <method name="_findChildByTag" args="tagname, jsobj">
    var children = jsobj.child, child;
    for (var i = 0; children.length > i; i++) {
      child = children[i]
      if (child.tag === tagname) {
        return child;
      } else if (child.child) {
        var newchild = this._findChildByTag(tagname, child);
        if (newchild) return newchild;
      }
    }
  </method>
  
  <method name="getModelNode" args="child">
    return this._findChild(child.id || child.getRoot().id, this.model);
  </method>
  
  <method name="getAttrValue" args="child, attrName">
    var modelNode = this.getModelNode(child);
    if (modelNode) return modelNode.attr[attrName];
    return undefined;
  </method>
</node>