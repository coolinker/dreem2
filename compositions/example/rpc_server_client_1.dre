<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->



<!--
  This example demonstrates how the server can call a method on the client().
  The process starts when the client calls a server method which constantly
  calls a client method to increment a counter. The counter is displayed on
  the screen via the onidle event.
-->

<composition>

<screens>
  <screen type="browser" name="default" title="RPC client->server">
    
    <attribute name="client_count" type="number" value="0"></attribute>

    <method name="client_method">
      this.client_count += 1;
      return this.client_count;
    </method>

    <view width="100%" height="100%" padding="4">
      <handler event="oninit">
        // Tell the server to start running
        dr.teem.server.incr();
      </handler>

      <handler event="onidle" reference="dr.idle">
        // Show the server's count value
        counter.setAttribute('text', dr.teem.server.count);
      </handler>

      <spacedlayout axis="x" spacing="3" updateparent="true"></spacedlayout>
      <text>Counter:</text>
      <text id="counter"></text>
    </view>

  </screen>
</screens>

<server>
  <attribute name="count" type="number" value="0"></attribute>

  <method name="incr">
    var self = this;
    // Call a method on the client to increment a counter
    this.teem.screens.default.client_method().then(function(value) {
      //TODO Find out why the method is receiving an array, not a value
      if (Array.isArray(value)) value = value.pop();
      self.count = value;

      setTimeout(function() {self.incr();}, 0);
    });
  </method>
</server>

</composition>
