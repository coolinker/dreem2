<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
  <screens>
    <screen type="browser" name="default" title='Smoke Test - Tree'>
      <include href="./includes/boilerplate.dre"></include>

      <view width="100%" height="100%" padding="25">
        <spacedlayout axis="y" spacing="15"></spacedlayout>

        <tree name="simple" height="200" width="200" data='{ "label":"root", nodes:[{ "label":"child1", nodes:[{ "label":"child1child1", nodes:[] }] }, { "label":"child2", nodes:[] }] }'>
        </tree>

        <tree name="diff_patch_test">
          <handler event="oninit">
            var a = {
              onlyina: true,
              objina: { some:'object' },
              array: [1,2,3,5],
              objinboth: { same:'object', ina:'onlyina', changed:'aversion' },
              inboth:true
            };
            var b = {
              onlyinb: true,
              objinb: { some:'object' },
              array: [0,2,3,4,6],
              objinboth: { same:'object', inb:'onlyinb', changed:'bversion' },
              inboth:true
            };
            var patch = this.diff(a,b);
            var expected = [
              {action:'DEL', path:'/onlyina'},
              {action:'DEL', path:'/objina'},
              {action:'DEL', path:'/array[3]'},
              {action:'DEL', path:'/array[0]'},
              {action:'SET', path:'/array[0]', value:0},
              {action:'SET', path:'/array[3]', value:4},
              {action:'SET', path:'/array[4]', value:6},
              {action:'DEL', path:'/objinboth/ina'},
              {action:'SET', path:'/objinboth/changed', value:'bversion'},
              {action:'SET', path:'/objinboth/inb', value:'onlyinb'},
              {action:'SET', path:'/onlyinb', value:true},
              {action:'SET', path:'/objinb', value:{ some:'object' }},
            ];
            assert.deepEqual(expected, patch);

            var c = JSON.parse(JSON.stringify(a));
            assert.notDeepEqual(b, c);
            this.patch(patch, c);
            assert.deepEqual(b, c);

            var blankpatch = this.diff({},b);
            var blankexpected = [
              {action:'SET', path:'/onlyinb', value:true},
              {action:'SET', path:'/objinb', value:{ some:'object' }},
              {action:'SET', path:'/array', value:[0,2,3,4,6]},
              {action:'SET', path:'/objinboth', value:{ same:'object', inb:'onlyinb', changed:'bversion' }},
              {action:'SET', path:'/inboth', value:true}
            ];
            assert.deepEqual(blankexpected, blankpatch);

            var d = {};
            assert.notDeepEqual(b, d);
            this.patch(blankpatch, d);
            assert.deepEqual(b, d);
          </handler>
        </tree>

        <!--<tree name="deeper" height="500" width="200" border="1" bordercolor="#eee"-->
          <!--data='[{"label":"first", "items":[{"name":"first inner", "items":["a", "b", "c"]}, {"name":"second inner", "items":["a2", "b2", {"name":"much in", "items":[1, 2, 3, 4]}]}]}, "second", { "name": "third", "nodes": [4, 5, 6] }]'>-->
          <!--<handler event="oninit" args="p">-->
            <!--assert.deepEqual([{"label":"first", "items":[{"name":"first inner", "items":["a", "b", "c"]}, {"name":"second inner", "items":["a2", "b2", {"name":"much in", "items":[1, 2, 3, 4]}]}]}, "second", { "name": "third", "nodes": [4, 5, 6] }], this.data)-->
            <!--assert.equal('first', this.treenode_0.item.label.text);-->
            <!--assert.equal('second inner', this.treenode_0.treenode_1.item.label.text);-->
            <!--assert.equal('much in', this.treenode_0.treenode_1.treenode_2.item.label.text);-->
            <!--assert.equal('4', this.treenode_0.treenode_1.treenode_2.treenode_3.item.label.text);-->
          <!--</handler>-->
        <!--</tree>-->

        <!--<tree id="a" name="selection" height="200" width="200" border="1" bordercolor="#eee" multipleselection="false" branchselection="true"-->
          <!--data='[{"label":"first", "items": [1, 2, 3]}, {"label":"second", "items": ["a", "b", "c"]}]'>-->
          <!--<handler event="oninit">-->
          <!--</handler>-->
        <!--</tree>-->

        <!--<tree name="advanced" height="500" width="200" border="1" bordercolor="#eee"-->
          <!--data='[{"label":"first", "items":[{"name":"a", "items":["1", "2", "3"]}, "b", {"c":["d", "e"], "f":"g"}, {"h":"i"}]}, "second", {"title":"third"}, "3.5th", ["fourth", "fifth", ["sixth", "seventh"]]]'>-->
          <!--<handler event="oninit" args="p">-->
            <!--assert.deepEqual([{"label":"first", "items":[{"name":"a", "items":["1", "2", "3"]}, "b", {"c":["d", "e"], "f":"g"}, {"h":"i"}]}, "second", {"title":"third"}, "3.5th", ["fourth", "fifth", ["sixth", "seventh"]]], this.data)-->
          <!--</handler>-->
        <!--</tree>-->
      </view>
    </screen>
  </screens>
</composition>