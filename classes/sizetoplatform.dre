<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
      * @class dr.sizetoplatform {UI Components}
      * Enables a view to size itself to the platform object it contains. This
      * is a reversal of the standard relationship where the "model" pushes
      * changes into the platform object.
      * 
      * If you set an explicit width or height sizing to the platform object
      * will be suspended for that axis. If later you want to restore the size 
      * to platform object behavior set the width or height to a value 
      * of 'auto'.
      *
      * If you make a modification to the platform object through a mechanism 
      * that results in a change to the size of the platform object you will 
      * need to call the sizeToPlatform method to trigger an update of 
      * the width and height of the view.
      * 
      */-->
<mixin name="sizetoplatform" type="coffee" width="auto" height="auto">
  <!-- Border changes the size of the platform object so do 
       a sizeToPlatform. -->
  <setter name="topborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="bottomborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="leftborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="rightborder" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <!-- Padding changes the size of the platform object so do 
       a sizeToPlatform. -->
  <setter name="toppadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="bottompadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="leftpadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="rightpadding" args="v">
    retval = @super()
    if @inited then @sizeToPlatform()
    return retval
  </setter>

  <setter name="width" args="v">
    if not @__internalUpdate
      if v is 'auto'
        @__hasSetWidth = false
        @sprite.set_width('auto')
        if @inited then @sizeToPlatform()
        return
      else
        @__hasSetWidth = true
    return @super()
  </setter>

  <setter name="height" args="v">
    if not @__internalUpdate
      if v is 'auto'
        @__hasSetHeight = false
        @sprite.set_height('auto')
        if @inited then @sizeToPlatform()
        return
      else
        @__hasSetHeight = true
    return @super()
  </setter>

  <method name="initNode" args="parent, attrs">
    @super()
    
    # For some reason replication creates views without sprites.
    # See pivotal #88868214
    return unless @sprite
    
    # Makes initial border and padding work
    @sprite.set_width('auto') if @width is @__fullBorderPaddingWidth
    @sprite.set_height('auto') if @height is @__fullBorderPaddingHeight
  </method>

  <method name="__updateInnerWidth">
    # Ensure that __updateInnerWidth updates width "internally"
    @__internalUpdate = true;
    @super()
    @__internalUpdate = false;
  </method>

  <method name="__updateInnerHeight">
    # Ensure that __updateInnerHeight updates height "internally"
    @__internalUpdate = true;
    @super()
    @__internalUpdate = false;
  </method>

  <!--/**
    * @method sizeToPlatform
    * Sizes this view to the current size of the DOM elements within it.
    * @returns {void}
    */-->
  <method name="sizeToPlatform">
    bounds = @sprite.getBounds()
    
    @__internalUpdate = true
    unless @__hasSetWidth
      @setSimpleActual('width', bounds.width, true) # Avoid dom update
      @setSimpleActual('innerwidth', @width - @__fullBorderPaddingWidth, true);
    unless @__hasSetHeight
      @setSimpleActual('height', bounds.height, true) # Avoid dom update
      @setSimpleActual('innerheight', @height - @__fullBorderPaddingHeight, true);
    @__updateBounds()
    @__internalUpdate = false
  </method>
  
  <method name="__setupAutoConstraint" args="name, value, axis">
    if value is 'auto'
      value
    else
      @super()
  </method>
  
  <handler event="oninit">
    # Size to platform here rather than in initNode so CSS rules that are
    # set late by style elements in the browser runtime have a chance to 
    # be applied
    @sizeToPlatform()
  </handler>
</mixin>
