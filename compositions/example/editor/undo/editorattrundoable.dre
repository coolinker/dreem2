<!-- The MIT License (see LICENSE)
     Copyright (C) 2014-2015 Teem2 LLC -->
<!--/**
  * @class dr.editor.editorattrundoable {UI Components}
  * @extends dr.editor.attrundoable
  * A specialized attribute undoable implementation for the editor.
  */-->
<class name="editor-editorattrundoable" extends="editor-attrundoable">
  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method undo
    * @overrides
    */-->
  <method name="undo" args="callback">
    var target = this.target, attr = this.attribute;
    if (attr === 'ignorelayout' && !target.getActualAttribute('ignorelayout')) {
      dr.editor.createlayoutundoable.restoreSingleManagedViewState(target);
    }
    
    var retval = this.super();
    
    if (attr === 'updateparent' && target.isA(dr.Layout) && !target.getActualAttribute('updateparent')) {
      dr.editor.createlayoutundoable.restoreManagedParentState(this);
    }
    
    return retval;
  </method>

  <!--/**
    * @method redo
    * @overrides
    */-->
  <method name="redo" args="callback">
    var target = this.target, attr = this.attribute;
    if (attr === 'ignorelayout' && !target.getActualAttribute('ignorelayout')) {
      dr.editor.createlayoutundoable.restoreSingleManagedViewState(target);
    }
    
    var retval = this.super();
    
    if (attr === 'updateparent' && target.isA(dr.Layout) && !target.getActualAttribute('updateparent')) {
      dr.editor.createlayoutundoable.restoreManagedParentState(this);
    }
    
    return retval;
  </method>
</class>
