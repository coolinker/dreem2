<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->
<!--/**
   * @class dr.treeitem {UI Components}
   * @extends dr.view
   * A visual component used by a tree to render the look and feel of a
   * single node in the tree.
   */-->
<class name="treeitem" with="button, reusable"
  focusembellishment="false" focusable="false"
>
  <!--// Attributes /////////////////////////////////////////////////////////-->
  <attribute name="indent" type="number" value="0"/>
  <attribute name="leafindent" type="number" value="22"/>
  <attribute name="tree" type="object" value=""/>
  <attribute name="collapsed" type="boolean" value="false"/>
  <attribute name="isleaf" type="boolean" value="false"/>

  <attribute name="requiredwidth" type="number" value="0"/>

  <attribute name="selected" type="boolean" value="false"/>
  <setter name="selected" args="selected">
    if (this.setActual('selected', selected, 'boolean', false)) this.handleSelection(this.selected);
    
    if (this.inited) this.updateUI();
  </setter>

  <attribute name="data" type="object" value=""/>
  <setter name="data" args="data">
    this.setActual('data', data, 'object');
    if (this.inited) {
      var d = this.data;
      if (d) {
        this.label.setAttribute('text', d.label || d.title || d.text || d.name || d.tag);
        var imageUrl = d.image || d.bitmap || d.src;
        this.image.setAttribute('src', imageUrl);
        this.image.setAttribute('visible', !!(imageUrl));
      }
      this.xlayout.setAttribute('locked', false);
    }
  </setter>


  <!--// Life Cycle /////////////////////////////////////////////////////////-->
  <method name="clean">
    this.xlayout.setAttribute('locked', true);
    
    this.setAttribute('visible', false);
    this.setAttribute('collapsed', false);
    this.setAttribute('isleaf', false);
    
    this.__treechildren = null;
    this.__treesiblings = null;
    this.__treeparent = null;
    this.__treemodel.__view = null;
    this.__treemodel = null;
    this.__treedepth = -1;
    
    this.selected = this.__cfg_selected = false;
    this.data = this.__cfg_data = null;
    
    this.drawReadyState();
  </method>


  <!--// Methods ////////////////////////////////////////////////////////////-->
  <method name="handleSelection" args="selected">
    // implement in subclass
  </method>

  <method name="doActivated">
    this.tree.setSelectionState(this.__treemodel, !this.__treemodel.__selected);
  </method>

  <method name="drawHoverState">
    var tc = this.tree;
    if (this.selected) {
      this._draw(tc.selecttextcolor, tc.selectcolor);
    } else {
      this._draw(tc.textcolor, tc.hovercolor);
    }
  </method>

  <method name="drawActiveState">
    var tc = this.tree;
    this._draw(tc.textcolor, tc.activecolor);
  </method>

  <method name="drawReadyState">
    var tc = this.tree;
    if (this.selected) {
      this._draw(tc.selecttextcolor, tc.selectcolor);
    } else {
      this._draw(tc.textcolor, 'transparent');
    }
  </method>

  <method name="_draw" args="color, bgcolor">
    this.setAttribute('color', color);
    this.setAttribute('bgcolor', bgcolor);
  </method>


  <!--// Views/Nodes ////////////////////////////////////////////////////////-->
  <spacedlayout name="xlayout" locked="true" updateparent="true"
    inset="${this.parent.indent + (this.parent.isleaf ? this.parent.leafindent : 5)}" spacing="2" outset="5"
  >
    <method name="updateParent" args="attribute, value, count">
      var item = this.parent,
        newRequiredWidth = Math.ceil(value + this.outset) || 0;
      
      if (item.requiredwidth !== newRequiredWidth) {
        item.setAttribute('requiredwidth', newRequiredWidth);
        item.tree.notifyItemWidth(item);
      }
    </method>
  </spacedlayout>

  <text name="toggle" with="button" visible="${!this.parent.isleaf}"
    focusable="false" focusembellishment="false"
    width="15" height="15" y="middle"
    text="${this.parent.collapsed ? '▶' : '▼'}" fontsize="13"
    disabled="${this.parent.disabled}"
  >
    <method name="doActivated">
      var parent = this.parent;
      parent.tree.setCollapsedState(parent, !parent.collapsed);
    </method>
    
    <method name="drawHoverState">
      this.parent.drawHoverState();
    </method>
    
    <method name="drawActiveState">
      this.parent.drawActiveState();
    </method>
    
    <method name="drawReadyState">
      this.parent.drawReadyState();
    </method>
  </text>

  <bitmap name="image" visible="false" stretches="scale" width="19" height="15" y="middle"/>

  <text name="label" fontsize="14" y="middle"/>
</class>
