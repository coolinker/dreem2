<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
  * @class dr.dataset {Data}
  * @extends dr.node
  * Datasets hold onto a set of JSON data, either inline or loaded from a URL.
  * They are used with lz.replicator for data binding.
  *
  * This example shows how to create a dataset with inline JSON data, and use a replicator to show values inside. Inline datasets are useful for prototyping, especially when your backend server isn't ready yet:
  *
  *     @example wide
  *     <dataset name="example">
  *      {
  *        "store": {
  *          "book": [
  *            {
  *              "category": "reference",
  *              "author": "Nigel Rees",
  *              "title": "Sayings of the Century",
  *              "price": 8.95
  *            },
  *            {
  *              "category": "fiction",
  *              "author": "Evelyn Waugh",
  *              "title": "Sword of Honour",
  *              "price": 12.99
  *            },
  *            {
  *              "category": "fiction",
  *              "author": "Herman Melville",
  *              "title": "Moby Dick",
  *              "isbn": "0-553-21311-3",
  *              "price": 8.99
  *            },
  *            {
  *              "category": "fiction",
  *              "author": "J. R. R. Tolkien",
  *              "title": "The Lord of the Rings",
  *              "isbn": "0-395-19395-8",
  *              "price": 22.99
  *            }
  *          ],
  *          "bicycle": {
  *            "color": "red",
  *            "price": 19.95
  *          }
  *        }
  *      }
  *     </dataset>
  *     <spacedlayout axis="y" spacing="5"></spacedlayout>
  *     <replicator classname="text" datapath="$example/store/book[*]/title"></replicator>
  *
  * Data can be loaded from a URL when your backend server is ready, or reloaded to show changes over time:
  *
  *     @example wide
  *     <dataset name="example" url="/examples/data/example.json"></dataset>
  *     <spacedlayout axis="y" spacing="5"></spacedlayout>
  *     <replicator classname="text" datapath="$example/store/book[*]/title"></replicator>
  */-->
<class name="dataset" type="coffee" extends="node" scriptincludes="/lib/json.async.js"
  requires="datapath"
>
  <attribute name="datasets" type="expression" value="{}" allocation="class"></attribute>

  <!--/**
    * @attribute {String} name (required)
    * The name of the dataset
    */-->
  <setter name="name" args="name">
    if not @initing then @_storeByName(name, @name)
    return name
  </setter>

  <!--/**
    * @attribute {Object} data
    * The data inside the dataset
    */-->
  <attribute name="data" type="expression" value="undefined"></attribute>

  <!--/**
    * @attribute {String} url
    * The url to load JSON data from.
    */-->
  <attribute name="url" type="string" value="" editorname="URL"></attribute>

  <!--/**
    * @attribute {Boolean} [async=true]
    * If true, parse json in a worker thread
    */-->
  <attribute name="async" value="true" type="boolean" editorname="Asynchronous"></attribute>

  <setter name="$textcontent" args="textcontent">
    textcontent = textcontent?.trim()
    if textcontent?
      @setAttribute('data', JSON.parse(textcontent))
    return textcontent
  </setter>

  <handler event="onurl" args="url">
    return unless url
    # console.log('loading url', url)

    cb = (json) =>
      @setAttribute('data', json)

    dr.global.requestor.fetch(url).success((data) =>
      if (@async)
        JSON.parseAsync(data, cb)
      else
        cb(JSON.parse(data))
    ).error((error) ->
      console.error('Failed to load data', url, @, error)
    )
  </handler>

  <method name="initNode" args="parent, attrs">
    @super()
    
    @_storeByName(@name)
  </method>

  <!--/**
    * @private
    */-->
  <method name="_storeByName" args="newName,oldName">
    datasets = dr.dataset.datasets
    
    if oldName
      delete datasets[oldName]
    
    if newName
      if datasets[newName]?
        console.warn('Clobbering existing dataset named: "' + newName + '".')
      datasets[newName] = @
    else
      console.warn('No name provided to dataset.')
  </method>

  <method name="updateData" args="path, data">
    # find the scope and property to be updated
    re = /\/([^\/]+)$/
    property = path.match(re)
    if property and property[1]
      subpath = path.replace(re, '')

      # console.log('updating data', @data, subpath)
      scope = JsonPath.resolve(@data, subpath)
      # only handle updating a single field
      return unless scope.length == 1

      # console.log(data, @data, path, scope[0], property[1], scope[0][property[1]])
      scope[0][property[1]] = data
      # TODO: send smaller updates based on path argument
      @sendEvent('data', @data)
  </method>

  <method name="isLeaf" args="subnode">
    # Datasets do not support child nodes.
    return true
  </method>

  <!--// Editor //-->
  <attribute name="hiddenattrs" type="expression" value="{data:true}" allocation="class"/>
</class>
