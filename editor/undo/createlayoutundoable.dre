<!--
Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->


<!--/**
  * @class dr.editor.createlayoutundoable {UI Components}
  * @extends dr.editor.createundoable
  * An undoable that Inserts a new layout into a parent node.
  */-->
<class name="editor-createlayoutundoable" extends="editor-createundoable"
  undodescription='Undo create layout.'
  redodescription='Redo create layout.'
>
  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method undo
    * @overrides
    * Removes the target layout from its parent.
    */-->
  <method name="undo" args="callback">
    var retval = this.super();
    
    // Only do this if creation succeeded
    if (!this.done) {
      var CLU = dr.editor.createlayoutundoable;
      CLU.restoreManagedViewState(this);
      CLU.refresh(this._targetParent);
    }
    
    return retval;
  </method>

  <!--/**
    * @method redo
    * @overrides
    * Inserts the target layout into the target parent.
    */-->
  <method name="redo" args="callback">
    var retval = this.super();
    
    // Only do this if creation succeeded
    if (this.done) {
      var target = this.target,
        CLU = dr.editor.createlayoutundoable;
      if (this._notFirstTime) {
        CLU.refresh(this._targetParent);
        target.update();
      } else {
        // Remember initial state of all views effected by the layout so we
        // can restore them during undo.
        if (dr.sprite.retrieveGlobal('previewer_undostack')) {
          var parent = target.parent, 
            svs = parent.getSubviews(),
            i = svs.length;
          CLU._storeModel(parent);
          while (i) CLU._storeModel(svs[--i]);
        }
        
        CLU.refresh(target.parent);
        target.setAttribute('locked', false);
      }
    }
    
    return retval;
  </method>


  <!--// Class Methods //////////////////////////////////////////////////////-->
  <method name="refresh" args="targetParent" allocation="class">
    if (dr.sprite.retrieveGlobal('previewer_undostack')) {
      // Previewer only case
    } else {
      // Editor only case
      if (selectionmanager.selectedview === targetParent) {
        layouts_panel.refresh(targetParent);
      } else {
        selectionmanager.select(targetParent);
      }
    }
  </method>

  <method name="restoreManagedViewState" args="undoable" allocation="class">
    var layout = undoable.target,
      svs = layout.getSubviews(),
      i = svs.length, sv,
      domains = layout.__getLayoutDomains(),
      isDomainX = domains.x,
      isDomainY = domains.y,
      isDomainW = domains.width,
      isDomainH = domains.height,
      layouthint, model;
    layout.setAttribute('locked', true);
    while (i) {
      sv = svs[--i];
      layouthint = sv.getActualAttribute('layouthint');
      model = this._getModel(sv);
      if (isDomainX || layout.__shouldRestoreForLayoutHint('x', layouthint, null)) sv.restoreAttrToModel('x', model);
      if (isDomainW || layout.__shouldRestoreForLayoutHint('width', layouthint, null)) sv.restoreAttrToModel('width', model);
      if (isDomainY || layout.__shouldRestoreForLayoutHint('y', layouthint, null)) sv.restoreAttrToModel('y', model);
      if (isDomainH || layout.__shouldRestoreForLayoutHint('height', layouthint, null)) sv.restoreAttrToModel('height', model);
    }
    this._restoreManagedParentState(undoable);
    layout.setAttribute('locked', false);
  </method>

  <method name="restoreManagedParentState" args="undoable" allocation="class">
    var layout = undoable.target;
    layout.setAttribute('locked', true);
    this._restoreManagedParentState(undoable);
    layout.setAttribute('locked', false);
  </method>

  <method name="_restoreManagedParentState" args="undoable" allocation="class">
    var layout = undoable.target,
      domains = layout.__getLayoutDomains(),
      parent = undoable._targetParent || layout.parent,
      model = this._getModel(parent);
    if (domains.x) parent.restoreAttrToModel('width', model);
    if (domains.y) parent.restoreAttrToModel('height', model);
  </method>

  <method name="restoreSingleManagedViewState" args="view" allocation="class">
    var layouthint = view.getActualAttribute('layouthint'),
      model = this._getModel(view);
    
    if (view.__layoutDomainInUseForView('x') || view.__shouldRestoreForLayoutHint('x', layouthint, null)) view.restoreAttrToModel('x', model);
    if (view.__layoutDomainInUseForView('y') || view.__shouldRestoreForLayoutHint('y', layouthint, null)) view.restoreAttrToModel('y', model);
    if (view.__layoutDomainInUseForView('width') || view.__shouldRestoreForLayoutHint('width', layouthint, null)) view.restoreAttrToModel('width', model);
    if (view.__layoutDomainInUseForView('height') || view.__shouldRestoreForLayoutHint('height', layouthint, null)) view.restoreAttrToModel('height', model);
  </method>

  <method name="restoreForLayoutHint" args="view, from, to" allocation="class">
    var AS = dr.AccessorSupport,
      model = this._getModel(view);
    from = AS.coerce('layouthint', from, 'json');
    to = AS.coerce('layouthint', to, 'json');
    
    if (view.__shouldRestoreForLayoutHint('x', from, to)) view.restoreAttrToModel('x', model);
    if (view.__shouldRestoreForLayoutHint('y', from, to)) view.restoreAttrToModel('y', model);
    if (view.__shouldRestoreForLayoutHint('width', from, to)) view.restoreAttrToModel('width', model);
    if (view.__shouldRestoreForLayoutHint('height', from, to)) view.restoreAttrToModel('height', model);
  </method>

  <!-- Get the model to use for attribute restoration.
       @private -->
  <method name="_getModel" args="view" allocation="class">
    var editormodel = dr.sprite.retrieveGlobal('editormodel');
    if (editormodel) {
      // The editor uses the editor model
      return editormodel.getModelNode(view);
    } else {
      // The previewer uses the restore model stored on each view.
      return view.__restoreModel;
    }
  </method>

  <!-- Store the model to use for attribute restoration. This model must match
       the JSON model uses in the editormodel.
       @private -->
  <method name="_storeModel" args="view" allocation="class">
    view.__restoreModel = {attr:{
      x:view.__cfg_x,
      y:view.__cfg_y,
      width:view.__cfg_width,
      height:view.__cfg_height
    }};
  </method>
</class>
