<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->
<node id="actions">
  <!--// Life Cycle /////////////////////////////////////////////////////////-->
  <method name="initNode" args="parent, attrs">
    this.super();
    
    // Initialize clipboard
    var clipboard = dr.global.clientstorage.getItem('_editor_clipboard');
    if (clipboard) this.setAttribute('clipboard', clipboard);
  </method>


  <!--// Attributes /////////////////////////////////////////////////////////-->
  <attribute name="clipboard" type="string" value=""/>


  <!--// Methods ////////////////////////////////////////////////////////////-->
  <method name="_undoRedoCallback" args="undoable">
    // Prevents the callback from executing multiple times, once for each 
    // subundoable of a compound undoable.
    if (this._callbackAlreadyCalled) return;
    this._callbackAlreadyCalled = true;
    
    if (!undoable.isA(dr.editor.compoundundoable)) {
      var target = undoable.target;
      if (target) {
        if (target.isA(dr.View) || target.isA(dr.AnimBase) || target.isA(dr.replicator)) {
          if (target.parent) {
            if (selectionmanager.selected !== target) selectionmanager.select(target);
          } else {
            selectionmanager.clear();
          }
        } else if (target.isA(dr.dataset)) {
          if (target.parent === null) {
            // When datasets are "deleted" their parent is set to null rather than undefined.
            selectionmanager.clear();
          } else {
            if (selectionmanager.selected !== target) selectionmanager.select(target);
          }
        } else {
          // Should be handled by the undoable itself
        }
      } else {
        selectionmanager.clear();
      }
    }
  </method>

  <method name="_undoRedoErrorHandler" args="error">
    console.error(error);
  </method>

  <method name="do" args="undoable">
    if (editor.editmode) {
      undo.do(undoable, null, function(error) {
        console.error(error);
        undoable.destroy();
      });
    }
  </method>

  <method name="undo">
    if (editor.editmode) {
      this._callbackAlreadyCalled = false;
      undo.undo(this._undoRedoCallback.bind(this), this._undoRedoErrorHandler);
    }
  </method>
  
  <method name="redo">
    if (editor.editmode) {
      this._callbackAlreadyCalled = false;
      undo.redo(this._undoRedoCallback.bind(this), this._undoRedoErrorHandler);
    }
  </method>

  <method name="bringToFront">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        newprevsibling = selectedview && selectedview.getLastSiblingView();
      if (newprevsibling) this._updateOrder(selectedview, selectedview.getPrevSiblingView(), newprevsibling);
    }
  </method>

  <method name="bringForward">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        newprevsibling = selectedview && selectedview.getNextSiblingView();
      if (newprevsibling) this._updateOrder(selectedview, selectedview.getPrevSiblingView(), newprevsibling);
    }
  </method>

  <method name="sendToBack">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        oldprevsibling = selectedview && selectedview.getPrevSiblingView();
      if (oldprevsibling) this._updateOrder(selectedview, oldprevsibling, null);
    }
  </method>

  <method name="sendBackward">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        oldprevsibling = selectedview && selectedview.getPrevSiblingView();
      if (oldprevsibling) this._updateOrder(selectedview, oldprevsibling, oldprevsibling.getPrevSiblingView());
    }
  </method>

  <method name="_updateOrder" args="target, oldprevsib, newprevsib">
    actions.do(new dr.editor.orderundoable({target:target, oldprevsibling:oldprevsib, newprevsibling:newprevsib}));
  </method>

  <method name="save">
    if (editormenubar.oktosave) {
      editormodel.save();
      undo.reset();
      var msgRef = dialogmanager.showMessage(
        'Saving changes to screen "' + editormodel.screenname + '" of the composition...'
      ); // FIXME: message only dialog
    }
  </method>

  <method name="stop">
    if (editor.editmode) {
      if (editormenubar.oktosave) {
        dialogmanager.showConfirm(
          'You have unsaved changes. Are you sure you want to exit the editor and discard your changes?', null, null, function(dialog, success) {
            if (success) {
              editormodel.stop();
            } else {
              // Exit cancelled
            }
          }
        );
      } else {
        editormodel.stop();
      }
    }
  </method>

  <method name="changeScreen" args="screenname">
    if (editormenubar.oktosave) {
      dialogmanager.showConfirm(
        'You have unsaved changes. Are you sure you want to change screens and discard your changes?', null, null, function(dialog, success) {
          if (success) {
            editormodel.changeScreen(screenname);
          } else {
            // Exit cancelled
          }
        }
      );
    } else {
      editormodel.changeScreen(screenname);
    }
  </method>

  <method name="editPreview">
    if (editor.editmode) {
      editor.setAttribute('editmode', false);
      selectionmanager.clear(true);
      preview.setAttribute('visible', true);
      preview.setAttribute('src', '/editor/preview.dre?spinner=false');
    } else {
      editor.setAttribute('editmode', true);
      selectionmanager.restore();
      preview.setAttribute('visible', false);
      preview.setAttribute('src', '/iframe_stub.html');
    }
  </method>

  <method name="livePreview">
    if (editor.editmode) {
      var win = window.open(editormodel.getPreviewerUrl(), '_blank');
      win.blur();
      window.focus();
    }
  </method>

  <method name="deleteSelected">
    if (this._isEditableSelection()) {
      var target = selectionmanager.selected,
        E = dr.editor, undoClass;
      if (target.isA(dr.AnimBase)) {
        undoClass = E.deleteanimatorundoable;
      } else {
        undoClass = E.deleteundoable;
      }
      actions.do(new undoClass({target:target}));
      selectionmanager.clear();
    }
  </method>

  <method name="showMessagePanel">
    messages.open();
  </method>

  <method name="cut">
    if (this._isEditableSelection()) {
      this.copy();
      this.deleteSelected();
    }
  </method>

  <method name="copy">
    if (this._isEditableSelection()) {
      var clipboard = JSON.stringify(selectionmanager.selected.serialize());
      this.setAttribute('clipboard', clipboard);
      dr.global.clientstorage.setItem('_editor_clipboard', clipboard);
    }
  </method>

  <method name="paste">
    var selected = selectionmanager.selected,
      clipboard = this.clipboard;
    if (clipboard && editor.editmode && selected && !selected.isInlineEdit()) {
      var parent;
      if (selectionmanager.isrootselection) {
        // Always paste as child for root selection.
        parent = selected;
      } else {
        // Paste as sibling
        parent = selected.parent;
      }
      
      // Inject unique IDs into the clipboard
      var clipboardObj = JSON.parse(clipboard);
      (function injectId(obj) {
        obj.id = editormodel.generateModelId();
        var children = obj.children, i = children.length;
        while (i) injectId(children[--i]);
      })(clipboardObj);
      
      // Make a copy of the clipboardObj now that it has IDs
      var previewerAttrs = JSON.parse(JSON.stringify(clipboardObj));
      
      var instance = parent.createChild(clipboardObj, [dr.editable]);
      
      // Undoablity (DRY: See componentdropable.notifyDropped line 133)
      // Mark an instance as "new" so we know it needs serialization.
      instance.__NEW = true;
      
      // Make a copy of the attrs needed to instantiate this view in a previewer
      (function cleanPreviewerAttrs(obj) {
        delete obj.__objectify_attrs_list;
        
        // Push on previewable since all nodes/views in a previewer must be previewable.
        if (obj.with) {
          obj.with += ' previewable';
        } else {
          obj.with = 'previewable';
        }
        
        var children = obj.children, i = children.length;
        while (i) cleanPreviewerAttrs(children[--i]);
      })(previewerAttrs);
      
      // Create undoable and "do" it. The previewinfo is also provided so
      // previewers receiving messages can instantiate the new node/view.
      var E = dr.editor,
        undoableAttrs = {target:instance, previewinfo:previewerAttrs};
      this.do(new E.createundoable(undoableAttrs));
      selectionmanager.select(instance);
    }
  </method>

  <method name="shiftUp">
    if (this._isEditableSelection()) reticle.shiftPos(false, false, false);
  </method>

  <method name="shiftUpBig">
    if (this._isEditableSelection()) reticle.shiftPos(false, false, true);
  </method>

  <method name="shiftDown">
    if (this._isEditableSelection()) reticle.shiftPos(false, true, false);
  </method>

  <method name="shiftDownBig">
    if (this._isEditableSelection()) reticle.shiftPos(false, true, true);
  </method>

  <method name="shiftLeft">
    if (this._isEditableSelection()) reticle.shiftPos(true, false, false);
  </method>

  <method name="shiftLeftBig">
    if (this._isEditableSelection()) reticle.shiftPos(true, false, true);
  </method>

  <method name="shiftRight">
    if (this._isEditableSelection()) reticle.shiftPos(true, true, false);
  </method>

  <method name="shiftRightBig">
    if (this._isEditableSelection()) reticle.shiftPos(true, true, true);
  </method>

  <method name="_isEditableSelection">
    var selected = selectionmanager.selected;
    return editor.editmode && selected && !selected.isInlineEdit() && !selectionmanager.isrootselection;
  </method>
</node>
