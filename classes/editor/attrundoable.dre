<!-- The MIT License (see LICENSE)
     Copyright (C) 2014-2015 Teem2 LLC -->
<!--/**
  * @class dr.editor.attrundoable {UI Components}
  * @extends dr.editor.undoable
  * An undoable that updates an attribute on a target object that
  * has support for the setAttribute method as defined in dr.AccessorSupport
  * such as dr.node and dr.view.
  */-->
<class name="editor-attrundoable" extends="editor-undoable"
  undodescription='Undo change {0} from "{1}" to "{2}".'
  redodescription='Redo change {0} from "{1}" to "{2}".'
>
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {dr.AccessorSupport} [target]
    * The target object that will have setAttribute called on it.
    */-->
  <attribute name="target" type="expression" value=""></attribute>

  <!--/**
    * @attribute {String} [attribute]
    * The name of the attribute to update.
    */-->
  <attribute name="attribute" type="string" value="x"></attribute>

  <!--/**
    * @attribute {expression} [oldvalue]
    * The undone value of the attribute. If not provided the current value
    * of the attribute on the target object will be stored the first time
    * redo is executed.
    */-->
  <attribute name="oldvalue" type="expression" value="undefined"></attribute>

  <!--/**
    * @attribute {expression} [newvalue]
    * The done value of the attribute.
    */-->
  <attribute name="newvalue" type="expression" value="undefined"></attribute>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method setAttribute
    * @overrides
    * Prevent resolution of constraints since the values we wish to store
    * for oldvalue and newvalue will often be the string value of a
    * constraint.
    */-->
  <method name="setAttribute" args="attrName, value">
    if ((attrName === 'oldvalue' || attrName === 'newvalue') && this.attribute !== 'parent') {
      var cfgAttrName = dr.AccessorSupport.generateConfigAttrName(attrName);
      if (value !== 'undefined') value = '"' + ('' + value).split('"').join('\\"').split('\n').join('\\n') + '"';
      if (this[cfgAttrName] !== value) {
        this[cfgAttrName] = value;
        this.setActualAttribute(attrName, value);
      }
      return this;
    } else {
      return this.super();
    }
  </method>

  <!--/**
    * @method getUndoDescription
    * @overrides
    * Gets the undo description using the value of the undodescription
    * attribute as a text template which will have the this.attribute, 
    * this.oldvalue and this.newvalue injected into it. See dr.fillTextTemplate
    * for more info on how text templates work.
    */-->
  <method name="getUndoDescription">
    return this.__getDescription(this.super());
  </method>

  <!--/**
    * @method getRedoDescription
    * @overrides
    * Gets the redo description using the value of the redodescription
    * attribute as a text template which will have the this.attribute, 
    * this.oldvalue and this.newvalue injected into it. See dr.fillTextTemplate
    * for more info on how text templates work.
    */-->
  <method name="getRedoDescription">
    return this.__getDescription(this.super());
  </method>

  <!--/**
    * @method __getDescription
    * @private
    */-->
  <method name="__getDescription" args="template">
    return dr.fillTextTemplate(template, this.attribute, this.oldvalue, this.newvalue);
  </method>

  <!--/**
    * @method undo
    * @overrides
    * Sets the attribute on the target object to the oldvalue.
    */-->
  <method name="undo" args="callback">
    if (this.done) {
      this.target.setAttribute(this.attribute, this.oldvalue, true); // 3rd arg enables model update
    } else {
      dr.global.error.notifyWarn('invalidUndo', "Invalid undo in attrundoable.");
    }
    return this.super();
  </method>

  <!--/**
    * @method redo
    * @overrides
    * Sets the attribute on the target object to the newvalue. Also stores
    * the current value of the target object as the oldvalue if this is the
    * first time redo is called successfully.
    */-->
  <method name="redo" args="callback">
    if (this.done) {
      dr.global.error.notifyWarn('invalidRedo', "Invalid redo in attrundoable.");
    } else {
      // Record oldvalue one time only just before applying the new value.
      if (!this.__storedOldValue && this.oldvalue === undefined) {
        this.setAttribute('oldvalue', this.target.getAttribute(this.attribute));
        this.__storedOldValue = true;
      }
      
      this.target.setAttribute(this.attribute, this.newvalue, true); // 3rd arg enables model update
    }
    return this.super();
  </method>

  <!--/**
    * @method serialize
    * @overrides
    */-->
  <method name="serialize" args="obj">
    if (!obj) obj = {};
    
    // Store attrs of this undoable on the obj to be serialized. Use IDs for
    // any node/view references since we just want to retrieve the objects
    // from the composition during deserialization not serialize/deserialize 
    // entire view/node objects.
    obj.target = this.target.id || null;
    obj.attribute = this.attribute;
    
    // The parent attr is a special case where the old and new values are
    // node/view references.
    if (this.attribute === 'parent') {
      obj.oldvalue = this.oldvalue.id;
      obj.newvalue = this.newvalue.id;
    } else {
      obj.oldvalue = this.oldvalue;
      obj.newvalue = this.newvalue;
    }
    
    return this.super(obj);
  </method>

  <!--/**
    * @method deserialize
    * @overrides
    */-->
  <method name="deserialize" args="data">
    // Retrieve objects via the serialized IDs.
    if (data.target) data.target = dr.sprite.retrieveGlobal(data.target);
    
    // The parent attr is a special case where the old and new values are
    // node/view references.
    if (data.attribute === 'parent') {
      data.oldvalue = dr.sprite.retrieveGlobal(data.oldvalue);
      data.newvalue = dr.sprite.retrieveGlobal(data.newvalue);
    }
    
    return this.super(data);
  </method>
</class>
