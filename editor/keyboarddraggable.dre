<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->


<mixin name="keyboarddraggable" with="dropable" allowabort="true"
  focusable="true" focusembellishment="false" distancebeforedrag="1"
>
  <handler event="onkeydown" args="platformEvent">
    if (!this.disabled) {
      switch (dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent)) {
        case 37: // Left arrow
          this._shiftPos(true, false);
          break;
        case 38: // Up arrow
          this._shiftPos(false, false);
          break;
        case 39: // Right arrow
          this._shiftPos(true, true);
          break;
        case 40: // Down arrow
          this._shiftPos(false, true);
          break;
      }
    }
  </handler>

  <method name="_shiftPos" args="isX, increase">
    if (!this.isdragging) {
      var amount = dr.keyboard.isShiftKeyDown() ? 10 : 1,
        gridAmt = Math.max(1, isX ? gridsizex.value : gridsizey.value),
        event = {x:this.x, y:this.y};
      
      this._isArrowAdj = true;
      
      this.setActualAttribute('draginitx', 0).setActualAttribute('draginity', 0);
      this.startDrag(event);
      event[isX ? 'x' : 'y'] += (increase ? 1 : -1) * amount * gridAmt;
      this.updatePosition(event.x, event.y);
      this.stopDrag(event);
      
      this._isArrowAdj = false;
    }
  </method>

  <method name="__doMouseDown" args="event">
    this.super();
    editor.setActualAttribute('showlocationmarkers', false);
    return true;
  </method>

  <method name="__doMouseUp" args="event">
    this.super();
    editor.setActualAttribute('showlocationmarkers', true);
    return true;
  </method>

  <method name="stopDrag" args="event, isAbort">
    // Needed when aborting a drag to show the location markers
    this.super();
    if (isAbort) editor.setActualAttribute('showlocationmarkers', true);
  </method>

  <method name="willPermitDrop" args="droptarget">
    return false;
  </method>
</mixin>