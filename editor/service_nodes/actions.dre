<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->
<node id="actions">
  <method name="_undoRedoCallback" args="undoable">
    // Prevents the callback from executing multiple times, once for each 
    // subundoable of a compound undoable.
    if (this._callbackAlreadyCalled) return;
    this._callbackAlreadyCalled = true;
    
    if (!undoable.isA(dr.editor.compoundundoable)) {
      var target = undoable.target;
      if (target) {
        if (target.isA(dr.View) || target.isA(dr.AnimBase)) {
          if (target.parent) {
            if (selectionmanager.selected !== target) selectionmanager.select(target);
          } else {
            selectionmanager.clear();
          }
        } else {
          // Should be handled by the undoable itself
        }
      } else {
        selectionmanager.clear();
      }
    }
  </method>
  
  <method name="_undoRedoErrorHandler" args="error">
    console.error(error);
  </method>
  
  <method name="do" args="undoable">
    if (editor.editmode) {
      undo.do(undoable, null, function(error) {
        console.error(error);
        undoable.destroy();
      });
    }
  </method>
  
  <method name="undo">
    if (editor.editmode) {
      this._callbackAlreadyCalled = false;
      undo.undo(this._undoRedoCallback.bind(this), this._undoRedoErrorHandler);
    }
  </method>
  
  <method name="redo">
    if (editor.editmode) {
      this._callbackAlreadyCalled = false;
      undo.redo(this._undoRedoCallback.bind(this), this._undoRedoErrorHandler);
    }
  </method>
  
  <method name="bringToFront">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        newprevsibling = selectedview && selectedview.getLastSiblingView();
      if (newprevsibling) this._updateOrder(selectedview, selectedview.getPrevSiblingView(), newprevsibling);
    }
  </method>
  
  <method name="bringForward">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        newprevsibling = selectedview && selectedview.getNextSiblingView();
      if (newprevsibling) this._updateOrder(selectedview, selectedview.getPrevSiblingView(), newprevsibling);
    }
  </method>
  
  <method name="sendToBack">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        oldprevsibling = selectedview && selectedview.getPrevSiblingView();
      if (oldprevsibling) this._updateOrder(selectedview, oldprevsibling, null);
    }
  </method>
  
  <method name="sendBackward">
    if (this._isEditableSelection()) {
      var selectedview = selectionmanager.selectedview,
        oldprevsibling = selectedview && selectedview.getPrevSiblingView();
      if (oldprevsibling) this._updateOrder(selectedview, oldprevsibling, oldprevsibling.getPrevSiblingView());
    }
  </method>
  
  <method name="_updateOrder" args="target, oldprevsib, newprevsib">
    actions.do(new dr.editor.orderundoable({target:target, oldprevsibling:oldprevsib, newprevsibling:newprevsib}));
  </method>
  
  <method name="save">
    editormodel.save();
    undo.reset();
    var msgRef = dialogmanager.showMessage(
      'Saving changes to screen "' + editormodel.screenname + '" of the composition...'
    ); // FIXME: message only dialog
  </method>

  <method name="stop">
    if (!saveButton.disabled) {
      dialogmanager.showConfirm(
        'You have unsaved changes. Are you sure you want to exit the editor and discard your changes?', null, null, function(dialog, success) {
          if (success) {
            editormodel.stop();
          } else {
            // Exit cancelled
          }
        }
      );
    } else {
      editormodel.stop();
    }
  </method>

  <method name="changeScreen" args="screenname">
    if (!saveButton.disabled) {
      dialogmanager.showConfirm(
        'You have unsaved changes. Are you sure you want to change screens and discard your changes?', null, null, function(dialog, success) {
          if (success) {
            editormodel.changeScreen(screenname);
          } else {
            // Exit cancelled
          }
        }
      );
    } else {
      editormodel.changeScreen(screenname);
    }
  </method>
  
  <method name="editPreview">
    if (editor.editmode) {
      if (dr.keyboard.isAltKeyDown()) { // Use alt since shift forces a new window in chrome
        var win = window.open(editormodel.getPreviewerUrl(), '_blank');
        win.blur();
        window.focus();
      } else {
        editor.setAttribute('editmode', false);
        selectionmanager.clear(true);
        editPreviewButton.setAttribute('label', 'edit');
        editPreviewButton.setAttribute('iconname', 'edit');
        editPreviewButton.setAttribute('tooltip', 'Stop previewing and change back to edit mode.');
        preview.setAttribute('visible', true);
        preview.setAttribute('src', '/editor/preview.dre');
      }
    } else {
      editor.setAttribute('editmode', true);
      selectionmanager.restore();
      editPreviewButton.setAttribute('label', 'preview');
      editPreviewButton.setAttribute('iconname', 'preview');
      editPreviewButton.setAttribute('tooltip', 'Change the editing area to a preview of the screen.\nOpt-click to open a new live preview.');
      preview.setAttribute('visible', false);
      preview.setAttribute('src', '/iframe_stub.html');
    }
  </method>
  
  <method name="deleteSelected">
    if (this._isEditableSelection()) {
      var target = selectionmanager.selected,
        E = dr.editor, undoClass;
      if (target.isA(dr.AnimBase)) {
        undoClass = E.deleteanimatorundoable;
      } else {
        undoClass = E.deleteundoable;
      }
      actions.do(new undoClass({target:target}));
      selectionmanager.clear();
    }
  </method>
  
  <method name="_isEditableSelection">
    var selected = selectionmanager.selected;
    return editor.editmode && selected && !selected.isInlineEdit() && !selectionmanager.isrootselection;
  </method>
</node>
