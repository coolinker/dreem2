<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<include href='./keyboarddraggable.dre'/>
<include href='./editable.dre'/>
<include href='./controlhandle.dre'/>
<include href='./reticle.dre'/>
<include href='./toolbarbutton.dre'/>
<include href='./attributeeditor.dre'/>

<class name="verticaltext" extends="text" xanchor="0" yanchor="0" rotation="-90"/>

<mixin name="rulertext" fontsize="10" color="${config.secondary_panel_color}" width="0" height="0"/>
<class name="horizontal_rulertext" extends="text" with="rulertext" y="2"/>
<class name="vertical_rulertext" extends="verticaltext" with="rulertext" x="2"/>

<mixin name="selecttext" fontsize="10" color="${config.selection_color}"/>
<class name="horizontal_ruler_selecttext" extends="text" with="selecttext" y="21"/>
<class name="vertical_ruler_selecttext" extends="verticaltext" with="selecttext" x="21"/>

<mixin name="locationtext" fontsize="10" color="${config.location_color}"/>

<view name="editor" id="editor" width="100%" height="100%" defaultplacement="content.inner" clip="true" bgcolor="white">
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <attribute name="paused" type="boolean" value="true"/>

  <!-- Enforce a minimum width for the editor. -->
  <setter name="width" args="width">
    return this.super(Math.max(width, 1000));
  </setter>

  <!-- Enforce a minimum height for the editor. -->
  <setter name="height" args="height">
    return this.super(Math.max(height, 500));
  </setter>



  <!--// SERVICE NODES //////////////////////////////////////////////////////-->
  <node id="config">
    <attribute name="topbar_height" type="number" value="75"/>
    
    <attribute name="leftbar_minwidth" type="number" value="50"/>
    <attribute name="leftbar_maxwidth" type="number" value="300"/>
    
    <attribute name="rightbar_minwidth" type="number" value="250"/>
    <attribute name="rightbar_minx" type="number" value="700"/>
    <attribute name="bottombar_height" type="number" value="0"/>
    
    <attribute name="divider_width" type="number" value="5"/>
    <attribute name="ruler_thickness" type="number" value="35"/>
    <attribute name="content_inset" type="number" value="69"/>
    
    <attribute name="primary_panel_color" type="color" value="#dddddd"/>
    <attribute name="secondary_panel_color" type="color" value="#cccccc"/>
    <attribute name="selection_color" type="color" value="blue"/>
    <attribute name="location_color" type="color" value="black"/>
    
    <attribute name="boxshadow_normal" type="object" value="[0,0,4,0,'#000000']"/>
    <attribute name="boxshadow_large" type="object" value="[0,0,12,0,'#000000']"/>
    
    <attribute name="ruler_marks" type="object" value="[0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900]"/>
  </node>
  
  <node id="selectionmanager">
    <attribute name="selected" type="expression" value="null"/>
    
    <method name="clear" args="restoreable">
      if (restoreable) this._oldSelection = this.selected;
      this.select(null);
    </method>
    
    <method name="restore">
      if (this._oldSelection && this._oldSelection.parent) this.select(this._oldSelection);
    </method>
    
    <method name="select" args="view">
      this.setAttribute('selected', view);
    </method>
  </node>
  
  <editor-undostack id="undo"></editor-undostack>
  
  <node id="actions">
    <method name="_undoRedoCallback" args="undoable">
      if (!undoable.isA(dr.editor.compoundundoable)) {
        var target = undoable.target;
        if (target && target.parent) {
          selectionmanager.select(target);
        } else {
          selectionmanager.clear();
        }
      }
    </method>
    
    <method name="undo">
      undo.undo(this._undoRedoCallback);
    </method>
    
    <method name="redo">
      undo.redo(this._undoRedoCallback);
    </method>
    
    <method name="bringToFront">
      var selected = selectionmanager.selected;
      if (selected) {
        var newprevsibling = selected.getLastSiblingView();
        if (newprevsibling) this._updateOrder(selected, selected.getPrevSiblingView(), newprevsibling);
      }
    </method>
    
    <method name="bringForward">
      var selected = selectionmanager.selected;
      if (selected) {
        var newprevsibling = selected.getNextSiblingView();
        if (newprevsibling) this._updateOrder(selected, selected.getPrevSiblingView(), newprevsibling);
      }
    </method>
    
    <method name="sendToBack">
      var selected = selectionmanager.selected;
      if (selected) {
        var oldprevsibling = selected.getPrevSiblingView();
        if (oldprevsibling) this._updateOrder(selected, oldprevsibling, null);
      }
    </method>
    
    <method name="sendBackward">
      var selected = selectionmanager.selected;
      if (selected) {
        var oldprevsibling = selected.getPrevSiblingView();
        if (oldprevsibling) this._updateOrder(selected, oldprevsibling, oldprevsibling.getPrevSiblingView());
      }
    </method>
    
    <method name="_updateOrder" args="target, oldprevsib, newprevsib">
      undo.do(new dr.editor.orderundoable({target:target, oldprevsibling:oldprevsib, newprevsibling:newprevsib}));
    </method>
    
    <method name="save">
      editormodel.save();
      undo.reset();
    </method>
    
    <method name="pausePlay">
      editor.setAttribute('paused', !editor.paused);
      if (editor.paused) {
        selectionmanager.restore();
        pausePlayButton.setAttribute('text', 'Play');
      } else {
        selectionmanager.clear(true);
        pausePlayButton.setAttribute('text', 'Pause');
        // FIXME: Need to revert UI state to model state.
      }
      
    </method>
    
    <method name="createView">
      var attrs = {
        class:'view', with:'editable',
        id:'lzeditor_client_' + dr.generateGuid(),
        width:50, height:50, x:'center', y:'middle', 
        bgcolor:'#999999'
      };
      var parent = selectionmanager.selected;
      if (!parent) {
        attrs.placement = 'editor';
        parent = this.getRoot();
      }
      var instance = parent.createChild(attrs);
      
      // Mark an instance as "new" so we know it needs serialization.
      instance.__NEW = true;
      
      undo.do(new dr.editor.createundoable({target:instance}));
      selectionmanager.select(instance);
    </method>
    
    <method name="deleteSelected">
      var selected = selectionmanager.selected;
      if (selected) {
        undo.do(new dr.editor.deleteundoable({target:selected}));
        selectionmanager.clear();
      }
    </method>
  </node>
  
  <node id="editormodel">
    <handler event="oninit">
      var _this = this;
      // rewrite the file to be editable, which will reload this page automatically
      dr.global.requestor.fetch(window.location.toString() + '?edit=1').success(
        function(data, status) {
          var parser = new dr.htmlparser();
          var jsobj = parser.parse(data)
          _this.setAttribute('model', jsobj);
          //console.log('loaded model', jsobj)
        }
      );
    </handler>
    
    <method name="updateAttr" args="id, name, value">
      //console.log('updateAttr', id, name, value);
      var model = this.model;
      if (model) {
        var child = this._findChild(id, model);
        if (child) child.attr[name] = value;
      }
    </method>
    
    <method name="deleteNode" args="id, oldParentId">
      //console.log('delete', id, oldParentId);
      var model = this.model;
      if (model) {
        var child = this._findChild(id, model),
          parent = this._findChild(oldParentId, model);
        if (child && parent) {
         var idx = this._findChildIndex(parent, child);
         if (idx >= 0) parent.child.splice(idx, 1);
        }
      }
    </method>
    
    <method name="createNode" args="child, newParentId">
      //console.log('create', newParentId, child);
      var model = this.model;
      if (model) {
        var parent = this._findChild(newParentId, model);
        if (child && parent) {
         var prevSiblingView = child.getPrevSiblingView();
         var prevSibling = prevSiblingView ? this._findChild(prevSiblingView.id, model) : null;
         var idx = prevSibling ? this._findChildIndex(parent, prevSibling) : 0;
         
         if (!parent.child) parent.child = [];
         
         // Convert child (and tree) to object structure
         var childObjTree = child.objectify({});
         
         parent.child.splice(idx, 0, childObjTree);
         // console.log('create child', childObjTree);
        }
      }
    </method>
    
    <method name="moveInFrontOf" args="id, siblingId, parentId">
      //console.log('moveInFrontOf', id, siblingId, parentId);
      var model = this.model;
      if (model) {
        var child = this._findChild(id, model),
          sibling = this._findChild(siblingId, model),
          parent = this._findChild(parentId, model);
        if (child && sibling && parent) {
          // Remove child
          var idx = this._findChildIndex(parent, child);
          if (idx >= 0) parent.child.splice(idx, 1);
          
          // Insert child
          idx = this._findChildIndex(parent, sibling);
          if (idx >= 0) parent.child.splice(idx + 1, 0, child);
        }
      }
    </method>
    
    <method name="moveToBack" args="id, parentId">
      //console.log('moveToBack', id, parentId);
      var model = this.model;
      if (model) {
        var child = this._findChild(id, model),
          parent = this._findChild(parentId, model);
        if (child && parent) {
          var idx = this._findChildIndex(parent, child);
          if (idx > 0) {
            parent.child.splice(idx, 1);
            
            // HACK: if the parent is the root then the first child must continue
            // to be the editor include tag.
            var searchChild;
            for (var i = 0, len = parent.child.length; len > i; i++) {
              searchChild = parent.child[i];
              if (searchChild.tag !== 'include') {
                parent.child.splice(i, 0, child);
                break;
              }
            }
          }
        }
      }
    </method>
    
    <method name="save">
      dr.global.requestor.send(window.location.toString() + '?edit=1', JSON.stringify(this.model) );
    </method>
    
    <method name="_findChildIndex" args="parent, child">
      var children = parent.child;
      if (children) {
        var i = children.length, child,
          searchId = child.attr.id;
        while (i) {
          child = children[--i];
          if (child.attr.id === searchId) return i;
        }
      } else {
        return -1;
      }
    </method>
    
    <method name="_findChild" args="id, jsobj">
      if (!id) return null;
      
      var children = jsobj.child, child;
      for (var i = 0; children.length > i; i++) {
        child = children[i]
        if (child.attr && child.attr.id === id) {
          return child;
        } else if (child.child) {
          var newchild = this._findChild(id, child);
          if (newchild) return newchild;
        }
      }
    </method>
  </node>



  <!--// HANDLERS ///////////////////////////////////////////////////////////-->
  <handler event="onkeydown" reference="dr.keyboard" args="platformEvent">
    var keyboard = dr.keyboard,
      keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent),
      isAcceleratorKeyDown = keyboard.isAcceleratorKeyDown(),
      isShiftKeyDown = keyboard.isShiftKeyDown();
    
    // If current focus is an input text don't do anything. In particular,
    // we want to allow the delete key to be processed normally.
    var focusedView = dr.global.focus.focusedView;
    if (focusedView && focusedView.sprite.isA(dr.sprite.InputText)) {
      if (!isAcceleratorKeyDown) return;
      if (keyCode !== 90) return; // Z: Process undo/redo below since we want to supress the browser undo/redo mechanism
    }
    
    if (isAcceleratorKeyDown) {
      switch (keyCode) {
        case 66: // B: Reorder backward
          platformEvent.preventDefault(); // Prevent browser show bookmarks bar functionality
          (isShiftKeyDown ? sendBackwardButton : sendToBackButton).doActivated();
          break;
        case 70: // F: Reorder forward
          platformEvent.preventDefault(); // Prevent browser find functionality
          (isShiftKeyDown ? bringForwardButton : bringToFrontButton).doActivated();
          break;
        case 73: // I: Insert New View
          createButton.doActivated();
          break;
        case 83: // S: Save document
          platformEvent.preventDefault(); // Prevent browser save functionality
          saveButton.doActivated();
          break;
        case 90: // Z: Undo/Redo
          platformEvent.preventDefault(); // Prevent browser undo/redo functionality
          (isShiftKeyDown ? redoButton : undoButton).doActivated();
          break;
      }
    } else {
      switch (keyCode) {
        case 8: // Delete: Delete selected view
          deleteButton.doActivated();
          break;
        case 27: // Esc: Clear selection
          if (!reticle.isStarted) selectionmanager.clear();
          break;
      }
    }
  </handler>

  <handler event="onmousemove" reference="dr.mouse" args="event">
    var x = event.x, y = event.y,
      xLoc = this.xLocation, yLoc = this.yLocation,
      content_bg = this.content_bg;
    
    if (x > content_bg.x + content_bg.width || this.leftbar.width > x) {
      xLoc.setAttribute('visible', false);
    } else {
      xLoc.setAttribute('visible', true);
      xLoc.setAttribute('x', x - 1);
      xLoc.label.setAttribute('text', x - this.content.x + this.content.inner.scrollx);
    }
    
    if (y > content_bg.y + content_bg.height || this.topbar.height > y) {
      yLoc.setAttribute('visible', false);
    } else {
      yLoc.setAttribute('visible', true);
      yLoc.setAttribute('y', y - 1);
      yLoc.label.setAttribute('text', y - this.content.y + this.content.inner.scrolly);
    }
    
    return true;
  </handler>



  <!--// VIEWS //////////////////////////////////////////////////////////////-->
  <!--// Rulers, Location and Selection Overlays //-->
  <view name="ruler_horizontal" ignoreplacement="true" clip="true"
    x="${this.parent.ruler_lead.x + this.parent.ruler_lead.width}"
    y="${config.topbar_height}"
    width="${this.parent.divider_right.x - this.x}"
    height="${config.ruler_thickness}"
    scrollx="${this.parent.content.inner.scrollx + 100 - config.content_inset}"
  >
    <spacedlayout axis="x" spacing="100" inset="102"/>
    <replicator name="repl" classname="horizontal_rulertext" data="${config.ruler_marks}"/>
    
    <bitmap width="6000" ignorelayout="true"
      height="${config.ruler_thickness}"
      src="/classes/editor/img/ruler_horizontal.png" stretches="contain" repeat="repeat-x"
    >
      <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    </bitmap>
  </view>
  
  <view name="xLocation" ignoreplacement="true"
    y="${this.parent.ruler_horizontal.y}" width="1" height="${config.ruler_thickness}" bgcolor="${config.location_color}"
  >
    <text with="locationtext" name="label" x="3" y="2"/>
  </view>
  
  <view name="ruler_vertical" ignoreplacement="true" clip="true"
    x="${this.parent.divider_left.x}"
    y="${this.parent.ruler_lead.y + this.parent.ruler_lead.height}"
    width="${config.ruler_thickness}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
    scrolly="${this.parent.content.inner.scrolly + 100 - config.content_inset}"
  >
    <spacedlayout axis="y" spacing="100" inset="97"/>
    <replicator name="repl" classname="vertical_rulertext" data="${config.ruler_marks}"/>
    
    <bitmap height="6000" ignorelayout="true"
      width="${config.ruler_thickness}"
      src="/classes/editor/img/ruler_vertical.png" stretches="contain" repeat="repeat-y"
    >
      <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    </bitmap>
  </view>
    
  <view name="yLocation" ignoreplacement="true"
    x="${this.parent.ruler_vertical.x}" width="${config.ruler_thickness}" height="1" bgcolor="${config.location_color}"
  >
    <verticaltext with="locationtext" name="label" x="2" y="-2"/>
  </view>
  
  <view id="horizontal_selection" with="keyboarddraggable, button" ignoreplacement="true"
    visible="${reticle.visible}" opacity="0.75"
    x="${reticle.x}" y="${this.parent.ruler_horizontal.y}"
    width="${Math.max(1, reticle.width)}" height="${config.ruler_thickness}"
  >
    <view name="fill" width="100%" height="100%" opacity="0.15" bgcolor="${config.selection_color}"/>
    <view name="lower" width="1" height="100%" bgcolor="${config.selection_color}"/>
    <view name="upper" width="1" x="right" height="100%" bgcolor="${config.selection_color}"/>
    
    <view with="keyboarddraggable, button" width="10" x="-5" height="100%" cursor="col-resize">
      <method name="startDrag" args="event">
        reticle._start();
        this._origTargetX = reticle.target.x;
        this._origTargetW = reticle.target.width;
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          var diff = Math.min(this._origTargetW, x + 5);
          target.setAttribute('x', this._origTargetX + diff);
          target.setAttribute('width', this._origTargetW - diff);
        }
      </method>
      
      <method name="drawFocusedState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <view with="keyboarddraggable, button" width="10" x="${this.parent.width - 5}" height="100%" cursor="col-resize">
      <method name="startDrag" args="event">
        reticle._start();
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) target.setAttribute('width', Math.max(0, x + 5));
      </method>
      
      <method name="drawFocusedState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <horizontal_ruler_selecttext name="locstart" x="${-this.width - 3}"/>
    <horizontal_ruler_selecttext name="locsize" x="center"/>
    <horizontal_ruler_selecttext name="locend" x="${this.parent.width + 3}"/>
    
    <method name="startDrag" args="event">
      reticle._start();
      this.super();
    </method>
    <method name="stopDrag" args="event, isAbort">
      if (isAbort) {
        reticle._abort();
      } else {
        reticle._stop();
      }
      this.super();
    </method>
    <method name="updatePosition" args="x, y">
      var target = reticle.target;
      if (!this.disabled && target) target.setAttribute('x', x - target.getAbsolutePosition().x + target.x);
    </method>
    
    <method name="drawHoverState">
      this.fill.setAttribute('opacity', 0.25);
    </method>
    <method name="drawActiveState">
      this.fill.setAttribute('opacity', 0.4);
    </method>
    <method name="drawReadyState">
      this.fill.setAttribute('opacity', 0.15);
    </method>
  </view>
  
  <view id="vertical_selection" with="keyboarddraggable, button" ignoreplacement="true"
    visible="${reticle.visible}" opacity="0.75"
    x="${this.parent.ruler_vertical.x}" y="${reticle.y}"
    width="${config.ruler_thickness}" height="${Math.max(1, reticle.height)}"
  >
    <view name="fill" width="100%" height="100%" opacity="0.15" bgcolor="${config.selection_color}"/>
    <view name="lower" height="1" width="100%" bgcolor="${config.selection_color}"/>
    <view name="upper" height="1" y="bottom" width="100%" bgcolor="${config.selection_color}"/>
    
    <vertical_ruler_selecttext name="locstart" y="-3"/>
    <vertical_ruler_selecttext name="locsize" y="middle"/>
    <vertical_ruler_selecttext name="locend" y="${this.parent.height + this.height + 3}"/>
    
    <view with="keyboarddraggable, button" height="10" y="-5" width="100%" cursor="row-resize">
      <method name="startDrag" args="event">
        reticle._start();
        this._origTargetY = reticle.target.y;
        this._origTargetH = reticle.target.height;
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          var diff = Math.min(this._origTargetH, y + 5);
          target.setAttribute('y', this._origTargetY + diff);
          target.setAttribute('height', this._origTargetH - diff);
        }
      </method>
      
      <method name="drawFocusedState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <view with="keyboarddraggable, button" height="10" y="${this.parent.height - 5}" width="100%" cursor="row-resize">
      <method name="startDrag" args="event">
        reticle._start();
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) target.setAttribute('height', Math.max(0, y + 5));
      </method>
      
      <method name="drawFocusedState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <method name="startDrag" args="event">
      reticle._start();
      this.super();
    </method>
    <method name="stopDrag" args="event, isAbort">
      if (isAbort) {
        reticle._abort();
      } else {
        reticle._stop();
      }
      this.super();
    </method>
    <method name="updatePosition" args="x, y">
      var target = reticle.target;
      if (!this.disabled && target) target.setAttribute('y', y - target.getAbsolutePosition().y + target.y);
    </method>
    
    <method name="drawHoverState">
      this.fill.setAttribute('opacity', 0.25);
    </method>
    <method name="drawActiveState">
      this.fill.setAttribute('opacity', 0.4);
    </method>
    <method name="drawReadyState">
      this.fill.setAttribute('opacity', 0.15);
    </method>
  </view>

  <view name="ruler_lead" ignoreplacement="true" bgcolor="white"
    x="${this.parent.divider_left.x}" y="${config.topbar_height}"
    height="${config.ruler_thickness}" width="${config.ruler_thickness}"
    border="1" bordercolor="${config.secondary_panel_color}"
  >
    <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
  </view>


  <!--// Main Panels //-->
  <view name="topbar" ignoreplacement="true" bgcolor="${config.primary_panel_color}"
    width="100%" height="${config.topbar_height}"
  >
    <view name="left" padding="2" width="auto" height="${config.topbar_height}">
      <spacedlayout spacing="4" inset="2"></spacedlayout>
      <constantlayout attribute="y" value="'middle'"></constantlayout>
      
      <toolbarbutton id="undoButton" action="undo" disabled="${!undo.isundoable || !editor.paused}">Undo</toolbarbutton>
      <toolbarbutton id="redoButton" action="redo" disabled="${!undo.isredoable|| !editor.paused}">Redo</toolbarbutton>
      <view width="1" height="100%" bgcolor="${config.secondary_panel_color}"/>
      <toolbarbutton id="bringToFrontButton" action="bringToFront" disabled="${!selectionmanager.selected}">Bring To Front</toolbarbutton>
      <toolbarbutton id="bringForwardButton" action="bringForward" disabled="${!selectionmanager.selected}">Bring Forward</toolbarbutton>
      <toolbarbutton id="sendToBackButton" action="sendToBack" disabled="${!selectionmanager.selected}">Send to Back</toolbarbutton>
      <toolbarbutton id="sendBackwardButton" action="sendBackward" disabled="${!selectionmanager.selected}">Send Backward</toolbarbutton>
      <view width="1" height="100%" bgcolor="${config.secondary_panel_color}"/>
      <toolbarbutton id="deleteButton" action="deleteSelected" disabled="${!selectionmanager.selected}">Delete</toolbarbutton>
      <toolbarbutton id="createButton" action="createView" disabled="${!editor.paused}">Create</toolbarbutton>
    </view>
    
    <view name="center" padding="2" x="${this.parent.left.width}" width="${this.parent.right.x - this.x}" height="${config.topbar_height}"/>
    
    <view name="right" padding="2" x="right" width="auto" height="${config.topbar_height}">
      <spacedlayout spacing="4" inset="2"></spacedlayout>
      <constantlayout attribute="y" value="'middle'"></constantlayout>
      
      <toolbarbutton id="saveButton" action="save" disabled="${!undo.isundoable || !editor.paused}">Save</toolbarbutton>
      <view width="1" height="100%" bgcolor="${config.secondary_panel_color}"/>
      <toolbarbutton id="pausePlayButton" action="pausePlay" width="54" textalign="center">Play</toolbarbutton>
    </view>
  </view>

  <view name="leftbar" ignoreplacement="true" bgcolor="white"
    y="${config.topbar_height}"
    width="${this.parent.divider_left.x}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
  />
  
  <view name="content_bg" ignoreplacement="true" bgcolor="#f8f8f8"
    x="${this.parent.ruler_horizontal.x}"
    y="${this.parent.ruler_vertical.y}"
    width="${this.parent.divider_right.x - this.x}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
  >
    <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
  </view>

  <view name="content" ignoreplacement="true"
    x="${this.parent.ruler_horizontal.x + config.content_inset}"
    y="${this.parent.ruler_vertical.y + config.content_inset}"
    width="${this.parent.divider_right.x - this.x - config.content_inset}"
    height="${this.parent.innerheight - this.y - config.bottombar_height - config.content_inset}"
    boxshadow="[0,0,16,4,'#cccccc']"
  >
    <!-- Use an additional inner view so that scrollbars show up inside the
         "page" rather than over the boxshadow. -->
    <view name="inner" width="100%" height="100%" scrollable="true" bgcolor="${editor.parent.bgcolor}"
      maskfocus="${editor.paused}" focuscage="true"
    >
      <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    </view>
  </view>

  <view name="rightbar" ignoreplacement="true" bgcolor="#fcfcfc"
    x="right" y="${config.topbar_height}"
    width="${this.parent.innerwidth - this.parent.divider_right.x}"
    height="${this.parent.leftbar.height}"
  >
    <spacedlayout axis="y" spacing="5" inset="5"/>
    <handler event="onselected" args="selected" reference="selectionmanager" type="coffee">
      attrs = []
      
      compare = (a, b) ->
        if (b.name > a.name)
          return -1
        else if (a.name > b.name)
          return 1
        else
          0
      
      if selected
        ancestors = this.klass.ancestors()
        # pull attributes from ancestor, since we don't want the editor mixin itself
        myattributes = ancestors[ancestors.length - 1].attributes
        
        # build list of attributes for the replicator
        for key, value of myattributes
          value.name = key
          attrs.push(value)
          # console.log('attribute', key, value)
        
        attrs.sort(compare)
      
      this.repl.setAttribute('data', attrs);
    </handler>
    <replicator name="repl" classname="attributeeditor"/>
  </view>

  <view name="bottombar" ignoreplacement="true" bgcolor="${config.primary_panel_color}"
    y="bottom" width="100%" height="${config.bottombar_height}"
  />


  <!--// Misc Lines //-->
  <!-- Line directly below the header. -->
  <view ignoreplacement="true"
    width="100%" y="${config.topbar_height}" height="1"
    bgcolor="${config.secondary_panel_color}"
  />

  <!-- Line at the left edge of the rightbar. -->
  <view ignoreplacement="true"
    x="${this.parent.rightbar.x}" y="${this.parent.rightbar.y}"
    width="1" height="${this.parent.rightbar.height}"
    bgcolor="${config.secondary_panel_color}"
  />


  <!--// Dividers //-->
  <view name="divider_left" with="keyboarddraggable" ignoreplacement="true" cursor="col-resize"
    x="${config.leftbar_minwidth}" y="${config.topbar_height}"
    width="${config.divider_width}" height="${this.parent.leftbar.height}"
  >
    <method name="updatePosition" args="x, y">
      if (!this.disabled) this.setAttribute('x', Math.max(config.leftbar_minwidth, Math.min(config.leftbar_maxwidth, x)));
    </method>
  </view>

  <view name="divider_right" with="keyboarddraggable" ignoreplacement="true" cursor="col-resize"
    x="${this.parent.innerwidth - this.width - config.rightbar_minwidth}" y="${config.topbar_height}"
    width="${config.divider_width}" height="${this.parent.leftbar.height}"
  >
    <handler event="onwidth" reference="parent">
      // Respond to browser window resizing
      this.updatePosition(this.x, this.y);
    </handler>
    <method name="updatePosition" args="x, y">
      if (!this.disabled) this.setAttribute('x', Math.max(config.rightbar_minx, Math.min(this.parent.innerwidth - this.width - config.rightbar_minwidth, x)));
    </method>
  </view>


  <!--// Selection Reticle //-->
  <reticle id="reticle" ignoreplacement="true"/>
</view>