<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<class name="reticle" with="button, keyboarddraggable" visible="false"
  distancebeforedrag="5" clickable="false"
  draggroups="{editable:true}"
  isdraggable="${!selectionmanager.isrootselection}"
>
  <attribute name="draglockthresh" type="number" value="20"/>

  <!-- clickable:false is because the mousedown/up events are in fact
       simulated from the editable. This prevents the reticle from covering
       but still allows it to behave as draggable. -->
  <handler event="onselected" args="selected" reference="selectionmanager">
    var oldTarget = this.target;
    this.target = selected;
    if (selected) {
      this.setAttribute('visible', true);
      this.focus();
      this._syncPosition();
      if (!oldTarget) this.listenTo(dr.idle, 'onidle', this._syncPosition);
    } else {
      this.stopListening(dr.idle, 'onidle', this._syncPosition);
      this.setAttribute('visible', false);
    }
  </handler>

  <method name="_syncPosition">
    var content = editor.content,
      target = this.target;
    
    if (target.destroyed) {
      console.log('Selection target was destroyed so aborting _syncPosition.');
      selectionmanager.clear();
      return;
    }
    
    var pos = target.getAbsolutePosition(editor),
      w = target.width,
      h = target.height;
    this._isSync = true;
    this.setAttributes({width:w, height:h, x:pos.x, y:pos.y});
    this._isSync = false;
    
    // Update selection bars
    var startX = horizontal_selection.x - ruler_horizontal.x + ruler_horizontal.scrollx - 100,
      startXRelative = target.x,
      endX = startX + w,
      xDifferent = startX !== endX,
      hSel = horizontal_selection,
      hLocsize = hSel.locsize,
      hLocend = hSel.locend,
      hLocrelend = hSel.locrelend;
    hSel.locstart.setAttribute('text', startX);
    hSel.locrelstart.setAttribute('text', startXRelative);
    
    hLocsize.setAttribute('visible', xDifferent);
    hLocend.setAttribute('visible', xDifferent);
    hLocrelend.setAttribute('visible', xDifferent);
    if (xDifferent) {
      hLocsize.setAttribute('text', w);
      hLocend.setAttribute('text', endX);
      hLocrelend.setAttribute('text', startXRelative + w);
    }
    
    var startY = vertical_selection.y - ruler_vertical.y + ruler_vertical.scrolly - 100,
      startYRelative = target.y,
      endY = startY + h,
      yDifferent = startY !== endY,
      vSel = vertical_selection,
      vLocsize = vSel.locsize,
      vLocend = vSel.locend,
      vLocrelend = vSel.locrelend;
    vSel.locstart.setAttribute('text', startY);
    vSel.locrelstart.setAttribute('text', startYRelative);
    
    vLocsize.setAttribute('visible', yDifferent);
    vLocend.setAttribute('visible', yDifferent);
    vLocrelend.setAttribute('visible', yDifferent);
    if (yDifferent) {
      vLocsize.setAttribute('text', h);
      vLocend.setAttribute('text', endY);
      vLocrelend.setAttribute('text', startYRelative + w);
    }
  </method>

  <method name="drawFocusedState">
    this.fill.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
  </method>
  <method name="drawHoverState">
    this.fill.setAttribute('boxshadow', config.boxshadow_normal);
  </method>
  <method name="drawActiveState">
    this.fill.setAttribute('boxshadow', null);
  </method>
  <method name="drawReadyState">
    this.fill.setAttribute('boxshadow', config.boxshadow_normal);
  </method>

  <method name="_updateTarget" args="attr, value">
    if (this.target && !this._isSync) this.target.setAttribute(attr, value, true); // 3rd arg enables model update
  </method>
  
  <handler event="onx" args="x">
    this._updateTarget('x', x + this.dx);
  </handler>
  
  <handler event="ony" args="y">
    this._updateTarget('y', y + this.dy);
  </handler>
  
  <handler event="onwidth" args="width">
    this._updateTarget('width', width);
    this.resizer.setAttribute('x', this.width - 5)
  </handler>
  
  <handler event="onheight" args="height">
    this._updateTarget('height', height);
    this.resizer.setAttribute('y', this.height - 5)
  </handler>
  
  <method name="updatePosition" args="x, y">
    if (!this.disabled && this.isdraggable) {
      if (!this._isArrowAdj) {
        if (dr.keyboard.isShiftKeyDown()) {
          var origLoc = this.getOriginalLocation();
          if (this.draglockthresh > Math.abs(x - origLoc.x)) x = origLoc.x;
          if (this.draglockthresh > Math.abs(y - origLoc.y)) y = origLoc.y;
        }
      }
      
      var gx = Number(gridsizex.value),
        gy = Number(gridsizey.value);
      if (gx > 0) x = (gx * Math.round((x + this.dx) / gx)) - this.dx;
      if (gy > 0) y = (gy * Math.round((y + this.dy) / gy)) - this.dy;
      
      var target = this.target,
        noXAdj = target.__layoutDomainInUseForView('x'),
        noYAdj = target.__layoutDomainInUseForView('y');
      
      if (!this._isArrowAdj && snaptoguides.selected) {
        var pos = this._updateGuides(x, y, noXAdj, noYAdj);
        x = pos.x;
        y = pos.y;
        guides.setAttribute('visible', true);
      }
      
      // If a layout in parent is managing x/y position then don't allow drag.
      if (noXAdj) x = this.getOriginalLocation().x;
      if (noYAdj) y = this.getOriginalLocation().y;
      
      this.super(x, y);
    }
  </method>

  <method name="_updateGuides" args="x, y, noXAdj, noYAdj">
    var svs = guides.getSubviews(), i = svs.length;
    while (i) svs[--i].destroy();
    
    var target = this.target,
      newpos = {x:x, y:y},
      sibling, abs, sx, sy,
      foundX = false,
      foundY = false;
    
    svs = target.parent.getSubviews();
    i = svs.length;
    while (i) {
      sibling = svs[--i];
      
      if (sibling !== target) {
        abs = sibling.getAbsolutePosition(editor);
        
        if (!noXAdj && !foundX) {
          sx = abs.x;
          foundX = this._createGuide(newpos, sx, x, false, sibling, abs);
          if (!foundX) foundX = this._createGuide(newpos, (sibling.width / 2) + sx, x, false, sibling, abs);
          if (!foundX) foundX = this._createGuide(newpos, sibling.width + sx, x, false, sibling, abs);
        }
        
        if (!noYAdj && !foundY) {
          sy = abs.y;
          foundY = this._createGuide(newpos, sy, y, true, sibling, abs);
          if (!foundY) foundY = this._createGuide(newpos, (sibling.height / 2) + sy, y, true, sibling, abs);
          if (!foundY) foundY = this._createGuide(newpos, sibling.height + sy, y, true, sibling, abs);
        }
      }
    }
    
    return newpos;
  </method>
  
  <method name="_createGuide" args="newpos, gv, v, isVertical, sibling, abs">
    if (5 > Math.abs(gv - v)) {
      guides.createChild({
        class:'view', 
        x:isVertical ? 0 : gv, 
        y:isVertical ? gv : 0, 
        width:isVertical ? 5000 : 1, 
        height:isVertical ? 1 : 5000, 
        bgcolor:'cyan'
      });
      
      guides.createChild({
        class:'view', 
        x:abs.x, 
        y:abs.y, 
        width:sibling.width, 
        height:sibling.height,
        border:1,
        bordercolor:'cyan'
      });
      
      newpos[isVertical ? 'y' : 'x'] = gv;
      return true;
    }
    return false;
  </method>
  
  <method name="willPermitDrop" args="droptarget">
    return true;
  </method>

  <method name="startDrag" args="event">
    this._start();
    this.super();
    
    // Make half opacity during drag
    var target = this.target;
    this._origOpacity = target.getActualAttribute('opacity');
    target.setActualAttribute('opacity', this._origOpacity / 2);
  </method>
  
  <method name="notifyDrop" args="droptarget, isAbort">
    this.super();
    
    if (this.droptarget) this._stop(droptarget);
  </method>

  <method name="notifyDropFailed">
    if (this._isArrowAdj) {
      // Arrow adjustments should always succeed.
      this._stop(this.target.parent);
    } else {
      this._abort();
    }
  </method>

  <method name="notifyDropAborted">
    this._abort();
  </method>

  <method name="stopDrag" args="event, isAbort">
    this.super();
    
    // Restore opacity after drag
    this.target.setActualAttribute('opacity', this._origOpacity);
    guides.setAttribute('visible', false);
  </method>

  <method name="_start">
    this.isStarted = true;
    
    var target = this.target,
      pos = target.getAbsolutePosition(editor);
    this.dx = target.x - pos.x;
    this.dy = target.y - pos.y;
    
    // started dragging, create compound for target with current values
    var EAU = dr.editor.editorattrundoable;
    this._undoablew = new EAU({target:target, attribute:'width', oldvalue:target.getAttribute('width')});
    this._undoableh = new EAU({target:target, attribute:'height', oldvalue:target.getAttribute('height')});
    this._undoablex = new EAU({target:target, attribute:'x', oldvalue:target.getAttribute('x')});
    this._undoabley = new EAU({target:target, attribute:'y', oldvalue:target.getAttribute('y')});
    this._undoableparent = new EAU({target:target, attribute:'parent'});
    this._undoableparent.setAttribute('oldvalue', target.parent);
    
    this.listenTo(dr.keyboard, 'onkeydown', this._handleKeyChange);
    this.listenTo(dr.keyboard, 'onkeyup', this._handleKeyChange);
  </method>

  <method name="_stop" args="droptarget">
    // Target can be null if you undo/redo a create/delete while dragging
    // the node that is created/deleted so make sure it exists first.
    var target = this.target;
    if (target) {
      // stopped dragging, store new values
      var compound = new dr.editor.compoundundoable(),
        undoW = this._undoablew,
        undoH = this._undoableh,
        undoX = this._undoablex,
        undoY = this._undoabley,
        undoP = this._undoableparent;
      
      undoW.newvalue = '' + target.getAttribute('width'); // Coerce to string for consistent comparison
      undoH.newvalue = '' + target.getAttribute('height'); // Coerce to string for consistent comparison
      undoX.newvalue = '' + target.getAttribute('x'); // Coerce to string for consistent comparison
      undoY.newvalue = '' + target.getAttribute('y'); // Coerce to string for consistent comparison
      
      var isNewParent = false;
      if (!this._isArrowAdj) {
        isNewParent = droptarget && (droptarget !== undoP.oldvalue);
        if (isNewParent) {
          undoP.newvalue = droptarget;
          var targetPos = target.getAbsolutePosition(editor),
            newParentPos = droptarget.getAbsolutePosition(editor),
            sprite = droptarget.sprite;
          undoX.newvalue = '' + (targetPos.x - newParentPos.x + sprite.getScrollX());
          undoY.newvalue = '' + (targetPos.y - newParentPos.y + sprite.getScrollY());
        }
      }
      
      if (isNewParent || undoW.newvalue !== undoW.oldvalue) compound.add(undoW);
      if (isNewParent || undoH.newvalue !== undoH.oldvalue) compound.add(undoH);
      if (isNewParent || undoX.newvalue !== undoX.oldvalue) compound.add(undoX);
      if (isNewParent || undoY.newvalue !== undoY.oldvalue) compound.add(undoY);
      if (isNewParent) compound.add(undoP); // Must be last so that dragging into a parent that already has a layout works as expected.
      
      // Only do it if something changed.
      if (compound.getUndoableCount() > 0) actions.do(compound);
    }
    
    this.stopListening(dr.keyboard, 'onkeydown', this._handleKeyChange);
    this.stopListening(dr.keyboard, 'onkeyup', this._handleKeyChange);
    this.isStarted = false;
  </method>

  <method name="_abort">
    var target = this.target;
    if (target) {
      target.setAttribute('x', this._undoablex.oldvalue, true); // 3rd arg enables model update
      target.setAttribute('y', this._undoabley.oldvalue, true); // 3rd arg enables model update
      target.setAttribute('width', this._undoablew.oldvalue, true); // 3rd arg enables model update
      target.setAttribute('height', this._undoableh.oldvalue, true); // 3rd arg enables model update
    }
    
    this.stopListening(dr.keyboard, 'onkeydown', this._handleKeyChange);
    this.stopListening(dr.keyboard, 'onkeyup', this._handleKeyChange);
    this.isStarted = false;
  </method>

  <method name="_handleKeyChange" args="platformEvent">
    var sprite = dr.sprite,
      keyCode = sprite.KeyObservable.getKeyCodeFromEvent(platformEvent);
    if (keyCode === sprite.GlobalKeys.KEYCODE_SHIFT) {
      if (this.focused) {
        this.__requestDragPosition();
      } else if (this.resizer.focused) {
        this.resizer.__requestDragPosition();
      }
    } else if (keyCode === sprite.GlobalKeys.KEYCODE_ALT) {
      if (this.resizer.focused) {
        this.resizer.__requestDragPosition();
      }
    }
  </method>


  <!--// Views //////////////////////////////////////////////////////////////-->
  <view name="fill" width="100%" height="100%" clip="true">
    <view name="inner" width="100%" height="100%" border="1" bordercolor="${config.selection_color}"></view>
  </view>

  <controlhandle name="resizer" visible="${!selectionmanager.isrootselection}">
    <handler event="onx" args="x">
      this.parent.setAttribute('width', x + 5);
    </handler>
    
    <handler event="ony" args="y">
      this.parent.setAttribute('height', y + 5);
    </handler>
    
    <method name="startDrag" args="event">
      this._origAspectRatio = this.parent.height / this.parent.width;
      this.parent._start();
      this.super();
    </method>
    
    <method name="updatePosition" args="x, y">
      if (!this.disabled) {
        if (!this._isArrowAdj) {
          if (dr.keyboard.isShiftKeyDown()) {
            // If shift is down, preserver aspect ratio
            var ar = this._origAspectRatio;
            if (ar === 0) {
              y = -5;
            } else if (ar === Infinity) {
              x = -5;
            } else {
              var closestPoint = dr.getClosestPointOnALineToAPoint(0, 0, 1, ar, x + 5, y + 5);
              x = Math.round(closestPoint.x - 5);
              y = Math.round(closestPoint.y - 5);
            }
          } else if (dr.keyboard.isAltKeyDown()) {
            // If alt key down make square
            var closestPoint = dr.getClosestPointOnALineToAPoint(0, 0, 1, 1, x + 5, y + 5);
            x = Math.round(closestPoint.x - 5);
            y = Math.round(closestPoint.y - 5);
          }
        }
        
        var gx = Number(gridsizex.value),
          gy = Number(gridsizey.value);
        if (gx > 0) x = (gx * Math.round((x + 5) / gx)) - 5;
        if (gy > 0) y = (gy * Math.round((y + 5) / gy)) - 5;
        
        // If a layout in parent is managing x/y position then don't allow drag.
        var target = this.parent.target;
        if (target.__layoutDomainInUseForView('width')) x = this.getOriginalLocation().x;
        if (target.__layoutDomainInUseForView('height')) y = this.getOriginalLocation().y;
        
        this.setAttribute('x', Math.max(-5, x));
        this.setAttribute('y', Math.max(-5, y));
      }
    </method>
    
    <method name="stopDrag" args="event, isAbort">
      if (isAbort) {
        this.parent._abort();
      } else {
        this.parent._stop();
      }
      this.super();
    </method>
  </controlhandle>
</class>