<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Undo/Redo Compound'>
    <include href="./includes/boilerplate.dre"></include>
    
    <editor-undostack id="undo"></editor-undostack>
    
    <class name="attrundoable" extends="editor-undoable" description="Change Attribute">
      <attribute name="target" type="expression" value=""></attribute>
      <attribute name="attribute" type="string" value="x"></attribute>
      <attribute name="oldvalue" type="expression" value="undefined"></attribute>
      <attribute name="newvalue" type="expression" value="undefined"></attribute>
      
      <method name="getUndoDescription">
        return 'Undo ' + this.super() + ': ' + this.attribute;
      </method>
      
      <method name="getRedoDescription">
        return 'Redo ' + this.super() + ': ' + this.attribute;
      </method>
      
      <method name="undo" args="callback">
        if (this.done) this.target.setAttribute(this.attribute, this.oldvalue);
        this.super();
      </method>
      
      <method name="redo" args="callback">
        if (!this.done) {
          // Record oldvalue one time only just before applying the new value.
          if (!this.__storedOldValue && this.oldvalue === undefined) {
            this.setAttribute('oldvalue', this.target[this.attribute]);
            this.__storedOldValue = true;
          }
          
          this.target.setAttribute(this.attribute, this.newvalue);
        }
        this.super();
      </method>
    </class>
    
    <view width="100%" height="100%">
      <view name="foo" width="50" height="50" bgcolor="red"></view>
      
      <handler event="oninit">
        var foo = this.foo;
        var undo = dr.sprite.retrieveGlobal('undo');
        
        // Add an undoable
        assert.equal(foo.width, 50, 'Verify original width of foo view.');
        var compound = new dr.editor.compoundundoable();
        var undoable1 = new dr.attrundoable({target:foo, attribute:'width', newvalue:100});
        var undoable2 = new dr.attrundoable({target:foo, attribute:'height', newvalue:75});
        compound.add(undoable1).add(undoable2);
        
        assert.isFalse(compound.done);
        assert.isFalse(undoable1.done);
        assert.isFalse(undoable2.done);
        assert.equal(foo.width, 50, 'Verify width of foo view has not changed yet.');
        assert.equal(foo.height, 50, 'Verify height of foo view has not changed yet.');
        
        assert.isTrue(undo.do(compound), 'The do method returns a boolean true if it succeeds.');
        assert.equal(foo.width, 100, 'Now that the undoable has been done foo should be updated.');
        assert.equal(foo.height, 75, 'Now that the undoable has been done foo should be updated.');
        assert.isTrue(compound.done);
        assert.isTrue(undoable1.done);
        assert.isTrue(undoable2.done);
        
        // Undo it
        assert.isTrue(undo.undo());
        assert.equal(foo.width, 50, 'Verify width of foo view has not changed yet.');
        assert.equal(foo.height, 50, 'Verify height of foo view has not changed yet.');
        assert.isFalse(compound.done);
        assert.isFalse(undoable1.done);
        assert.isFalse(undoable2.done);
        
        // Redo it
        assert.isTrue(undo.redo());
        assert.equal(foo.width, 100, 'Now that the undoable has been done foo should be updated.');
        assert.equal(foo.height, 75, 'Now that the undoable has been done foo should be updated.');
        assert.isTrue(compound.done);
        assert.isTrue(undoable1.done);
        assert.isTrue(undoable2.done);
        
        undo.reset();
        
        assert.isTrue(compound.destroyed);
        assert.isTrue(undoable1.destroyed);
        assert.isTrue(undoable2.destroyed);
        
        
        // Verify execution order of sub-undoables
        var compound2 = new dr.editor.compoundundoable();
        var compound3 = new dr.editor.compoundundoable();
        
        var undoable3 = new dr.attrundoable({target:foo, attribute:'width', newvalue:100});
        var undoable4 = new dr.attrundoable({target:foo, attribute:'width', newvalue:200});
        var undoable5 = new dr.attrundoable({target:foo, attribute:'width', newvalue:100});
        var undoable6 = new dr.attrundoable({target:foo, attribute:'width', newvalue:200});
        
        compound2.add(undoable3).add(undoable4);
        compound3.add(undoable6).add(undoable5); // Opposite order
        
        foo.setAttribute('width', 50); // Reset width
        assert.equal(foo.width, 50);
        
        undo.do(compound2);
        assert.equal(foo.width, 200);
        
        undo.undo();
        assert.equal(foo.width, 50);
        
        undo.redo();
        assert.equal(foo.width, 200);
        
        undo.reset();
        foo.setAttribute('width', 50); // Reset width
        assert.equal(foo.width, 50);
        
        undo.do(compound3);
        assert.equal(foo.width, 100);
        
        undo.undo();
        assert.equal(foo.width, 50);
        
        undo.redo();
        assert.equal(foo.width, 100);
      </handler>
    </view>
  </screen>
</screens>
</composition>