<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
  * @class dr.editor.compoundundoable {UI Components}
  * @extends dr.editor.undoable
  * An undoable that combines multiple undoables into a single group that can
  * be done/undone as one. Use the add method to add undoables to this
  * compoundundoable.
  *
  * The contained undoables will be done in the order they were added and
  * undone in the reverse order they were added.
  */-->
<class name="editor-compoundundoable" extends="editor-undoable">
  <!--// LIFE CYCLE /////////////////////////////////////////////////////////-->
  <method name="init" args="attrs">
    this.__undoables = [];
    
    this.super();
  </method>

  <!--/**
    * @method destroy
    * @overrides
    * Destroys this undoable and all the undoables contained within it.
    */-->
  <method name="destroy">
    if (!this.destroyed) {
      var undoables = this.__undoables;
      this.super();
      if (undoables) while (undoables.length) undoables.pop().destroy();
    }
  </method>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <method name="getUndoableCount">
    return this.__undoables.length;
  </method>

  <!--/**
    * @method add
    * Adds an undoable to this dr.editor.compoundundoable.
    * @param {dr.editor.undoable} undoable The undoable to add.
    * @returns {this}
    */-->
  <method name="add" args="undoable">
    if (!undoable) {
      dr.sprite.console.warn("No undoable provided to compoundundoable.add.");
    } else if (undoable.done) {
      dr.sprite.console.warn("Undoable already in the done state in compoundundoable.add.");
    } else if (undoable === this) {
      dr.sprite.console.warn("Adding compoundundoable to itself is not allowed.");
    } else {
      this.__undoables.push(undoable);
    }
    return this;
  </method>

  <!--/**
    * @method undo
    * @overrides
    * Undoes all the contained undoables.
    */-->
  <method name="undo" args="callback">
    if (this.done) {
      var undoables = this.__undoables,
        i = undoables.length;
      try {
        this.done = false; // Provide cyclic protection
        while (i) undoables[--i].undo(callback);
      } finally {
        this.done = true;
      }
      return this.super();
    } else {
      dr.global.error.notifyWarn('invalidCompoundUndo', "Invalid undo in compoundundoable.");
      return this;
    }
  </method>

  <!--/**
    * @method undo
    * @overrides
    * Does all the contained undoables.
    */-->
  <method name="redo" args="callback">
    if (!this.done) {
      var undoables = this.__undoables,
        len = undoables.length, i = 0;
      
      try {
        this.done = true; // Provide cyclic protection
        for (; len > i;) undoables[i++].redo(callback);
      } finally {
        this.done = false;
      }
      return this.super();
    } else {
      dr.global.error.notifyWarn('invalidCompoundRedo', "Invalid redo in compoundundoable.");
      return this;
    }
  </method>

  <!--/**
    * @method serialize
    * Builds a serialized object from each of the child undoables.
    * @overrides
    */-->
  <method name="serialize" args="obj">
    if (!obj) obj = {};
    var objUndoables = obj.undoables = [],
      undoables = this.__undoables, 
      len = undoables.length, i = 0;
    for (; len > i;) objUndoables.push(undoables[i++].serialize());
    return this.super(obj);
  </method>

  <!--/**
    * @method deserialize
    * Deserializes each child undoable to rebuild this compound undoable.
    * @overrides
    */-->
  <method name="deserialize" args="data">
    var undoables = data.undoables;
    if (undoables) {
      var i = undoables.length;
      while (i) undoables[--i] = dr.deserialize(undoables[i]);
      data.__undoables = undoables;
      delete data.undoables;
    }
    return this.super(data);
  </method>
</class>
