<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Animation'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view width="100%" height="100%" scrollable="true">
      <testingtimer>1000</testingtimer>
      
      <spacedlayout axis="x" spacing="1"></spacedlayout>
      
      <!-- Test using animate method -->
      <view bgcolor="darkgrey" width="auto" height="auto">
        <view name="foo" bgcolor='red' x="0" y="0" width="100" height="80">
          <handler event='oninit'>
            this.animateMultiple({x:100, y:10}, 200)
          </handler>
        </view>
  
        <view name="bar" bgcolor='red' x="0" y="100" width="100" height="80">
          <handler event='oninit'>
            this.animateMultiple({x:100, y:100, width:50, height:50, bgcolor:'blue'}, 150)
          </handler>
        </view>
  
        <!-- Test destroying while an animation is running -->
        <view name="baz" bgcolor='red' x="0" y="200" width="100" height="80">
          <handler event='oninit' type="coffee">
            this.animateMultiple({x:100, width:50, height:100, bgcolor:'green'}, 200)
            setTimeout(() =>
              this.destroy()
            ,100)
          </handler>
        </view>
  
        <!-- Test animating attributes on a node -->
        <node name="buz">
          <attribute name="x" value="0" type="number"></attribute>
          <handler event='oninit'>
            this.animateMultiple({x:100}, 80)
          </handler>
        </node>
  
        <!-- Verify animations ran -->
        <handler event="oninit" type="coffee">
          setTimeout(() =>
            assert.equal(@foo.x, 100)
            assert.equal(@foo.y, 10)
            
            assert.equal(@bar.x, 100)
            assert.equal(@bar.y, 100)
            assert.equal(@bar.width, 50)
            assert.equal(@bar.height, 50)
            assert.equal(@bar.bgcolor, '#0000ff')
            
            assert.equal(@baz, undefined)
            
            assert.equal(@buz.x, 100)
          500)
        </handler>
      </view>
      
      <!-- Test using animator tag. -->
      <view id="container" bgcolor="lightgrey" width="auto" height="auto">
        <bitmap name="foo" x="100" y="0" width="200" height="200" src="/img/shoarma.jpg">
          <animator delay='200' attribute="x" to="300" duration="300" motion="outBounce" repeat="1">
            <handler event="onend">
              assert.equal(this.parent.x, 300);
              container.fooRanX = true;
            </handler>
          </animator>
          
          <!-- Running set to false initially still runs normally when started. -->
          <animator name="animY" attribute="y" to="300" duration="400" running="false">
            <handler event='onstart' args="event">
              assert.equal(this.parent.y, 0);
              container.fooRanY_start = true;
            </handler>
            <handler event='onloop' args="count">
              if (container.fooRanY_loop == null) container.fooRanY_loop = 0;
              container.fooRanY_loop++;
            </handler>
            <handler event='onend' args="event">
              assert.equal(this.parent.y, 300);
              container.fooRanY_end = true;
            </handler>
          </animator>
          
          <!-- Pause set to true initially still runs normally when started. -->
          <animator name="animW" attribute="width" to="300" duration="400" paused="true">
            <handler event='onstart' args="event">
              assert.equal(this.parent.width, 200);
              container.fooRanW_start = true;
            </handler>
            <handler event='onloop' args="count">
              if (container.fooRanW_loop == null) container.fooRanW_loop = 0;
              container.fooRanW_loop++;
            </handler>
            <handler event='onend' args="event">
              assert.equal(this.parent.width, 300);
              container.fooRanW_end = true;
            </handler>
          </animator>
          
          <handler event="oninit" type="coffee">
            assert.equal(@x, 100)
            assert.equal(@y, 0)
            assert.equal(@width, 200)
            
            # Run the animation in a little bit
            assert.equal(@animY.running, false)
            assert.equal(@animY.paused, false)
            assert.equal(@animW.running, true)
            assert.equal(@animW.paused, true)
            setTimeout(() =>
              assert.equal(@animY.running, false)
              assert.equal(@animY.paused, false)
              @animY.play()
              assert.equal(@animY.running, true)
              assert.equal(@animY.paused, false)
              
              assert.equal(@animW.running, true)
              assert.equal(@animW.paused, true)
              @animW.resume()
              assert.equal(@animW.running, true)
              assert.equal(@animW.paused, false)
            100)
          </handler>
        </bitmap>
        
        <animator target="koala" attribute="x" to="300" duration="300" control='0.01,1.0' motion="bret" repeat="2" bounce="true">
          <handler event="onend">
            assert.equal(koala.x, 100);
            container.koalaRan = true;
          </handler> 
        </animator>
        <bitmap id="koala" x="100" y="200" width="200" height="200" src="/img/shoarma.jpg"></bitmap>
        
        <bitmap name="bar" x="100" y="400" width="200" height="200" src="/img/shoarma.jpg">
          <animator attribute="x" to="300" duration="300" motion="linear" repeat="2" bounce="true">
            <handler event="onend">
              assert.equal(this.parent.x, 100);
              container.barRan = true;
            </handler>
          </animator>
        </bitmap>
        
        <!-- Relative animation -->
        <view bgcolor='red' x="10" y="10" width="200" height="auto">
          <text text='Relative'></text>
          <animator relative='true' attribute="x" duration="500" to="10" motion="inOutExpo">
            <handler event='onend'>
              assert.closeTo(this.parent.x, 20, 0.0001);
              container.bazRanX = true;
            </handler>
          </animator>
          
          <!-- Relative animation with repeat. Also verify that we get
               start, loop and end events. -->
          <animator relative='true' attribute="y" to="10" duration="100" repeat="3">
            <handler event='onstart' args="event">
              assert.equal(this.parent.y, 10);
              container.bazRanY_start = true;
            </handler>
            <handler event='onloop' args="count">
              if (container.bazRanY_loop == null) container.bazRanY_loop = 0;
              
              switch (container.bazRanY_loop) {
                case 0:
                  assert.closeTo(this.parent.y, 10, 0.0001);
                  assert.equal(0, count);
                  container.bazRanY_loop++;
                  break;
                case 1:
                  assert.closeTo(this.parent.y, 20, 0.0001);
                  assert.equal(1, count);
                  container.bazRanY_loop++;
                  break;
                case 2:
                  assert.closeTo(this.parent.y, 30, 0.0001);
                  assert.equal(2, count);
                  container.bazRanY_loop++;
                  break;
                default:
                  assert.fail(null, null, 'Unexpected onloop event');
              }
            </handler>
            <handler event='onend'>
              assert.closeTo(this.parent.y, 40, 0.0001);
              container.bazRanY_end = true;
            </handler>
          </animator>
          
          <!-- Relative animation with repeat and negative value. -->
          <animator relative='true' attribute="width" to="-25" duration="100" repeat="3">
            <handler event='onstart' args="event">
              assert.equal(this.parent.width, 200);
              container.bazRanW_start = true;
            </handler>
            <handler event='onloop' args="count">
              if (container.bazRanW_loop == null) container.bazRanW_loop = 0;
              
              switch (container.bazRanW_loop) {
                case 0:
                  assert.closeTo(this.parent.width, 200, 0.0001);
                  assert.equal(0, count);
                  container.bazRanW_loop++;
                  break;
                case 1:
                  assert.closeTo(this.parent.width, 175, 0.0001);
                  assert.equal(1, count);
                  container.bazRanW_loop++;
                  break;
                case 2:
                  assert.closeTo(this.parent.width, 150, 0.0001);
                  assert.equal(2, count);
                  container.bazRanW_loop++;
                  break;
                default:
                  assert.fail(null, null, 'Unexpected onloop event');
              }
            </handler>
            <handler event='onend'>
              assert.closeTo(this.parent.width, 125, 0.0001);
              container.bazRanW_end = true;
            </handler>
          </animator>
        </view>
  
        <bitmap name="buz" x="100" y="600" width="200" height="200" src="/img/shoarma.jpg">
          <animator attribute="x" to="300" duration="300" motion="linear" repeat="2" bounce="true">
            <handler event="onend">
              assert.equal(this.parent.x, 100);
              container.buzRan = true;
            </handler>
            <handler event="ontick">
              this.parent.destroy()
              container.buzTickRan = true;
            </handler>
          </animator>
        </bitmap>
        
        <!-- Repeated animation -->
        <view bgcolor='orange' x="100" y="10" width="50" height="20">
          <animator attribute="x" to="200" duration="100" repeat="3">
            <handler event='onstart' args="event">
              assert.equal(this.parent.x, 100);
              container.repeaterX_start = true;
            </handler>
            <handler event='onloop' args="count">
              if (container.repeaterX_loop == null) container.repeaterX_loop = 0;
              
              switch (container.repeaterX_loop) {
                case 0:
                  assert.closeTo(this.parent.x, 100, 0.0001); // 100 because onloop is fired before the first setAttribute and we start at 100
                  assert.equal(0, count);
                  container.repeaterX_loop++;
                  break;
                case 1:
                  assert.closeTo(this.parent.x, 200, 0.0001); // 200 because onloop is fired before the first setAttribute and our last position was 200
                  assert.equal(1, count);
                  container.repeaterX_loop++;
                  break;
                case 2:
                  assert.closeTo(this.parent.x, 200, 0.0001); // 200 because onloop is fired before the first setAttribute and our last position was 200
                  assert.equal(2, count);
                  container.repeaterX_loop++;
                  break;
                default:
                  assert.fail(null, null, 'Unexpected onloop event');
              }
            </handler>
            <handler event='onend'>
              assert.closeTo(this.parent.x, 200, 0.0001);
              container.repeaterX_end = true;
            </handler>
          </animator>
          
          <animator attribute="y" to="50" duration="100" repeat="3" reverse="true">
            <handler event='onstart' args="event">
              assert.equal(this.parent.y, 10);
              container.repeaterY_start = true;
            </handler>
            <handler event='onloop' args="count">
              if (container.repeaterY_loop == null) container.repeaterY_loop = 0;
              
              switch (container.repeaterY_loop) {
                case 0:
                  assert.closeTo(this.parent.y, 10, 0.0001);
                  assert.equal(2, count);
                  container.repeaterY_loop++;
                  break;
                case 1:
                  assert.closeTo(this.parent.y, 10, 0.0001);
                  assert.equal(1, count);
                  container.repeaterY_loop++;
                  break;
                case 2:
                  assert.closeTo(this.parent.y, 10, 0.0001);
                  assert.equal(0, count);
                  container.repeaterY_loop++;
                  break;
                default:
                  assert.fail(null, null, 'Unexpected onloop event');
              }
            </handler>
            <handler event='onend'>
              assert.closeTo(this.parent.y, 10, 0.0001);
              container.repeaterY_end = true;
            </handler>
          </animator>
          
          <!-- Repeat, reverse and bounce -->
          <animator attribute="width" to="100" duration="100" repeat="3" reverse="true" bounce="true">
            <handler event='onstart' args="event">
              assert.equal(this.parent.width, 50);
              container.repeaterW_start = true;
            </handler>
            <handler event='onloop' args="count">
              if (container.repeaterW_loop == null) container.repeaterW_loop = 0;
              
              switch (container.repeaterW_loop) {
                case 0:
                  assert.closeTo(this.parent.width, 50, 0.0001);
                  assert.equal(2, count);
                  container.repeaterW_loop++;
                  break;
                case 1:
                  assert.closeTo(this.parent.width, 50, 0.0001);
                  assert.equal(1, count);
                  container.repeaterW_loop++;
                  break;
                case 2:
                  assert.closeTo(this.parent.width, 100, 0.0001);
                  assert.equal(0, count);
                  container.repeaterW_loop++;
                  break;
                default:
                  assert.fail(null, null, 'Unexpected onloop event');
              }
            </handler>
            <handler event='onend'>
              assert.closeTo(this.parent.width, 50, 0.0001);
              container.repeaterW_end = true;
            </handler>
          </animator>
        </view>
        
        <!-- Reverse an animation while it's running. -->
        <view name="reversalTest" width="20" height="20" bgcolor="pink" x="20" y="20">
          <animator attribute="x" relative="true" to="10" repeat="100" duration="100">
            <handler event="onstart">
              assert.equal(this.getActualAttribute('target').x, 20);
            </handler>
            <handler event="onloop" args="count">
              this.count = count;
            </handler>
            <handler event="onend">
              assert.equal(this.count, 0);
              assert.closeTo(this.getActualAttribute('target').x, 20, 0.0001);
              this.getActualAttribute('target').testRan = true;
            </handler>
            <handler event='oninit' type="coffee">
              setTimeout(() =>
                assert.isTrue(this.count > 1, 'At least 2 loops should have occurred by now.')
                assert.isTrue(this.getActualAttribute('target').x > 40, 'At least 2 loops should have occurred by now so x should be at least 40.')
                this.setAttribute('reverse', true)
              ,250)
            </handler>
          </animator>
        </view>
  
        <handler event="oninit" type="coffee">
          # Verify animations ran
          setTimeout(() =>
            assert.isTrue(@koalaRan)
            assert.isTrue(@barRan)
            
            assert.isTrue(@fooRanX)
            
            assert.isTrue(@fooRanY_start)
            assert.equal(@fooRanY_loop, 1)
            assert.isTrue(@fooRanY_end)
            
            assert.isTrue(@fooRanW_start)
            assert.equal(@fooRanW_loop, 1)
            assert.isTrue(@fooRanW_end)
            
            assert.isTrue(@bazRanX)
            
            assert.isTrue(@bazRanY_start)
            assert.equal(@bazRanY_loop, 3)
            assert.isTrue(@bazRanY_end)
            
            assert.isTrue(@bazRanW_start)
            assert.equal(@bazRanW_loop, 3)
            assert.isTrue(@bazRanW_end)
            
            assert.isTrue(@repeaterX_start)
            assert.equal(@repeaterX_loop, 3)
            assert.isTrue(@repeaterX_end)
            
            assert.isTrue(@repeaterY_start)
            assert.equal(@repeaterY_loop, 3)
            assert.isTrue(@repeaterY_end)
            
            assert.isTrue(@repeaterW_start)
            assert.equal(@repeaterW_loop, 3)
            assert.isTrue(@repeaterW_end)
            
            assert.equal(@buzRan, undefined)
            assert.isTrue(@buzTickRan)
            
            assert.isTrue(@reversalTest.testRan)
            
            assert.equal(@foo.y, 300)
          800)
        </handler>
      </view>
    </view>
  </screen>
</screens>
</composition>