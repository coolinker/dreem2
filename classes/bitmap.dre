<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
    * @class dr.bitmap {UI Components}
    * @extends dr.view
    * Loads an image from a URL. 
    *
    *     @example
    *     <bitmap src="../api-examples-resources/shasta.jpg" width="230" height="161"></bitmap>
    *
    * Stretch an image to fill the entire view.
    *     @example
    *     <bitmap src="../api-examples-resources/shasta.jpg" width="300" height="150" stretches="true"></bitmap>
    *
    */-->
<class name="bitmap" type="coffee">

  <!--/**
      * @attribute {String} [src='']
      * The URL of the bitmap file to load.
      */-->
  <!--/**
      * @event onload 
      * Fired when the bitmap is loaded
      * @param {Object} size An object containing the width and height
      */-->
  <!--/**
      * @event onerror 
      * Fired when there is an error loading the bitmap
      */-->
  <attribute name="src" type="string" value=""/>

  <!--/**
      * @attribute {String} [stretches=false]
      * How the image is scaled to the size of the view.
      * Supported values are 'true', 'false', 'scale' and 'none'.
      * "false" will scale the image to completely fill the view, but may 
      * obscure parts of the image.
      * "true" will stretch the image to fit the view.
      * "scale" will scale the image so it visible within the view, but the 
      * image may not fill the entire view.
      * "none" will display the image at its natural size but without resizing 
      * the view as the naturalsize attribute does.
      */-->
  <attribute name="stretches" type="string" value="false"/>

  <!--/**
      * @attribute {Boolean} [naturalsize=false]
      * If set to true the bitmap will be sized to the width/height of the
      * bitmap data in pixels.
      */-->
  <attribute name="naturalsize" type="boolean" value="false"/>

  <!--/**
      * @attribute {String} [repeat='no-repeat']
      * Determines if the image will be repeated within the bounds.
      * Supported values are 'no-repeat', 'repeat', 'repeat-x' and 'repeat-y'.
      */-->
  <attribute name="repeat" type="string" value="no-repeat"/>

  <!--/**
    * @attribute {String} [window='']
    * A window (section) of the image is displayed by specifying four,
    * comma-separated values:
    *   x,y  The coordinates of the upper-left hand corner of the image
    *   w,h  The width and height of the window to display.
    */-->
  <attribute name="window" type="string" value=""/>

  <method name="createSprite" args="attrs">
    return new dr.sprite.Bitmap(this, attrs);
  </method>

  <handler event="onwidth,onheight,onstretches,onload">
    # Compute the scaling factors between view coordinates and image coords.
    # image_x = ratio_x * view_x
    # image_y = ratio_y * view_y
    return unless @width and @height
    sprite = @sprite;
    @ratio_x = sprite.naturalWidth / @width
    @ratio_y = sprite.naturalHeight / @height

    if @stretches is 'scale'
      # x and y scaling are the same
      @ratio_x = @ratio_y = Math.max(@ratio_x, @ratio_y)
    else if @stretches is 'true'
      # Stretch to fit the field of view. This is what we computed
    else
      # 'false', Fill the field of view
      @ratio_x = @ratio_y = Math.min(@ratio_x, @ratio_y)
  </handler>

  <!--/**
        * @method isLeaf
        * @overrides
        * Bitmap views do not support subviews.
        */-->
  <method name="isLeaf" args="subnode">
    if subnode
      if subnode.isA(dr.View)
        return true
      else
        return @super()
    return true
  </method>
  
  <!--// Editor //-->
  <attribute name="hiddenattrs" type="expression" value="{naturalsize:true, window:true}" allocation="class"/>
  <attribute name="attrimportance" type="expression" allocation="class"
    value="{src:1, stretches:2, repeat:100}"
  />
</class>
