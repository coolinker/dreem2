<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->
<class name="baseeditorbutton" extends="text" with="button"
  border="1" bordercolor="#666666"
  toppadding="3" bottompadding="3" leftpadding="6" rightpadding="6"
  fontsize="14"
  cornerradius="4" focusembellishment="false"
>
  <method name="drawDisabledState">
    this.setActualAttribute('boxshadow', null).setActualAttribute('bgcolor', '#aaaaaa');
  </method>
  <method name="drawFocusedState">
    this.setActualAttribute('boxshadow', config.boxshadow_normal).setActualAttribute('bgcolor', '#ffffff');
  </method>
  <method name="drawHoverState">
    this.setActualAttribute('boxshadow', null).setActualAttribute('bgcolor', '#ffffff');
  </method>
  <method name="drawActiveState">
    this.setActualAttribute('boxshadow', null).setActualAttribute('bgcolor', '#dddddd');
  </method>
  <method name="drawReadyState">
    this.setActualAttribute('boxshadow', null).setActualAttribute('bgcolor', '#eeeeee');
  </method>
</class>

<class name="smallbutton" extends="baseeditorbutton" fontsize="10"/>

<class name="toolbarbutton" extends="baseeditorbutton">
  <attribute name="action" type="string" value=""/>
  <method name="doActivated">
    if (!this.disabled && !dr.global.dragManager.dragview) actions[this.action]();
  </method>
</class>

<class name="verticaltext" extends="text" xanchor="0" yanchor="0" rotation="-90"/>

<mixin name="rulertext" fontsize="10" color="${config.secondary_panel_color}" width="0" height="0"/>
<class name="horizontal_rulertext" extends="text" with="rulertext" y="2"/>
<class name="vertical_rulertext" extends="verticaltext" with="rulertext" x="2"/>

<mixin name="selecttext" fontsize="14" color="${config.selection_color}"/>
<mixin name="relselecttext" fontsize="14" color="${config.relselection_color}"/>

<class name="horizontal_ruler_selecttext" extends="text" with="selecttext" y="17"/>
<class name="vertical_ruler_selecttext" extends="verticaltext" with="selecttext" x="17"/>

<class name="horizontal_ruler_relselecttext" extends="text" with="relselecttext" y="2"/>
<class name="vertical_ruler_relselecttext" extends="verticaltext" with="relselecttext" x="2"/>

<mixin name="locationtext" fontsize="10" color="${config.location_color}"/>

<class name="subhead" extends="text" leftpadding="10" toppadding="4" bottompadding="4"
  topborder="1" bottomborder="1" bordercolor="${config.secondary_panel_color}"
  bgcolor="${config.primary_panel_color}" color="${config.label_text_color}"
  fontsize="14"
/>

<class name="basefloatingpanel" extends="floatingpanel"
  bgcolor="${config.content_color}"
  border="1" bordercolor="${config.secondary_panel_color}"
  boxshadow="${config.boxshadow_floater}"
>
  <method name="initNode" args="parent, attrs">
    this.super();
    dr.floatingpanelanchor.panelsbypanelid[this.panelid] = this;
  </method>
</class>

<class name="editor_text" extends="text" fontsize="14"/>
<class name="editor_inputtext" extends="inputtext" fontsize="14" border="1" bordercolor="#eeeeee" bgcolor="white"
  cornerradius="3" leftpadding="2" rightpadding="2"
>
  <handler event="onfocus" method="selectAll"/>
  <method name="showFocusEmbellishment">
    this.sprite.hideFocusEmbellishment();
    this.setActualAttribute('boxshadow', config.boxshadow_normal);
  </method>
  <method name="hideFocusEmbellishment">
    this.setActualAttribute('boxshadow', null);
  </method>
</class>

<class name="listviewbutton" with="listviewanchor, button"
  width="auto" height="auto" focusembellishment="false"
  floatingalign="insideright" floatingvalign="outsidebottom"
  floatingvalignoffset="2"
>
  <attribute name="fontsize" type="number" value="14"/>
  <attribute name="selected" type="boolean" value="false"/>
  <attribute name="label" type="string" value=""/>
  <handler event="onselected" args="selected" method="updateUI"/>
  
  <method name="doActivated">
    if (!this.disabled && !dr.global.dragManager.dragview) {
      var fp = this.getFloatingPanel();
      if (fp) this.toggleFloatingPanel();
    }
  </method>
  
  <method name="drawDisabledState">
    this.setActualAttribute('color', '#999999');
  </method>
  <method name="drawHoverState">
    this.setActualAttribute('color', '#666666');
  </method>
  <method name="drawActiveState">
    this.setActualAttribute('color', '#333333');
  </method>
  <method name="drawReadyState">
    this.setActualAttribute('color', '#000000');
  </method>
  
  <method name="notifyPanelHidden" args="panel">
    this.setActualAttribute('selected', false);
  </method>
  <method name="notifyPanelShown" args="panel">
    this.setActualAttribute('selected', true);
  </method>
  
  <text name="arrow" text="${this.parent.selected ? '▼' : '▶'}" fontsize="${this.parent.fontsize - 2}" y="2"/>
  <text text="${this.parent.label}" x="${this.parent.fontsize}" fontsize="${this.parent.fontsize}"/>
</class>

<class name="menubutton" with="listviewanchor, button"
  width="${this.labelview.width + 2*this.labelview.x}" height="21" y="2"
  floatingvalignoffset="2"
  listviewattrs="{maxheight:640, defaultitemclass:dr.menuitem}"
  focusembellishment="false"
  floatingalign="insideleft" floatingvalign="outsidebottom"
  cornerradius="2" bgcolor="#cccccc"
>
  <attribute name="selected" type="boolean" value="false"/>
  <attribute name="label" type="string" value=""/>
  <handler event="onselected" args="selected" method="updateUI"/>
  
  <method name="doActivated">
    if (!this.disabled && !dr.global.dragManager.dragview) {
      this.setActualAttribute('itemconfig', this.prepareConfig(this.cfg.concat())); // Concat to work around equality test.
      this.toggleFloatingPanel();
    }
  </method>
  
  <method name="doItemActivated" args="itemview">
    if (!this.disabled && !dr.global.dragManager.dragview) actions[itemview.action || itemview.name]();
    this.super();
  </method>
  
  <method name="updateConfig">
    if (this.inited) {
      var panelId = this.floatingpanelid,
        fp = this.getFloatingPanel(panelId);
      if (fp && fp.isShown()) {
        this.hideFloatingPanel(panelId);
        this.doActivated();
      }
    }
  </method>
  
  <method name="prepareConfig" args="cfg">
    return cfg;
  </method>
  
  <method name="drawDisabledState">
    this.setActualAttribute('bgcolor', this.selected ? '#dddddd' : '#aaaaaa');
  </method>
  <method name="drawHoverState">
    this.setActualAttribute('bgcolor', '#dddddd');
  </method>
  <method name="drawActiveState">
    this.setActualAttribute('bgcolor', this.selected ? '#dddddd' : '#bbbbbb');
  </method>
  <method name="drawReadyState">
    this.setActualAttribute('bgcolor', this.selected ? '#dddddd' : '#cccccc');
  </method>
  
  <method name="notifyPanelHidden" args="panel">
    this.setActualAttribute('selected', false);
  </method>
  <method name="notifyPanelShown" args="panel">
    this.setActualAttribute('selected', true);
  </method>
  
  <text name="labelview" text="${this.parent.label}" x="12" y="middle" fontsize="14" color="#333333"/>
</class>

<class name="menuitem" extends="listviewitem">
  <attribute name="shortcut" type="string" value=""/>

  <method name="getMinimumWidth">
    return this.inset + this.label.width + 16 + this.shortcutView.width + this.outset;
  </method>

  <text name="shortcutView"
    x="${this.parent.width - this.width - this.parent.outset}"
    text="${this.parent.shortcut}" fontsize="${this.parent.fontsize}"
  />
</class>

<class name="menufloatingpanelbutton" with="floatingpanelanchor, button"
  width="${this.labelview.width + 2*this.labelview.x}" height="21" y="2"
  floatingvalignoffset="2"
  focusembellishment="false"
  floatingalign="insideleft" floatingvalign="outsidebottom"
  cornerradius="2" bgcolor="#cccccc"
>
  <attribute name="selected" type="boolean" value="false"/>
  <attribute name="label" type="string" value=""/>
  <handler event="onselected" args="selected" method="updateUI"/>
  
  <method name="doActivated">
    if (!this.disabled && !dr.global.dragManager.dragview) {
      var fp = this.getFloatingPanel();
      if (fp) this.toggleFloatingPanel();
    }
  </method>
  
  <method name="drawDisabledState">
    this.setActualAttribute('bgcolor', this.selected ? '#dddddd' : '#aaaaaa');
  </method>
  <method name="drawHoverState">
    this.setActualAttribute('bgcolor', '#dddddd');
  </method>
  <method name="drawActiveState">
    this.setActualAttribute('bgcolor', this.selected ? '#dddddd' : '#bbbbbb');
  </method>
  <method name="drawReadyState">
    this.setActualAttribute('bgcolor', this.selected ? '#dddddd' : '#cccccc');
  </method>
  
  <method name="notifyPanelHidden" args="panel">
    this.setActualAttribute('selected', false);
  </method>
  <method name="notifyPanelShown" args="panel">
    this.setActualAttribute('selected', true);
  </method>
  
  <text name="labelview" text="${this.parent.label}" x="12" y="middle" fontsize="14" color="#333333"/>
</class>