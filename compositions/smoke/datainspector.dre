<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->
<composition>
  <screens>
    <screen type='browser' name='default' title='Smoke Test - Data Inspector'>
      <include href='./includes/boilerplate.dre'/>
      <view width='100%' height='100%' padding='25' id='lzeditor_0'>
        <include href='/editor/editor_include.dre'/>
        <datainspector x='0' y='300' data='${this.typename.data}' id='lzeditor_7' placement='editor' with='editable'>
          <dataset name='typename' id='lzeditor_8' with='editable'>
            [{
              "__typename": "newname",
              "firstName":"Jane",
              "lastName":"Doe"
            }]
          </dataset>
          <handler event='oninit'>
            var expected = {
              __type: '[{firstName:s,lastName:s}]',
              '{firstName:s,lastName:s}': {
                __count: 1,
                __type: '{firstName:s,lastName:s}',
                __typename: 'newname',
                firstName: { __type: 's' },
                lastName: { __type: 's' }
              }
            }
            assert.deepEqual(expected, this.structure)
          </handler>
        </datainspector>
        <datainspector x='0' y='0' data='${this.array.data}' id='lzeditor_4' placement='editor' with='editable'>
          <dataset name='array' id='lzeditor_5' with='editable'>
            [
              { "firstName":"John",  "lastName":"Upton", "address":{ "street":"123 Fake Street", "city":"Chicago", "state":"TN" } },
              { "firstName":"Sally", "lastName":"Upton", "address":{ "street":"123 Fake Street", "city":"Chicago", "state":"TN" } },
              { "firstName":"Jane",  "lastName":"Doe",   "address":{ "street":"123 Real Street", "city":"Paris",   "state":"FR" } }
            ]
          </dataset>
          <handler event='oninit'>
            var expected = {
              __type: '[{address:{city:s,state:s,street:s},firstName:s,lastName:s}]',
              '{address:{city:s,state:s,street:s},firstName:s,lastName:s}': {
                __count: 3,
                __type: '{address:{city:s,state:s,street:s},firstName:s,lastName:s}',
                address: {
                  __type: '{city:s,state:s,street:s}',
                  city: { __type: 's' },
                  state: { __type: 's' },
                  street: { __type: 's' }
                },
                firstName: { __type: 's' },
                lastName: { __type: 's' }
              }
            }
            assert.deepEqual(expected, this.structure)
          </handler>
        </datainspector>
        <datainspector x='400' y='0' data='${this.object.data}' id='lzeditor_1' placement='editor' with='editable'>
          <dataset name='object' id='lzeditor_2' with='editable'>
            {
              "int":        1,
              "bool":       true,
              "obj":        {"a": 1, "b": "b"},
              "objwobjs":   {"a": 1, "b": "b", "c": {"k": "f"}, "d": {"k": "f"}},
              "str":        "b",
              "arrint":     [1, 2, 3],
              "arrstr":     ["one", "two"],
              "arrobj":     [{"a": 8, "b": "g"}],
              "arrall":     [1, 2, "a", "b", "c", "d", false, true, false],
              "arrmixwobj": [1, 2, 3, "a", "b", {"e": "f"}],
              "arrwobjmix": [{"a": 1, "b": "b"}, {"b": 1, "c": "b"}, {"c": 1, "d": "b"}],
              "arrcpx":     [{"l": [{"a": 1, "b": "b"}, {"a": 2, "b": "b"}, {"a": 3, "b": "b"}], "m": [{"a": 5, "b": "b"}, {"a": 6, "b": "b"}, {"a": 7, "b": "b"}]},
                             {"l": [{"a": 1, "b": "b"}, {"a": 1, "b": "b"}, {"a": 1, "b": "b"}], "m": [{"a": 1, "b": "b"}, {"a": 1, "b": "b"}, {"a": 1, "b": "b"}]},
                             {"l": [{"a": 1, "b": "b"}, {"a": 1, "b": "b"}, {"a": 1, "b": "b"}], "m": [{"a": 1, "b": "b"}, {"a": 1, "b": "b"}, {"a": 1, "b": "b"}]},
                             {"l": [{"a": 1, "b": "b"}, {"a": 1, "b": "b"}, {"a": 1, "b": "b"}], "m": [{"a": 1, "b": "b"}, {"a": 1, "b": "b"}, {"a": 1, "b": "b"}]}
                            ]
            }
          </dataset>
          <handler event='oninit'>
            var expected = {
              __type: '{arrall:[b,i,s],arrcpx:[{l:[{a:i,b:s}],m:[{a:i,b:s}]}],arrint:[i],arrmixwobj:[i,s,{e:s}],arrobj:[{a:i,b:s}],arrstr:[s],arrwobjmix:[{a:i,b:s},{b:i,c:s},{c:i,d:s}],bool:b,int:i,obj:{a:i,b:s},objwobjs:{a:i,b:s,c:{k:s},d:{k:s}},str:s}',
              arrall:     {
                __type: '[b,i,s]',
                b: {
                  __count: 3,
                  __type: 'b'
                },
                i: {
                  __count: 2,
                  __type: 'i'
                },
                s: {
                  __count: 4,
                  __type: 's'
                }
              },
              arrcpx:     {
                __type: '[{l:[{a:i,b:s}],m:[{a:i,b:s}]}]',
                '{l:[{a:i,b:s}],m:[{a:i,b:s}]}': {
                  __count: 4,
                  __type: '{l:[{a:i,b:s}],m:[{a:i,b:s}]}',
                  l: {
                    __type: '[{a:i,b:s}]',
                    '{a:i,b:s}': {
                      __count: 3,
                      __type: '{a:i,b:s}',
                      a: {
                        __type: 'i'
                      },
                      b: {
                        __type: 's'
                      }
                    }
                  },
                  m: {
                    __type: '[{a:i,b:s}]',
                    '{a:i,b:s}': {
                      __count: 3,
                      __type: '{a:i,b:s}',
                      a: {
                        __type: 'i'
                      },
                      b: {
                        __type: 's'
                      }
                    }
                  }
                }
              },
              arrint:     {
                __type: '[i]',
                i: {
                  __count: 3,
                  __type: 'i'
                }
              },
              arrmixwobj: {
                __type: '[i,s,{e:s}]',
                i: {
                  __count: 3,
                  __type: 'i'
                },
                s:{
                  __count: 2,
                  __type: 's'
                },
                '{e:s}': {
                  __count: 1,
                  __type: '{e:s}',
                  e: {
                    __type: 's'
                  }
                }
              },
              arrobj:     {
                __type: '[{a:i,b:s}]',
                '{a:i,b:s}' : {
                  __type: '{a:i,b:s}',
                  __count: 1,
                  a: {
                    __type: 'i'
                  },
                  b: {
                    __type: 's'
                  }
                }
              },
              arrstr:     {
                __type: '[s]',
                s: {
                  __count: 2,
                  __type: 's'
                }
              },
              arrwobjmix: {
                __type: '[{a:i,b:s},{b:i,c:s},{c:i,d:s}]',
                '{a:i,b:s}': {
                  __count: 1,
                  __type: '{a:i,b:s}',
                  a: {
                    __type: 'i'
                  },
                  b: {
                    __type: 's'
                  }
                },
                '{b:i,c:s}': {
                  __count: 1,
                  __type: '{b:i,c:s}',
                  b: {
                    __type: 'i'
                  },
                  c: {
                    __type: 's'
                  }
                },
                '{c:i,d:s}' : {
                  __count: 1,
                  __type: '{c:i,d:s}',
                  c: {
                    __type: 'i'
                  },
                  d: {
                    __type: 's'
                  }

                }
              },
              bool:       { __type: 'b' },
              int:        { __type: 'i' },
              obj:        {
                __type: '{a:i,b:s}',
                a: {
                  __type: 'i'
                },
                b: {
                  __type: 's'
                }
              },
              objwobjs:   {
                __type: '{a:i,b:s,c:{k:s},d:{k:s}}',
                a: {
                  __type: 'i'
                },
                b: {
                  __type: 's'
                },
                c: {
                  __type: '{k:s}',
                  k: {
                    __type: 's'
                  }
                },
                d: {
                  __type: '{k:s}',
                  k: {
                    __type: 's'
                  }
                }
              },
              str:        { __type: 's' }
            }

            assert.deepEqual(expected, this.structure)
          </handler>
        </datainspector>
      </view>
    </screen>
  </screens>
</composition>
