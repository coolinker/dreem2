<!-- The MIT License (see LICENSE)
     Copyright (C) 2014-2015 Teem2 LLC -->
<!--/**
      * @class dr.editor.undoable {UI Components}
      * @extends dr.eventable
      */-->
<class name="editor-undoable" extends="eventable">
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <!--/**
        * @attribute {Boolean} [done]
        * @readonly
        * Indicates if this undoable is in the "done" or "undone" state.
        * Undoables begin in the undone state.
        */-->
  <attribute name="done" type="boolean" value="false"></attribute>

  <!--/**
        * @attribute {String} [undodescription]
        * A human readable representation of the undoable. The description
        * should describe what will be undone when the undoable is
        * executed.
        */-->
  <attribute name="undodescription" type="string" value=""></attribute>

  <!--/**
        * @attribute {String} [redodescription]
        * A human readable representation of the undoable. The description
        * should describe what will be done/redone when the undoable is
        * executed.
        */-->
  <attribute name="redodescription" type="string" value=""></attribute>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <method name="getUndoDescription">
    return this.undodescription;
  </method>

  <method name="getRedoDescription">
    return this.redodescription;
  </method>

  <method name="undo" args="callback">
    if (this.done) {
      this.setAttribute('done', false);
      if (callback && typeof callback === 'function') callback(this);
    }
  </method>

  <method name="redo" args="callback">
    if (!this.done) {
      this.setAttribute('done', true);
      if (callback && typeof callback === 'function') callback(this);
    }
  </method>
</class>
