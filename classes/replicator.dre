<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
  <!--/**
     * @class dr.replicator {Data}
     * @extends dr.node
     * Handles replication and data binding.
     *
     * This example shows the replicator to creating four text instances, each corresponding to an item in the data attribute:
     *
     *     @example
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <replicator classname="text" data="[1,2,3,4]"></replicator>
     *
     * Changing the data attribute to a new array causes the replicator to create a new text for each item:
     *
     *     @example
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <text onclick="repl.setAttribute('data', [5,6,7,8]);">Click to change data:</text>
     *     <replicator id="repl" classname="text" data="[1,2,3,4]"></replicator>
     *
     * This example uses a {@link #filterexpression filterexpression} to filter the data to only numbers. Clicking changes {@link #filterexpression filterexpression} to show only non-numbers in the data:
     *
     *     @example
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <text onclick="repl.setAttribute('filterexpression', '[^\\d]');">Click to change filter:</text>
     *     <replicator id="repl" classname="text" data="['a',1,'b',2,'c',3,4,5]" filterexpression="\d"></replicator>
     *
     * Replicators can be used to look up {@link #datapath datapath} expressions to values in JSON data in a dr.dataset. This example looks up the color of the bicycle in the dr.dataset named bikeshop:
     *
     *     @example
     *     <dataset name="bikeshop">
     *      {
     *        "bicycle": {
     *          "color": "red",
     *          "price": 19.95
     *        }
     *      }
     *     </dataset>
     *     <replicator classname="text" datapath="$bikeshop/bicycle/color"></replicator>
     *
     * Matching one or more items will cause the replicator to create multiple copies:
     *
     *     @example
     *     <dataset name="bikeshop">
     *      {
     *        "bicycle": [
     *          {
     *           "color": "red",
     *           "price": 19.95
     *          },
     *          {
     *           "color": "green",
     *           "price": 29.95
     *          },
     *          {
     *           "color": "blue",
     *           "price": 59.95
     *          }
     *        ]
     *      }
     *     </dataset>
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <replicator classname="text" datapath="$bikeshop/bicycle[*]/color"></replicator>
     *
     * It's possible to select a single item on from the array using an array index. This selects the second item:
     *
     *     @example
     *     <dataset name="bikeshop">
     *      {
     *        "bicycle": [
     *          {
     *           "color": "red",
     *           "price": 19.95
     *          },
     *          {
     *           "color": "green",
     *           "price": 29.95
     *          },
     *          {
     *           "color": "blue",
     *           "price": 59.95
     *          }
     *        ]
     *      }
     *     </dataset>
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <replicator classname="text" datapath="$bikeshop/bicycle[1]/color"></replicator>
     *
     * It's also possible to replicate a range of items in the array with the [start,end,stepsize] operator. This replicates every other item:
     *
     *     @example
     *     <dataset name="bikeshop">
     *      {
     *        "bicycle": [
     *          {
     *           "color": "red",
     *           "price": 19.95
     *          },
     *          {
     *           "color": "green",
     *           "price": 29.95
     *          },
     *          {
     *           "color": "blue",
     *           "price": 59.95
     *          }
     *        ]
     *      }
     *     </dataset>
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <replicator classname="text" datapath="$bikeshop/bicycle[0,3,2]/color"></replicator>
     *
     * Sometimes it's necessary to have complete control and flexibility over filtering and transforming results. Adding a [@] operator to the end of your datapath causes {@link #filterfunction filterfunction} to be called for each result. This example shows bike colors for bikes with a price greater than 20, in reverse order:
     *
     *     @example
     *     <dataset name="bikeshop">
     *      {
     *        "bicycle": [
     *          {
     *           "color": "red",
     *           "price": 19.95
     *          },
     *          {
     *           "color": "green",
     *           "price": 29.95
     *          },
     *          {
     *           "color": "blue",
     *           "price": 59.95
     *          }
     *        ]
     *      }
     *     </dataset>
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <replicator classname="text" datapath="$bikeshop/bicycle[*][@]">
     *       <method name="filterfunction" args="obj, accum">
     *         // add the color to the beginning of the results if the price is greater than 20
     *         if (obj.price > 20)
     *           accum.unshift(obj.color);
     *         return accum
     *       </method>
     *     </replicator>
     *
     * See [https://github.com/flitbit/json-path](https://github.com/flitbit/json-path) for more details.
     */-->
<class name="replicator" type="coffee" extends="node" requires="datapath">
  <attribute name="_arrayidentity" type="expression" value="[]" allocation="class"></attribute>
  <!--/**
    * @attribute {Boolean} [pooling=false]
    * If true, reuse views when replicating.
    */-->
  <attribute name="pooling" value="false" type="boolean"></attribute>

  <!--/**
    * @attribute {Array} [data=[]]
    * A list of items to replicate. If {@link #path path} is set, a {@link #datapath datapath} will be used to look up the value.
    */-->
  <attribute name="data" value="dr.replicator._arrayidentity" type="expression"></attribute>
  <!--/**
    * @attribute {String} [path=]
    * If set, a {@link #datapath datapath} will be used to look up the value.
    */-->
  <attribute name="datapath" value="" type="string"></attribute>
  <handler event="ondatapath" args="datapath">
    if datapath
      unless @_datapath?
        @_datapath = new dr.datapath(@parent)
        @listenTo(@_datapath, 'onresult', (data) =>
          @setAttribute('data', data) #unless data == dr.datapath._arrayidentity
          # console.log('data callback', data, @)
        )
        # console.log('new datapath', @_datapath)
      @_datapath.setAttribute('path', datapath)
  </handler>

  <!--/**
    * @attribute {String} classname (required)
    * The name of the class to be replicated.
    */-->
  <attribute name="classname" value="" type="string"></attribute>

  <handler event="ondestroy" method="clear"></handler>

  <method name="updateData" args="data">
    # remove dataset declaration
    re = /^\$([^\/]+)/
    @dataset.updateData(@datapath.replace(re, ''), data);
  </method>

  <method name="clear">
    if not @locked then @_lockLayouts(true)
    # @parent.setAttribute('display', 'none')
    if @children
      for child in @children
        # console.log 'destroying child', child
        child.destroy()
    @children = []
    # @parent.setAttribute('display', null)
    if not @locked then @_lockLayouts(false)
  </method>

  <method name="_lockLayouts" args="locked">
    if @parent.layouts
      for layout in @parent.layouts
        layout.setAttribute('locked', locked)
  </method>

  <!--/**
    * @event onreplicated
    * Fired when the replicator is done
    * @param {dr.replicator} replicator The dr.replicator that fired the event
    */-->
  <handler event="onclassname,ondata,oninit">
    return unless @inited and @parent
    unless @classname
      console.warn 'missing classname for replicator', @
      return
    # console.log('_applyData', @data, @classname, @parent, @children, @, @inited)

    unless dr.lookupClass(@classname)
      console.warn 'missing class for replicator', @classname, 'skipping replication'
      return

    return if @locked
    return unless @data and @data != dr.replicator._arrayidentity

    locked = @locked
    @locked = true

    if @classname == 'node'
      # bail out before actually replicating
      @locked = locked
      return

    @_lockLayouts(true)

    #console.log @data.length
    @children ?= []
    if @pooling 
      for child, i in @children
        datum = @data[i]
        # console.log 'replicator updating', i, child, 'in', datum
        if i < @data.length
          child.setAttribute('data', datum)
          child.setAttribute('visible', true);
        else
          child.setAttribute('visible', false);
      if @data.length > @children.length
        i = @children.length;
        while @data.length > @children.length
          datum = @data[i++]
          @_createChild(datum)
          # console.log 'replicator created', @classname, @children[@children.length - 1]
    else
      @clear()
      for datum in @data
        # console.log 'replicator creating', @classname, 'in', @parent
        @_createChild(datum)
        # console.log 'replicator created', @classname, @children[@children.length - 1]

    @_lockLayouts(false)
    @locked = locked
    @sendEvent('onreplicated', @)
  </handler>
  <method name="_createChild" args="data">
    attrs = {class: @classname, data: data, parent: @parent, __replicator: @}
    
    # add stuff required by the editor unless it's a class used by the editor itself!
    shouldedit = this.searchAncestors((node) ->
      return node.isA(dr.editable)
    )
    if 'editable' of dr and shouldedit?
      attrs.with = 'editable'
      attrs.__objectify_attrs_list = []
    child = @createChild(attrs)
    # Work around ondata event not firing
    @children.push(child)
    child.sendEvent('ondata', data)
  </method>
  
  <!--// Editor //-->
  <attribute name="hiddenattrs" type="expression" value="{pooling:true, data:true}" allocation="class"/>
</class>