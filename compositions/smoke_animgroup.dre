<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Animation Group'>
    <view width="100%" height="100%" scrollable="true">
      <testingtimer>1000</testingtimer>
      
      <!-- Sequential Animation -->
      <view width="50" height="50" bgcolor="red">
        <animgroup name="animgroup1" delay="500" parallel="false" repeat="2">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" to="100" duration="500" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="true">
            <animator name="subanim1" attribute="y" to="50" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            <animator name="subanim2" attribute="y" to="100" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animgroup>
          
          <animator name="anim3" attribute="x" to="0" duration="700" delay="300" repeat="2">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animator name="anim4" attribute="y" from="0" to="100" duration="800" delay="400" reverse="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 0", 
                
                "onstart anim1", 
                  "onloop anim1 0", 
                  "onloop anim1 1", 
                  "onloop anim1 2", 
                "onend anim1", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                "onend anim2", 
                
                "onstart anim3", 
                  "onloop anim3 0", 
                  "onloop anim3 1", 
                "onend anim3", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onloop animgroup1 1", 
                
                "onstart anim1", 
                  "onloop anim1 0", 
                  "onloop anim1 1", 
                  "onloop anim1 2", 
                "onend anim1", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                "onend anim2", 
                
                "onstart anim3", 
                  "onloop anim3 0", 
                  "onloop anim3 1", 
                "onend anim3", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 1800);
            assert.equal(this.anim1.totalDuration, 1800);
            
            assert.equal(this.anim2.__puppetStart, 1800);
            assert.equal(this.anim2.__puppetEnd, 2600);
            assert.equal(this.anim2.totalDuration, 800);
            
            assert.equal(this.anim3.__puppetStart, 2600);
            assert.equal(this.anim3.__puppetEnd, 4600);
            assert.equal(this.anim3.totalDuration, 2000);
            
            assert.equal(this.anim4.__puppetStart, 4600);
            assert.equal(this.anim4.__puppetEnd, 5800);
            assert.equal(this.anim4.totalDuration, 1200);
            
            assert.equal(this.totalDuration, 6300 * 2);
          </handler>
        </animgroup>
      </view>
      
      <!-- Reversed sequential animation -->
      <view width="50" height="50" x="200" bgcolor="orange">
        <animgroup name="animgroup1" delay="500" parallel="false" repeat="2" reverse="true">
          <attribute name="output" type="expression" value="[]"></attribute>
          
          <animator name="anim1" attribute="x" from="200" to="300" duration="500" delay="100" repeat="3" bounce="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animgroup name="anim2" delay="200" sequential="true">
            <animator name="subanim1" attribute="y" from="0" to="50" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            <animator name="subanim2" attribute="y" from="50" to="100" duration="200" delay="100">
              <handler event="onstart">
                this.parent.parent.output.push('onstart ' + this.name);
              </handler>
              <handler event="onloop" args="count">
                this.parent.parent.output.push('onloop ' + this.name + ' ' + count);
              </handler>
              <handler event="onend">
                this.parent.parent.output.push('onend ' + this.name);
              </handler>
            </animator>
            
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animgroup>
          
          <animator name="anim3" attribute="x" from="300" to="200" duration="700" delay="300" repeat="2">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <animator name="anim4" attribute="y" from="0" to="100" duration="800" delay="400" reverse="true">
            <handler event="onstart">
              this.parent.output.push('onstart ' + this.name);
            </handler>
            <handler event="onloop" args="count">
              this.parent.output.push('onloop ' + this.name + ' ' + count);
            </handler>
            <handler event="onend">
              this.parent.output.push('onend ' + this.name);
            </handler>
          </animator>
          
          <handler event="onstart">
            this.output.push('onstart ' + this.name);
          </handler>
          <handler event="onloop" args="count">
            this.output.push('onloop ' + this.name + ' ' + count);
          </handler>
          <handler event="onend">
            this.output.push('onend ' + this.name);
            
            var expected = [
              "onstart animgroup1", 
                "onloop animgroup1 1", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onstart anim3", 
                  "onloop anim3 1", 
                  "onloop anim3 0", 
                "onend anim3", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                "onend anim2", 
                
                "onstart anim1", 
                  "onloop anim1 2", 
                  "onloop anim1 1", 
                  "onloop anim1 0", 
                "onend anim1", 
                
                "onloop animgroup1 0", 
                
                "onstart anim4", 
                  "onloop anim4 0", 
                "onend anim4", 
                
                "onstart anim3", 
                  "onloop anim3 1", 
                  "onloop anim3 0", 
                "onend anim3", 
                
                "onstart anim2", 
                  "onloop anim2 0", 
                  
                  "onstart subanim2", 
                    "onloop subanim2 0", 
                  "onend subanim2", 
                  
                  "onstart subanim1", 
                    "onloop subanim1 0", 
                  "onend subanim1", 
                "onend anim2", 
                
                "onstart anim1", 
                  "onloop anim1 2", 
                  "onloop anim1 1", 
                  "onloop anim1 0", 
                "onend anim1", 
              "onend animgroup1"
            ];
            
            assert.equal(this.output.join(','), expected.join(','));
          </handler>
          
          <handler event="oninit">
            assert.equal(this.anim1.__puppetStart, 0);
            assert.equal(this.anim1.__puppetEnd, 1800);
            assert.equal(this.anim1.totalDuration, 1800);
            
            assert.equal(this.anim2.__puppetStart, 1800);
            assert.equal(this.anim2.__puppetEnd, 2600);
            assert.equal(this.anim2.totalDuration, 800);
            
            assert.equal(this.anim3.__puppetStart, 2600);
            assert.equal(this.anim3.__puppetEnd, 4600);
            assert.equal(this.anim3.totalDuration, 2000);
            
            assert.equal(this.anim4.__puppetStart, 4600);
            assert.equal(this.anim4.__puppetEnd, 5800);
            assert.equal(this.anim4.totalDuration, 1200);
            
            assert.equal(this.totalDuration, 6300 * 2);
          </handler>
        </animgroup>
      </view>
      
      
      
      <!--view width="50" height="50" bgcolor="orange">
        <animgroup delay='500' repeat="2" sequential="true">
          <animator attribute="x" repeat="2" bounce="true" to="100" duration="500"></animator>
          <animator attribute="y" repeat="2" bounce="true" to="50" duration="500"></animator>
          
          <animgroup repeat="2" sequential="true">
            <animator attribute="width" to="100" duration="500"></animator>
            <animator attribute="height" to="100" duration="500"></animator>
          </animgroup>
        </animgroup>
      </view-->
      
      <!--view bgcolor='red' id="koala1" x="10" y="0" width="auto" height="auto">
        <text text='Nesting'></text>
        <animgroup delay='100' id="myanim1" repeat="1" bounce="true" parallel='false'>
          <handler event='onend'>
            assert.equal(this.parent.x, 14)
            assert.equal(this.parent.y, 12)
          </handler>
          <animator attribute="x" to="100" duration="100" motion="linear"></animator>
          <animator attribute="y" to="100" duration="500" control="0.01,0.01" motion="bret" ></animator>
          <animgroup repeat="1" motion="bret" control="0.01,0.01" bounce="false" parallel='true'>
            <animator attribute="x" to="14" duration="1000" motion="linear"></animator>
            <animator delay="500"  attribute="y" to="12" duration="1000" motion="linear"></animator>
          </animgroup>
        </animgroup>
      </view>
  
      <view bgcolor='red' id="koala2" x="10" y="75" width="auto" height="auto">
        <text text='Paused'></text>
        <animgroup delay='100' paused='true' repeat="1" bounce="true" sequential='true'>
          <handler event='oninit'>
            setTimeout(function(){
              this.setAttribute('paused', false)
            }.bind(this), 100)
          </handler>
          <handler event='onend'> 
            assert.equal(this.parent.x, 14)
            assert.equal(this.parent.y, 76)
          </handler>
          <animator attribute="x" to="200" duration="100" motion="linear"></animator>
          <animator attribute="y" to="150" duration="500" control="0.01,0.01" motion="bret" ></animator>
          <animgroup repeat="1" motion="bret" control="0.01,0.01" bounce="false" sequential='false'>
            <animator attribute="x" to="14" duration="100" motion="linear"></animator>
            <animator delay="50" attribute="y" to="76" duration="100" motion="linear"></animator>
          </animgroup>
        </animgroup>
      </view>
  
      <view bgcolor='red' id="koala2" x="10" y="150" width="auto" height="auto">
        <text text='Color'></text>
        <animgroup delay='100' repeat="3" bounce="true" parallel='true'>
          <handler event='onend'>
            assert.equal(this.parent.x, 10)
            assert.equal(this.parent.bgcolor, '#0000ff')
          </handler>      
          <animator attribute="x" to="100" duration="100" repeat='4' bounce='true' motion="linear"></animator>
          <animator attribute="bgcolor" to="blue" duration="500" control="0.01,0.01" motion="bret" ></animator>
        </animgroup>
      </view>
  
      <view bgcolor='red' id="koala3" x="10" y="210" width="auto" height="auto">
        <text text='Pause mid'></text>
        <animgroup delay='100' repeat="3" bounce="true" parallel='true'>
          <handler event='ontick' args='time'>
            if (time > 300 && !this._trigger_) {
              this._trigger_ = true
              this.setAttribute('paused', true)
              setTimeout(function(){
                this.setAttribute('paused', false)
              }.bind(this),1200)
            }
          </handler>
          <animator attribute="x" to="100" duration="100" repeat='4' bounce='true' motion="inOutExpo"></animator>
          <animator attribute="bgcolor" to="orange" repeat='6' bounce='true' duration="100" control="0.01,0.01" motion="bret" ></animator>
        </animgroup>
      </view>
  
      <view bgcolor='red' id="koala4" x="10" y="260" width="auto" height="auto">
        <text text='Inheritance'></text>
        <animgroup duration="1000">
          <animgroup to='200' bounce="true" parallel='true'>
            <handler event='onend'>
              assert.equal(this.parent.x, 200)
            </handler>
            <animator attribute="x" repeat='1' bounce='true' motion="inOutExpo"></animator>
          </animgroup>
        </animgroup>
      </view>
  
      <view bgcolor='red' id="koala3" x="10" y="310" width="auto" height="auto">
        <text text='Paused start'></text>
        <animgroup paused='true' repeat="1" bounce="true" parallel='true'>
          <handler event='oninit' args='time'>
            setTimeout(function(){
              this.setAttribute('paused', false)
            }.bind(this),500)
            setTimeout(function(){
              assert.equal(this.parent.x, 101)
            }.bind(this),800)
          </handler>
          <animator attribute="x" to="101" duration="100" repeat='1' bounce='true' motion="inOutExpo"></animator>
        </animgroup>
      </view-->
    </view>
  </screen>
</screens>
</composition>