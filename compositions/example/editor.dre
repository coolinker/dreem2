<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<composition>
  <screens>
    <screen type="browser" name="default" title='Editor'>
      <node id="config">
        <attribute name="topbar_height" type="number" value="32"></attribute>
        <attribute name="leftbar_width" type="number" value="75"></attribute>
        <attribute name="rightbar_width" type="number" value="250"></attribute>
        <attribute name="bottombar_height" type="number" value="24"></attribute>
      </node>
      
      <node id="actions">
        <method name="_undoRedoCallback" args="undoable">
          if (undoable.target) reticle.target = undoable.target;
          reticle.syncPosition();
        </method>
        
        <method name="undo">
          undo.undo(this._undoRedoCallback);
        </method>
        
        <method name="redo">
          undo.redo(this._undoRedoCallback);
        </method>
        
        <method name="save">
          editormodel.save();
          undo.reset();
        </method>
        
        <method name="clearSelection">
          reticle.setFocus(null);
        </method>
      </node>
      
      <editor-undostack id="undo"></editor-undostack>
      
      <node id="editormodel">
        <handler event="oninit">
          var _this = this;
          // rewrite the file to be editable, which will reload this page automatically
          dr.global.requestor.fetch(window.location.toString() + '?edit=1').success(
            function(data, status) {
              var parser = new dr.htmlparser();
              var jsobj = parser.parse(data)
              _this.setAttribute('model', jsobj);
              // console.log('loaded model', jsobj)
            }
          );
        </handler>
        <method name="update" args="id, name, value">
          if (this.model) {
            var child = this._findChild(id, this.model);
            if (child) {
              child.attr[name] = value;
              // console.log('found child', child, id, child.attr);
            }
          }
        </method>
        <method name="save">
          dr.global.requestor.send(window.location.toString() + '?edit=1', JSON.stringify(this.model) );
        </method>
        <method name="_findChild" args="id, jsobj">
          var children = jsobj.child;
          for (var i = 0; i < children.length; i++) {
            var child = children[i]
            if (child.attr && (child.attr.id === id)) {
              // console.log('found child', child)
              return child;
            } else if (child.child) {
              newchild = this._findChild(id, child);
              if (newchild) {
                return newchild;
              }
            }
          }
        </method>
      </node>
      
      <mixin name="editable">
        <handler event="onmousedown" args="event">
          reticle.setFocus(this)
          dr.sprite.simulatePlatformEvent(reticle, 'mousedown', {pointerX:event.x, pointerY:event.y});
        </handler>
        
        <method name="setAttribute" args="name, value">
          var ret = this.super(name, value)
          if (this.parent && this.parent.inited) {
            editormodel.update(this.id, name, this[name]);
          }
          return ret;
        </method>
      </mixin>
      
      <class name="controlhandle" with="draggable, button"
        border="1" bordercolor="blue" width="9" height="9"
        focusembellishment="false"
      >
        <method name="drawHoverState">
          this.setAttribute('bgcolor', '#eeeeee');
          this.setAttribute('boxshadow', this.focused ? [0,0,4,0,'#000000'] : null);
        </method>
        <method name="drawActiveState">
          this.setAttribute('bgcolor', '#dddddd');
          this.setAttribute('boxshadow', this.focused ? [0,0,4,0,'#000000'] : null);
        </method>
        <method name="drawReadyState">
          this.setAttribute('bgcolor', '#cccccc');
          this.setAttribute('boxshadow', this.focused ? [0,0,4,0,'#000000'] : null);
        </method>
      </class>
      
      <class name="reticle" with="draggable" visible="false" distancebeforedrag="5">
        <view width="100%" height="100%" clip="true">
          <view name="fill" width="100%" height="100%"
            border="1" bordercolor="blue" bgcolor="cyan" opacity=".5"
          ></view>
        </view>
        
        <controlhandle name="resizer">
          <handler event="onx" args="x">
            this.parent.setAttribute('width', x + 5);
          </handler>
          <handler event="ony" args="y">
            this.parent.setAttribute('height', y + 5);
          </handler>
          <method name="startDrag" args="event">
            this.parent._start();
            this.super();
          </method>
          <method name="updatePosition" args="x, y">
            if (!this.disabled) {
              this.setAttribute('x', Math.max(-5, x));
              this.setAttribute('y', Math.max(-5, y));
            }
          </method>
          <method name="stopDrag" args="event, isAbort">
            if (isAbort) {
              return;
            } else {
              this.parent._stop();
              this.super();
            }
          </method>
        </controlhandle>
        
        <method name="setFocus" args="view">
          this.target = view;
          if (view) {
            this.setAttribute('visible', true);
            
            var pos = view.getAbsolutePosition();
            this.dx = view.x - pos.x;
            this.dy = view.y - pos.y;
            this.syncPosition();
            this.moveToFront();
          } else {
            this.setAttribute('visible', false);
          }
          //softfocus.setFocus(this);
        </method>
        <method name="syncPosition">
          var pos = this.target.getAbsolutePosition();
          this.setAttributes({visible: true, width: this.target.width, height: this.target.height, x: pos.x, y: pos.y})
        </method>
        <handler event="onx" args="x">
          if (this.target) {
            this.target.setAttribute('x', x + this.dx);
          }
        </handler>
        <handler event="ony" args="y">
          if (this.target) {
            this.target.setAttribute('y', y + this.dy);
          }
        </handler>
        <handler event="onwidth" args="width">
          if (this.target) {
            this.target.setAttribute('width', width);
          }
          this.resizer.setAttribute('x', this.width - 5)
        </handler>
        <handler event="onheight" args="height">
          if (this.target) {
            this.target.setAttribute('height', height);
          }
          this.resizer.setAttribute('y', this.height - 5)
        </handler>
        
        <method name="_start">
          // started dragging, create compound for target with current values
          this._undoablew = new dr.editor.attrundoable({target:this.target, attribute:'width', oldvalue:this.target.width});
          this._undoableh = new dr.editor.attrundoable({target:this.target, attribute:'height', oldvalue:this.target.height});
          this._undoablex = new dr.editor.attrundoable({target:this.target, attribute:'x', oldvalue:this.target.x});
          this._undoabley = new dr.editor.attrundoable({target:this.target, attribute:'y', oldvalue:this.target.y});
        </method>
        <method name="startDrag" args="event">
          this._start();
          this.super();
        </method>
        <method name="_stop">
          // stopped dragging, store new values
          var compound = new dr.editor.compoundundoable();
          this._undoablew.newvalue = this.target.width;
          this._undoableh.newvalue = this.target.height;
          this._undoablex.newvalue = this.target.x;
          this._undoabley.newvalue = this.target.y;
          compound.add(this._undoablew).add(this._undoableh).add(this._undoablex).add(this._undoabley);
          undo.do(compound);
        </method>
        <method name="stopDrag" args="event, isAbort">
          if (isAbort) {
            return;
          } else {
            this._stop();
            this.super();
          }
        </method>
      </class>
      
      <view width="100%" height="100%">
        <handler event="onkeycodedown" reference="dr.keyboard" args="keyCode">
          if (dr.keyboard.isAcceleratorKeyDown()) {
            switch (keyCode) {
              case 90: // Z
                (dr.keyboard.isShiftKeyDown() ? redoButton : undoButton).doActivated();
                break;
            }
          }
        </handler>
        
        <view name="topbar" bgcolor="gray"
          width="100%" height="${config.topbar_height}"
        >
          <spacedlayout spacing="2" inset="4"></spacedlayout>
          <constantlayout attribute="y" value="'middle'"></constantlayout>
          
          <labelbutton id="undoButton">Undo<handler event="onactivated">actions.undo();</handler></labelbutton>
          <labelbutton id="redoButton">Redo<handler event="onactivated">actions.redo();</handler></labelbutton>
          <labelbutton id="saveButton">Save<handler event="onactivated">actions.save();</handler></labelbutton>
        </view>
        
        <view name="leftbar" bgcolor="silver"
          y="${config.topbar_height}"
          width="${config.leftbar_width}"
          height="${this.parent.innerheight - this.y - config.bottombar_height}"
        ></view>
        
        <view name="content"
          x="${config.leftbar_width}" y="${config.topbar_height}"
          width="${this.parent.innerwidth - this.x - config.rightbar_width}"
          height="${this.parent.innerheight - this.y - config.bottombar_height}"
          scrollable="true"
        >
          <handler event="onmousedown" args="event">actions.clearSelection();</handler>
          <view with="editable" x="10" y="40" bgcolor="red" width="100" height="100"></view>
          <view with="editable" x="10" y="40" bgcolor="green" width="100" height="100"></view>
        </view>
        
        <view name="rightbar" bgcolor="silver"
          x="right" y="${config.topbar_height}"
          width="${config.rightbar_width}"
          height="${this.parent.innerheight - this.y - config.bottombar_height}"
        ></view>
        
        <view name="bottombar" bgcolor="gray" y="bottom"
          width="100%" height="${config.bottombar_height}"
        ></view>
        
        <reticle id="reticle"></reticle>
        
        <!--view id="softfocus">
          <method name="setFocus" args="view">
            if (this.scope && this.scope !== view) {
              this.stopListening(dr.mouse, 'onmouseup', this.processEvent)
            }
            this.scope = view;
            console.log('setFocus', this.scope, view)
            this.listenTo(dr.mouse, 'onmouseup', this.processEvent.bind(this))
          </method>
          <method name="processEvent" args="event">
            if (! this.scope) return;
            // Check to see if the mouse went up outside us
            var view = event.view;
            while (view) {
              console.log('processEvent', view.platformObject, this.scope.id, view === this.scope)
              if (view === this.scope) {
                // don't prevent bubbling for mouseup events
                return false;
              }
              view = view.parent;
            }
            
            console.log('canceling', this.scope.id)
            this.stopListening(dr.mouse, 'onmouseup', this.processEvent)
            this.scope.sendEvent('onlostfocus')
            this.scope = null;
            
            // don't prevent bubbling for mouseup events
            return false;
          </method>
        </view-->
      </view>
    </screen>
  </screens>
</composition>