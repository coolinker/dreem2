<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Example - Floating Panel'>
    <class name="mybtn" extends="text" with="button" border="1" bordercolor="black" padding="4" cornerradius="4"
      focusembellishment="false"
    >
      <method name="drawFocusedState">
        this.setAttribute('bgcolor', '#ffffff');
      </method>
      <method name="drawHoverState">
        this.setAttribute('bgcolor', '#ffffff');
      </method>
      <method name="drawActiveState">
        this.setAttribute('bgcolor', '#eeeeee');
      </method>
      <method name="drawReadyState">
        this.setAttribute('bgcolor', '#dddddd');
      </method>
    </class>
    
    <mixin name="buildpanelmixin">
      <method name="doActivated">
        var panelId = 'baz';
        var fp = this.getFloatingPanel(panelId);
        if (!fp) {
          fp = this.createFloatingPanel(panelId, dr.floatingpanel, {
            bgcolor:'#0000ff', width:'auto', height:'auto'
          });
          fp.extend({
            getFirstFocusableDescendant: function() {return this.subbtn1;}
          });
          
          fp.createChild({class:'mybtn', name:'subbtn1', text:'here'}, [{
            doActivated: function() {this.parent.hide();}
          }]);
          fp.createChild({class:'mybtn', name:'subbtn2', text:'there', y:35}, [{
            doActivated: function() {this.parent.hide();}
          }]);
        }
        this.toggleFloatingPanel(panelId);
      </method>
    </mixin>
    
    <view width="100%" height="100%" bgcolor="#eeeeee">
      <mybtn with="floatingpanelanchor" name="btn1" text="button 1">
        <method name="doActivated">
          var panelId = 'foo';
          var fp = this.getFloatingPanel(panelId);
          if (!fp) fp = this.createFloatingPanel(panelId, dr.floatingpanel, {
            bgcolor:'#ff0000', width:100, height:25
          });
          this.toggleFloatingPanel(panelId);
        </method>
        
        <method name="getNextFocusAfterPanel">
          return this.parent.btn2;
        </method>
      </mybtn>
      
      <mybtn with="floatingpanelanchor" name="btn2" text="hide on mouse down: false"
        floatingalign="outsideright" floatingvalign="insidetop" floatingalignoffset="2"
      >
        <method name="doActivated">
          var panelId = 'bar';
          var fp = this.getFloatingPanel(panelId);
          if (!fp) this.createFloatingPanel(panelId, dr.floatingpanel, {
            bgcolor:'#00ff00', width:30, height:50, hideonmousedown:false
          });
          this.toggleFloatingPanel(panelId);
        </method>
        
        <method name="getNextFocusAfterPanel">
          return this.parent.btn3;
        </method>
      </mybtn>
      
      <mybtn with="buildpanelmixin, floatingpanelanchor" name="btn3" text="button 3"/>
      <mybtn with="buildpanelmixin, floatingpanelanchor" name="btn4" text="button 4"/>
      
      <mybtn with="floatingpanelanchor" name="btn5" text="hide on blur: false"
        floatingalign="outsideright" floatingvalign="insidetop" floatingalignoffset="2"
      >
        <method name="doActivated">
          var panelId = '5';
          var fp = this.getFloatingPanel(panelId);
          if (!fp) this.createFloatingPanel(panelId, dr.floatingpanel, {
            bgcolor:'#00ff99', width:30, height:50, hideonblur:false
          });
          this.toggleFloatingPanel(panelId);
        </method>
        
        <method name="getNextFocusAfterPanel">
          return this.parent.btn6;
        </method>
      </mybtn>
      
      <mybtn with="floatingpanelanchor" name="btn6" text="button 6"
        floatingalign="outsideright" floatingvalign="insidetop" floatingalignoffset="2"
      >
        <method name="doActivated">
          var panelId = '6';
          var fp = this.getFloatingPanel(panelId);
          if (!fp) this.createFloatingPanel(panelId, dr.floatingpanel, {bgcolor:'#00ff99', width:30, height:50, hideonblur:false});
          this.toggleFloatingPanel(panelId);
        </method>
        
        <method name="getNextFocusAfterPanel">
          return this.parent.btn7;
        </method>
      </mybtn>
      
      <mybtn with="floatingpanelanchor" name="btn7" text="ignore owner for hide on blur"
        floatingalign="insideright" floatingvalign="outsidebottom" floatingvalignoffset="2"
      >
        <method name="doActivated">
          var panelId = '7';
          var fp = this.getFloatingPanel(panelId);
          if (!fp) this.createFloatingPanel(panelId, dr.floatingpanel, {
            bgcolor:'#00ff99', width:30, height:50, ignoreownerforhideonblur:false
          });
          this.showFloatingPanel(panelId);
        </method>
      </mybtn>
      
      <mybtn with="floatingpanelanchor" name="btn8" text="ignore owner for hide on mouse down"
        floatingalign="insideright" floatingvalign="outsidebottom" floatingvalignoffset="2"
      >
        <method name="doActivated">
          var panelId = '8';
          var fp = this.getFloatingPanel(panelId);
          if (!fp) this.createFloatingPanel(panelId, dr.floatingpanel, {
            bgcolor:'#00ff99', width:30, height:50, ignoreownerforhideonmousedown:false
          });
          this.showFloatingPanel(panelId);
        </method>
        
        <method name="getNextFocusAfterPanel">
          return this.parent.btn9;
        </method>
      </mybtn>
      
      <mybtn with="floatingpanelanchor" name="btn9" text="button 9"
        floatingalign="insideright" floatingvalign="outsidebottom" floatingvalignoffset="2"
      >
        <method name="doActivated">
          var panelId = '9';
          var fp = this.getFloatingPanel(panelId);
          if (!fp) this.createFloatingPanel(panelId, dr.floatingpanel, {
            bgcolor:'#00ff99', width:30, height:50
          });
          this.showFloatingPanel(panelId);
        </method>
        
        <method name="getNextFocusAfterPanel">
          return this.parent.btn10;
        </method>
      </mybtn>
      
      <mybtn with="listviewanchor" name="btn10" text="button 10"
        floatingpanelid="listviewTest"
        listviewattrs="{maxheight:300}"
      >
        <method name="doActivated">
          var cfg = [
            {attrs:{text:'foo'}},
            {attrs:{text:'This should be the longest item.'}},
            {attrs:{text:'baz'}},
            {attrs:{text:'a'}},
            {attrs:{text:'b'}},
            {attrs:{text:'c', disabled:true}},
            {attrs:{text:'d', visible:false}},
            {attrs:{text:'e'}},
            {attrs:{text:'f'}},
            {attrs:{text:'g'}},
            {klass:dr.listviewseparator},
            {attrs:{text:'h'}},
            {attrs:{text:'i'}},
            {attrs:{text:'j'}},
            {attrs:{text:'k'}},
            {klass:dr.listviewseparator},
            {attrs:{text:'l'}},
            {attrs:{text:'m'}},
            {attrs:{text:'n'}},
            {klass:dr.listviewseparator},
            {attrs:{text:'o'}},
            {attrs:{text:'p'}},
            {attrs:{text:'q'}},
            {attrs:{text:'r'}},
            {attrs:{text:'s'}},
            {attrs:{text:'t'}},
            {attrs:{text:'u'}},
            {attrs:{text:'v'}},
            {attrs:{text:'w'}},
            {attrs:{text:'x'}},
            {attrs:{text:'y'}},
            {attrs:{text:'z'}}
          ];
          cfg.length = dr.getRandomInt(5, cfg.length);
          this.setAttribute('itemconfig', cfg);
          
          this.toggleFloatingPanel();
        </method>
        
        <method name="doItemActivated" args="itemview">
          console.log(itemview.text);
          this.super();
        </method>
      </mybtn>
      
      <constantlayout attribute="y" value="10"/>
      <wrappinglayout axis="x" spacing="10" inset="10" lineinset="10" linespacing="10"/>
    </view>
  </screen>
</screens>
</composition>