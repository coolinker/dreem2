<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Button'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view id="all" width="100%" bgcolor="orange" padding="10">
      <spacedlayout axis="y" spacing="4" updateparent="true"></spacedlayout>
      
      <!-- labelbutton tests -->
      <class name="labelbuttontest" extends="labelbutton" type="coffee">
        <!-- Verify x, y, width, height, textx, texty -->
        <method name="testsize" args="x,y,width,height,textx,texty">
          assert.closeTo(@x, x, 5, "x")
          assert.closeTo(@y, y, 5, "y")
          assert.closeTo(@width, width, 11, "width")
          assert.closeTo(@height, height, 11, "height")
          assert.closeTo(@textx, textx, 6, "textx")
          assert.closeTo(@texty, texty, 6, "texty")
        </method>
      </class>
      
      <labelbuttontest type="coffee" text="Text">
        <handler event="oninit">
          assert.testCaseLabel = 'labelbutton tests';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,55,24,10,0);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,100,24,10,0);
        </handler>
      </labelbuttontest>
      
      <labelbuttontest type="coffee" text="Text" width="200" height="100">
        <handler event="oninit">
          assert.testCaseLabel = 'labelbutton tests, fixed width and height';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,200,100,80,38);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,200,100,60,38);
        </handler>
      </labelbuttontest>
      
      <labelbuttontest type="coffee" text="Text" width="200">
        <handler event="oninit">
          assert.testCaseLabel = 'labelbutton tests, fixed width';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,200,24,80,0);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,200,24,60,0);
        </handler>
      </labelbuttontest>
      
      <labelbuttontest type="coffee" text="Text" height="100">
        <handler event="oninit">
          assert.testCaseLabel = 'labelbutton tests, fixed height';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,55,100,11,38);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,100,100,11,38);
        </handler>
      </labelbuttontest>
      
      
      <!-- labeltoggle tests. Identical to labelbutton -->
      <!-- Verify x, y, width, height, textx, texty -->
      <class name="labeltoggletest" extends="labeltoggle" type="coffee">
        <method name="testsize" args="x,y,width,height,textx,texty">
          assert.closeTo(@x, x, 5, "x")
          assert.closeTo(@y, y, 5, "y")
          assert.closeTo(@width, width, 11, "width")
          assert.closeTo(@height, height, 11, "height")
          assert.closeTo(@textx, textx, 6, "textx")
          assert.closeTo(@texty, texty, 6, "texty")
        </method>
      </class>
      
      <labeltoggletest type="coffee" text="Text">
        <handler event="oninit">
          assert.testCaseLabel = 'labeltoggle tests';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,55,24,10,0);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,100,24,10,0);
        </handler>
      </labeltoggletest>
      
      <labeltoggletest type="coffee" text="Text" width="200" height="100">
        <handler event="oninit">
          assert.testCaseLabel = 'labeltoggle tests, fixed width and height';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,200,100,80,38);
        </handler>
      </labeltoggletest>
      
      <labeltoggletest type="coffee" text="Text" width="200">
        <handler event="oninit">
          assert.testCaseLabel = 'labeltoggle tests, fixed width';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,200,24,80,0);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,200,24,60,0);
        </handler>
      </labeltoggletest>
      
      <labeltoggletest type="coffee" text="Text" height="100">
        <handler event="oninit">
          assert.testCaseLabel = 'labeltoggle tests, fixed height';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,55,100,11,38);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,100,100,11,38);
        </handler>
      </labeltoggletest>
      
      
      <!-- checkbutton tests. -->
      <!-- Verify x, y, width, height, textx, texty -->
      <class name="checkbuttontest" extends="checkbutton" type="coffee">
        <method name="testsize" args="x,y,width,height,textx,texty">
          assert.closeTo(@x, x, 5, "x")
          assert.closeTo(@y, y, 5, "y")
          assert.closeTo(@width, width, 11, "width")
          assert.closeTo(@height, height, 11, "height")
          assert.closeTo(@textx, textx, 8, "textx")
          assert.closeTo(@texty, texty, 8, "texty")
        </method>
      </class>
      
      <checkbuttontest type="coffee" text="Text">
        <handler event="oninit">
          assert.testCaseLabel = 'checkbutton tests';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,60,24,24,0);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,100,24,24,0);
        </handler>
      </checkbuttontest>
      
      <checkbuttontest type="coffee" text="Text" width="200" height="100">
        <handler event="oninit">
          assert.testCaseLabel = 'checkbutton tests, fixed width and height';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,200,100,160,38);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,200,100,120,38);
        </handler>
      </checkbuttontest>
      
      <checkbuttontest type="coffee" text="Text" width="200">
        <handler event="oninit">
          assert.testCaseLabel = 'checkbutton tests, fixed width';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,200,24,160,0);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,200,24,120,0);
        </handler>
      </checkbuttontest>
      
      <checkbuttontest type="coffee" text="Text" height="100" foo="bar" bgcolor="green">
        <handler event="oninit">
          assert.testCaseLabel = 'checkbutton tests, fixed height';
          
          assert.equal(@text, 'Text');
          @testsize(0,0,60,100,24,38);
          
          @setAttribute('text', 'NewText');
          assert.equal(@text, 'NewText');
          @testsize(0,0,100,100,24,38);
        </handler>
      </checkbuttontest>
      
      <checkbutton name="notext" height="30" width="30"></checkbutton>
      
      <!-- Verify borders work cleanly. A circular event was occurring when
           a border was set without an explicit width. -->
      <checkbutton border="4">
        <handler event="oninit">
          assert.equal(this.border, 4);
          assert.equal(this.selected, false, 'Checkbutton was not initially selected.');
        </handler>
      </checkbutton>
      
      <!-- Verify a checkbox can be initially selected. -->
      <checkbutton border="4" selected="true">
        <handler event="oninit">
          assert.equal(this.border, 4);
          assert.equal(this.selected, true, 'Checkbutton was initially selected.');
        </handler>
      </checkbutton>
    </view>
  </screen>
</screens>
</composition>