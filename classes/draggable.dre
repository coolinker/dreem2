<!-- The MIT License (see LICENSE)
     Copyright (C) 2014-2015 Teem2 LLC -->
<!--/**
   * @mixin dr.draggable {UI Behavior}
   * Makes an dr.View draggable via the mouse.
   * 
   * Also supresses context menus since the mouse down to open it causes bad
   * behavior since a mouseup event is not always fired.
   */-->
<!--
  Private Attributes:
    __initMouseX:number The initial x location of the mouse relative to the viewport.
    __initMouseY:number The initial y location of the mouse relative to the viewport.
    __initLocX:number The initial x location of this view relative to the parent view.
    __initLocY:number The initial y location of this view relative to the parent view.
    __initAbsLocX:number The initial x location of the view relative to the viewport.
    __initAbsLocY:number The initial x location of the view relative to the viewport.
-->
<mixin name="draggable" with="mouseoveranddown">
  <!--// Life Cycle /////////////////////////////////////////////////////////-->
  <method name="initNode" args="parent, attrs">
    this.isdraggable = this.isdragging = this.centeronmouse = this.allowabort = false;
    this.distancebeforedrag = 0;
    this.dragaxis = 'both';
    
    // Will be set after init since the draggable subview(s) probably
    // don't exist yet.
    var isdraggable = true;
    if (attrs.isdraggable !== undefined) {
      isdraggable = attrs.isdraggable;
      delete attrs.isdraggable;
    }
    
    this.super();
    
    this.setAttribute('isdraggable', isdraggable);
  </method>


  <!--// Attributes /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {Boolean} isdraggable
    * Configures the view to be draggable or not.
    */-->
  <attribute name="isdraggable" type="boolean" value="true"/>
  <setter name="isdraggable" args="v">
    if (this.setActual('isdraggable', v, 'boolean', true)) {
      var func;
      if (this.isdraggable) {
        func = this.listenToPlatform.bind(this);
      } else if (this.initing === false) {
        func = this.stopListeningToPlatform.bind(this);
      }
      
      if (func) {
        var dvs = this.getDragViews();
        if (!Array.isArray(dvs)) dvs = [dvs];
        
        var dragview, i = dvs.length;
        while (i) {
          dragview = dvs[--i];
          func(dragview, 'onmousedown', '__doMouseDown');
          func(dragview, 'oncontextmenu', '__doContextMenu');
        }
      }
    }
  </setter>

  <!--/**
    * @attribute {Boolean} isdragging
    * Indicates that this view is currently being dragged.
    */-->
  <attribute name="isdragging" type="boolean" value="false"/>
  <setter name="isdragging" args="v">this.setActual('isdragging', v, 'boolean', false);</setter>

  <!--/**
    * @attribute {Boolean} allowabort
    * Allows a drag to be aborted by the user by pressing the 'esc' key.
    */-->
  <attribute name="allowabort" type="boolean" value="false"/>
  <setter name="allowabort" args="v">this.setActual('allowabort', v, 'boolean', false);</setter>

  <!--/**
    * @attribute {Boolean} centeronmouse
    * If true this draggable will update the draginitx and draginity to keep 
    * the view centered on the mouse.
    */-->
  <attribute name="centeronmouse" type="boolean" value="false"/>
  <setter name="centeronmouse" args="v">this.setActual('centeronmouse', v, 'boolean', false);</setter>

  <!--/**
    * @attribute {Number} distancebeforedrag
    * The distance, in pixels, before a mouse down and drag is considered a 
    * drag action.
    */-->
  <attribute name="distancebeforedrag" type="number" value="0"/>
  <setter name="distancebeforedrag" args="v">this.setActual('distancebeforedrag', v, 'number', 0);</setter>

  <!--/**
    * @attribute {String} dragaxis
    * Limits dragging to a single axis. Supported values: 'x', 'y', 'both'.
    */-->
  <attribute name="dragaxis" type="string" value="both"/>
  <setter name="dragaxis" args="v">this.setActual('dragaxis', v, 'string', 'both');</setter>

  <!--/** @overrides dr.disableable */-->
  <setter name="disabled" args="v">
    if (this.super) this.super();
    
    // When about to disable make sure isdragging is not true. This 
    // helps prevent unwanted behavior of a disabled view.
    if (this.disabled && this.isdragging) this.stopDrag(null, false);
  </setter>


  <!--// Methods ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method getDragViews
    * Returns an array of views that can be moused down on to start the
    * drag. Subclasses should override this to return an appropriate list
    * of views. By default this view is returned thus making the entire
    * view capable of starting a drag.
    * @returns {Array} 
    */-->
  <method name="getDragViews">
    return [this];
  </method>

  <!--/** @private */-->
  <method name="__doContextMenu">
    // Do nothing so the context menu event is supressed.
  </method>

  <!--/** @private */-->
  <method name="__doMouseDown" args="event">
    var absPosition = this.getAbsolutePosition();
    this.__initMouseX = event.x;
    this.__initMouseY = event.y;
    this.__initLocX = this.x;
    this.__initLocY = this.y;
    this.__initAbsLocX = absPosition.x;
    this.__initAbsLocY = absPosition.y;
    
    var gm = dr.global.mouse;
    this.listenToPlatform(gm, 'onmouseup', '__doMouseUp', true);
    if (this.distancebeforedrag > 0) {
      this.listenToPlatform(gm, 'onmousemove', '__doDragCheck', true);
    } else {
      this.startDrag(event);
    }
    
    dr.sprite.preventDefault(event);
    
    return true; // Allow platform event bubbling
  </method>

  <!--/** @private */-->
  <method name="__doMouseUp" args="event">
    if (this.isdragging) {
      this.stopDrag(event, false);
    } else {
      var gm = dr.global.mouse;
      this.stopListeningToPlatform(gm, 'onmouseup', '__doMouseUp', true);
      this.stopListeningToPlatform(gm, 'onmousemove', '__doDragCheck', true);
    }
    return true; // Allow platform event bubbling
  </method>

  <!--/** @private */-->
  <method name="__doDragCheck" args="event">
    var distance = dr.measureDistance(event.x, event.y, this.__initMouseX, this.__initMouseY);
    if (distance >= this.distancebeforedrag) {
      this.stopListeningToPlatform(dr.global.mouse, 'onmousemove', '__doDragCheck', true);
      this.startDrag(event);
    }
  </method>

  <!--/**
    * @method startDrag
    * Active until stopDrag is called. The view position will be bound
    * to the mouse position. Subclasses typically call this onmousedown for
    * subviews that allow dragging the view.
    * @param {Object} event The event the mouse event when the drag started.
    * @returns {void} 
    */-->
  <method name="startDrag" args="event">
    if (!this.disabled) {
      var g = dr.global;
      if (this.allowabort) this.listenTo(g.keys, 'onkeycodeup', '__watchForAbort');
      
      this.setAttribute('isdragging', true);
      this.listenToPlatform(g.mouse, 'onmousemove', 'updateDrag', true);
      this.updateDrag(event);
    }
  </method>

  <!--/**
    * @method updateDrag
    * Called on every mousemove event while dragging.
    * @returns {void} 
    */-->
  <method name="updateDrag" args="event">
    this.__requestDragPosition(event);
  </method>

  <!--/** @private */-->
  <method name="__requestDragPosition" args="mousePos">
    var x = mousePos.x - this.__initMouseX + this.__initLocX,
      y = mousePos.y - this.__initMouseY + this.__initLocY;
    
    if (this.centeronmouse) {
      x -= (this.boundswidth / 2) + this.__initAbsLocX - this.__initMouseX;
      y -= (this.boundsheight / 2)  + this.__initAbsLocY - this.__initMouseY;
    }
    
    this.updatePosition(x, y);
  </method>

  <!--/**
    * @method updatePosition
    * Repositions the view to the provided values. The default implementation
    * is to directly set x and y. Subclasses should override this method
    * when it is necessary to constrain the position.
    * @param {Number} x the new x position.
    * @param {Number} y the new y position.
    * @returns {void} 
    */-->
  <method name="updatePosition" args="x, y">
    if (!this.disabled) {
      var dragaxis = this.dragaxis;
      if (dragaxis !== 'y') this.setAttribute('x', x);
      if (dragaxis !== 'x') this.setAttribute('y', y);
    }
  </method>

  <!--/**
    * @method stopDrag
    * Stop the drag. (see startDrag for more details)
    * @param {Object} event The event that ended the drag.
    * @param {Boolean} isAbort Indicates if the drag ended normally or was aborted.
    * @returns {void} 
    */-->
  <method name="stopDrag" args="event, isAbort">
    var g = dr.global, gm = g.mouse;
    this.stopListeningToPlatform(gm, 'onmouseup', '__doMouseUp', true);
    this.stopListeningToPlatform(gm, 'onmousemove', 'updateDrag', true);
    this.stopListening(g.keys, 'onkeycodeup', '__watchForAbort');
    
    this.setAttribute('isdragging', false);
  </method>

  <!--/** @private */-->
  <method name="__watchForAbort" args="event">
    // Watch for ESC key
    if (event === 27) this.stopDrag(event, true);
  </method>

  <!--/**
    * @method getDistanceFromOriginalLocation
    * Gets the distance dragged from the location of the start of the drag.
    * @returns {Number} 
    */-->
  <method name="getDistanceFromOriginalLocation" args="x, y">
    return dr.measureDistance(this.x, this.y, this.__initLocX, this.__initLocY);
  </method>
</mixin>