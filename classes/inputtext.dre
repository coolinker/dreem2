<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
     * @class dr.inputtext {UI Components, Input}
     * @extends dr.view
     * Provides an editable input text field.
     *
     *     @example
     *     <spacedlayout axis="y" spacing="10"></spacedlayout>
     *
     *     <text text="Enter your name:"></text>
     *
     *     <inputtext id="nameinput" width="200"></inputtext>
     *
     *     <labelbutton text="submit">
     *       <handler event="onclick">
     *         welcome.setAttribute('text', 'Welcome ' + nameinput.text);
     *       </handler>
     *     </labelbutton>
     *
     *     <text id="welcome"></text>
     *
     * It's possible to listen for an onchange event to find out when the user changed the inputtext value:
     *
     *     @example
     *     <spacedlayout axis="y" spacing="10"></spacedlayout>
     *     <text text="Type some text below and press enter:"></text>
     *     <inputtext id="nameinput" width="200" onchange="alert('onchange event: ' + this.text)"></inputtext>
     *
     */-->
<class name="inputtext" extends="text" type="coffee"
  clickable="true" focusable="true" width="100"
>
  <!--// Accessors //-->
  <!--/**
    * @event onselect
    * Fired when an inputtext is selected
    * @param {dr.view} view The view that fired the event
    * 
    * @event onchange
    * Fired when an inputtext has changed
    * @param {dr.view} view The view that fired the event
    * 
    * @event onfocus
    * Fired when an inputtext is focused
    * @param {dr.view} view The view that fired the event
    * 
    * @event onblur
    * Fired when an inputtext is blurred or loses focus
    * @param {dr.view} view The view that fired the event
    * 
    * @event onkeydown
    * Fired when a key goes down
    * @param {Object} keys An object representing the keyboard state, including shiftKey, allocation, ctrlKey, metaKey, keyCode and type
    * 
    * @event onkeyup
    * Fired when a key goes up
    * @param {Object} keys An object representing the keyboard state, including shiftKey, allocation, ctrlKey, metaKey, keyCode and type
    * 
    * @event onrows
    * Fired the rows attribute changes.
    * @param {number} The number of rows displayed for multiline text input.
    *
    * @event onwrap
    * Fired the wrap attribute changes.
    * @param {string} The wrap behavior for multiline text input.
    */-->
  <attribute name="rows" type="number" value="3"/>
  
  <!-- Determines wether text will wrap or not. -->
  <attribute name="wrap" type="boolean" value="true"/>

  <attribute name="value" type="string" value=""/>
  <setter name="value" args="v">
    if @setActual('value', v, 'string', '')
      if this.text isnt this.value then @setActualAttribute('text', this.value)
  </setter>
  <setter name="text" args="text">
    @super()
    @setActualAttribute('value', this.text)
  </setter>

  <!-- A string containing characters that can be entered. -->
  <attribute name="allowedchars" type="string" value=""/>

  <!-- The maximum number of characters that can be entered. -->
  <attribute name="maxlength" type="number" value="-1"/>

  <!-- If true, this field will behave as a password field. -->
  <attribute name="password" type="boolean" value="false"/>
  <setter name="password" args="v">
    # Only allow the password property to be set during initialization since
    # runtime changes to the password property will have no effect on the
    # underlying platform object.
    if @initing then @setActual('password', v, 'boolean', false)
  </setter>

  <!--// Handlers //-->
  <handler event="onchange">
    return unless @replicator
    
    # attempt to coerce to the current type if it was a boolean or number (bad idea?)
    newdata = @text
    if (typeof @data is 'number')
      if parseFloat(newdata) + '' is newdata
        newdata = parseFloat(newdata)
    else if (typeof @data is 'boolean')
      if newdata is 'true'
        newdata = true
      else if newdata is 'false'
        newdata = false
    @replicator.updateData(newdata)
  </handler>

  <handler event="oninput" args="event">
    @setActualAttribute('value', @sprite.get_value());
  </handler>

  <!--// Methods //-->
  <method name="initNode" args="parent, attrs">
    # Use whichever attribute or aliased attribute is not the default and
    # delete the unnecessary initial value.
    if attrs.value isnt '' and attrs.text is ''
      delete attrs.text
    
    if attrs.text isnt '' and attrs.value is ''
      delete attrs.value
    
    @super()
    
    # Allow filtering of input
    @listenToPlatform(@, 'onkeypress', @__filterInputPress)
    
    # Make sure mouse interaction is handled here
    @listenToPlatform(@, 'onmousedown', @__captureMouse)
    @listenToPlatform(@, 'onmouseup', @__captureMouse)
    @listenToPlatform(@, 'onclick', @__captureMouse)
    @listenToPlatform(@, 'ondblclick', @__captureMouse)
    @listenToPlatform(@, 'onmousemove', @__captureMouse)
  </method>

  <method name="__captureMouse" args="platformEvent">
    # Do nothing
  </method>

  <method name="__filterInputPress" args="platformEvent">
    @sprite.filterInputPress(platformEvent)
  </method>

  <method name="createSprite" args="attrs">
    return new dr.sprite.InputText(this, attrs)
  </method>

  <method name="getCaretPosition">
    return @sprite.getCaretPosition()
  </method>

  <method name="setCaretPosition" args="start, end">
    return @sprite.setCaretPosition(start, end)
  </method>

  <method name="setCaretToStart">
    return @sprite.setCaretToStart()
  </method>

  <method name="setCaretToEnd">
    return @sprite.setCaretToEnd()
  </method>

  <method name="selectAll">
    return @sprite.selectAll()
  </method>

  <method name="getSelection">
    return @sprite.getSelection()
  </method>

  <method name="setSelection" args="selection">
    return @sprite.setSelection(selection)
  </method>

  <method name="clearSelection">
    return @sprite.clearSelection()
  </method>

  <method name="getSelectedText">
    return @sprite.getSelectedText()
  </method>
</class>
