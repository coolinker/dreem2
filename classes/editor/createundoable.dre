<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
  * @class dr.editor.createundoable {UI Components}
  * @extends dr.editor.undoable
  * An undoable that inserts a new node into a parent node.
  */-->
<class name="editor-createundoable" extends="editor-undoable"
  undodescription='Undo create.'
  redodescription='Redo create.'
>
  <!--// LIFE CYCLE /////////////////////////////////////////////////////////-->
  <!--/**
    * @method destroy
    * @overrides
    */-->
  <method name="destroy" args="parent, attrs">
    if (!this.isdone) this.target.destroy();
    this.super();
  </method>


  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {dr.AccessorSupport} [target]
    * The new node/view to add.
    */-->
  <attribute name="target" type="expression" value=""/>

  <!--/** Holds attribute values needed by previewer clients to create the new 
    * node/view. In the editor new node/views are created first and then an
    * undoable is created for them. In a previewer we actually have to create
    * the object so we need to know what attrs to use during instantiation.
    * This previewinfo object is what contains that information.
    */-->
  <attribute name="previewinfo" type="expression" value=""/>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method undo
    * @overrides
    * Removes the target from its parent.
    */-->
  <method name="undo" args="callback">
    if (this.done) {
      var target = this.target;
      if (target) {
        this._notFirstTime = true;
        this._targetParent = target.parent;
        if (target.isA(dr.View)) {
          this._targetWasVisible = target.visible;
          this._prevSibling = target.getPrevSiblingView();
          target.setAttribute('visible', false);
        }
        target.setAttribute('parent', null);
        target.pauseConstraints();
        return this.super();
      } else {
        dr.global.error.notifyWarn('invalidUndo', "No target provided to createundoable.");
      }
    } else {
      dr.global.error.notifyWarn('invalidUndo', "Invalid undo in createundoable.");
    }
    return this;
  </method>

  <!--/**
    * @method redo
    * @overrides
    * Inserts the target into the target parent.
    */-->
  <method name="redo" args="callback">
    if (this.done) {
      dr.global.error.notifyWarn('invalidRedo', "Invalid redo in createundoable.");
    } else {
      var target = this.target;
      if (target) {
        if (this._notFirstTime) {
          target.setAttribute('parent', this._targetParent);
          if (target.isA(dr.View)) {
            if (this._targetWasVisible === true) target.setAttribute('visible', true);
            if (this._prevSibling) {
              target.moveInFrontOf(this._prevSibling);
            } else {
              target.moveToBack();
            }
          }
          target.resumeConstraints();
        }
        return this.super();
      } else {
        dr.global.error.notifyWarn('invalidUndo', "No target provided to createundoable.");
      }
    }
    return this;
  </method>

  <!--/**
    * @method serialize
    * @overrides
    */-->
  <method name="serialize" args="obj">
    if (!obj) obj = {};
    
    // We need to know which parent to create the new object on.
    obj.parent = this.target.parent.id || null;
    
    // Store the attrs used for instantiation.
    obj.target = this.previewinfo || null;
    
    return this.super(obj);
  </method>

  <!--/**
    * @method deserialize
    * @overrides
    */-->
  <method name="deserialize" args="data">
    // Get parent to create new object on.
    var parent = dr.editor.undoable.retrieveById(data.parent);
    if (!parent) {
      dr.global.error.notifyWarn('deserialization', "Parent could not be found for createundoable: " + data.parent);
      return null;
    }
    
    // Create new instance on the parent using the previeinfo which was 
    // stored on data.target.
    var instance = parent.createChild(data.target);
    if (!instance) {
      dr.global.error.notifyWarn('deserialization', "Instance could not be found for createundoable: " + data.target);
      return null;
    }
    
    return this.super({target:instance});
  </method>
</class>
