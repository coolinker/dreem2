<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
  * @class dr.editor.undostack {UI Components}
  * @extends dr.node
  * Provides a stack of undoables that can be done/undone. As undoables
  * are done/undone a position in the stack is maintained.
  *
  * This object should be used to form the foundation of an undo/redo system
  * for an editor.
  *
  * @event onstackchange
  * Fired when the location of the stack changes
  * @param {Object} An object with a "type" property that indicates what
  * caused the stack change. Supported types are "undostack_reset", 
  * "undostack_do", "undostack_undo" and "undostack_redo". The do, undo and
  * redo types also have an "undoable" property which is a reference to the
  * undoable that caused the stack change.
  */-->
<class name="editor-undostack" extends="node"
  requires="editor-compoundundoable editor-attrundoable editor-orderundoable editor-createundoable editor-deleteundoable"
>
  <!--// LIFE CYCLE /////////////////////////////////////////////////////////-->
  <!--/**
    * @method initNode
    * @overrides
    * Initializes the undostack by calling reset.
    */-->
  <method name="initNode" args="parent, attrs">
    this.reset();
    this.super();
  </method>


  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <attribute name="isundoable" type="boolean" value="false"/>
  <attribute name="isredoable" type="boolean" value="false"/>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method reset
    * Clears out this undostack and destroys any undoables contained within
    * the undostack at the time of this method call.
    * @returns {this}
    */-->
  <method name="reset">
    var stack = this.__stack || (this.__stack = []);
    while (stack.length) stack.pop().destroy();
    this.__stackLoc = -1;
    this.__syncUndoabilityAttrs();
    this.__fireStackChangeEvent({type:'undostack_reset'});
    return this;
  </method>

  <!--/**
    * Fires an onstackchange event whenever the location in the stack changes.
    * @method __fireStackChangeEvent
    * @private
    */-->
  <method name="__fireStackChangeEvent" args="infoObj">
    infoObj.stackloc = this.__stackLoc;
    this.sendEvent('onstackchange', infoObj);
  </method>

  <!--/**
    * @method __syncUndoabilityAttrs
    * @private
    */-->
  <method name="__syncUndoabilityAttrs">
    this.setAttribute('isundoable', this.canUndo());
    this.setAttribute('isredoable', this.canRedo());
  </method>

  <!--/**
    * @method canUndo
    * Determines if there is anything to undo based on the current location
    * within the undo stack. If the current stack location is at the start
    * then there is nothing to be undone.
    * @returns {Boolean}
    */-->
  <method name="canUndo">
    return this.__stackLoc >= 0;
  </method>

  <!--/**
    * @method canRedo
    * Determines if there is anything to redo based on the current location
    * within the undo stack. If the current stack location is at the end
    * then there is nothing to be done.
    * @returns {Boolean}
    */-->
  <method name="canRedo">
    return this.__stack.length - 1 > this.__stackLoc;
  </method>

  <!--/**
    * @method getUndoDescription
    * Gets the human readable undo description of the undoable that will be
    * executed if the undo method of this undostack is called.
    * @returns {String}
    */-->
  <method name="getUndoDescription">
    if (this.canUndo()) {
      return this.__stack[this.__stackLoc].getUndoDescription();
    } else {
      return '';
    }
  </method>

  <!--/**
    * @method getRedoDescription
    * Gets the human readable redo description of the undoable that will be
    * executed if the redo method of this undostack is called.
    * @returns {String}
    */-->
  <method name="getRedoDescription">
    if (this.canRedo()) {
      return this.__stack[this.__stackLoc + 1].getRedoDescription();
    } else {
      return '';
    }
  </method>

  <!--/**
    * @method __handleError
    * @private
    */-->
  <method name="__handleError" args="errorHandler, msg">
    if (errorHandler && typeof errorHandler === 'function') {
      errorHandler(msg);
    } else {
      dr.global.error.logWarn(msg);
    }
  </method>

  <!--/**
    * @method do
    * Adds the undoable to this stack at the current location and immediately
    * does that undoable. Also removes and destroys any undoables that exist
    * at or after this location in the undo stack.
    *
    * If the attempt to do the undoable triggers an error the undoable will
    * have its undo method called and the undoable will not be added to the
    * undostack.
    *
    * Undoables already in the done state will be rejected and the errorHandler
    * (if provided) will be executed.
    *
    * @param {dr.editor.undoable} undoable The undoable to add.
    * @param {Function} callback An optional argument that if provided will
    * be called when the provided undoable is succesfully done. The callback
    * is executed only once, not every time the undoable is redone. The
    * undoable is provided as an argument to the callback.
    * @param {Function} errorHandler An optional argument that if provided will
    * be called if an error occurs trying to do add or do the undoable. An
    * error object is provided to the callback which may consist of a msg and
    * stacktrace, or a native error object.
    * @returns {Boolean} Indicates if the undoable was added succesfully or
    * not.
    */-->
  <method name="do" args="undoable, callback, errorHandler">
    if (this.__executingUndoable) {
      this.__handleError(errorHandler, {msg:'Prevent undostack loops in do method.'});
    } else if (!undoable || undoable.done) {
      this.__handleError(errorHandler, {msg:'Undoable already done.'});
    } else {
      var error = this.__executeUndoable(undoable, callback, true);
      if (error) {
        // Rollback since an error occurred.
        var undoError = this.__executeUndoable(undoable, callback, false);
        this.__handleError(errorHandler, error);
        if (undoError) this.__handleError(errorHandler, undoError);
      } else {
        ++this.__stackLoc;
        var stack = this.__stack,
          loc = this.__stackLoc;
        while (stack.length > loc) stack.pop().destroy();
        stack.push(undoable);
        this.__syncUndoabilityAttrs();
        this.__fireStackChangeEvent({type:'undostack_do', undoable:undoable});
        return true;
      }
    }
    return false;
  </method>

  <!--/**
    * @method undo
    * Executes the undo method of the undoable at the current undo stack 
    * location.
    *
    * If the attempt to undo the undoable triggers an error the errorHandler
    * (if provided) will be executed.
    *
    * @param {Function} callback An optional argument that if provided will
    * be called when the current undoable is succesfully undone. The callback
    * is executed only once, not every time the undoable is undone. The
    * undoable is provided as an argument to the callback.
    * @param {Function} errorHandler An optional argument that if provided will
    * be called if an error occurs trying undo the undoable. An error object is 
    * provided to the callback which may consist of a msg and stacktrace, or 
    * a native error object.
    * @returns {Boolean} Indicates if the undoable was successfully 
    * undone or not.
    */-->
  <method name="undo" args="callback, errorHandler">
    if (this.__executingUndoable) {
      this.__handleError(errorHandler, {msg:'Prevent undostack loops in undo method.'});
    } else if (this.canUndo()) {
      var undoable = this.__stack[this.__stackLoc--],
        error = this.__executeUndoable(undoable, callback, false);
      if (error) {
        ++this.__stackLoc;
        this.__handleError(errorHandler, error);
      } else {
        this.__syncUndoabilityAttrs();
        this.__fireStackChangeEvent({type:'undostack_undo', undoable:undoable});
        return true;
      }
    }
    return false;
  </method>

  <!--/**
    * @method redo
    * Executes the redo method of the undoable at the current undo stack 
    * location.
    *
    * If the attempt to redo the undoable triggers an error the errorHandler
    * (if provided) will be executed.
    *
    * @param {Function} callback An optional argument that if provided will
    * be called when the current undoable is succesfully done. The callback
    * is executed only once, not every time the undoable is done. The
    * undoable is provided as an argument to the callback.
    * @param {Function} errorHandler An optional argument that if provided will
    * be called if an error occurs trying redo the undoable. An error object is 
    * provided to the callback which may consist of a msg and stacktrace, or 
    * a native error object.
    * @returns {Boolean} Indicates if the undoable was successfully done or not.
    */-->
  <method name="redo" args="callback, errorHandler">
    if (this.__executingUndoable) {
      this.__handleError(errorHandler, {msg:'Prevent undostack loops in redo method.'});
    } else if (this.canRedo()) {
      var undoable = this.__stack[++this.__stackLoc],
        error = this.__executeUndoable(undoable, callback, true);
      if (error) {
        --this.__stackLoc;
        this.__handleError(errorHandler, error);
      } else {
        this.__syncUndoabilityAttrs();
        this.__fireStackChangeEvent({type:'undostack_redo', undoable:undoable});
        return true;
      }
    }
    return false;
  </method>

  <!--/**
    * @method __executeUndoable
    * @private
    * Executes the undoable and returns an error if one occured.
    */-->
  <method name="__executeUndoable" args="undoable, callback, isRedo">
    // Prevent undo/redo from recursively modifying the undostack.
    this.__executingUndoable = true;
    
    // Listen for expected errors while doing the undoable.
    var error,
      expectedErrorHandler = new dr.Eventable(null, [{
        handleError: function(event) {error = event;}
      }]);
    expectedErrorHandler.listenTo(dr.global.error, 'onall', 'handleError');
    
    // Do the undoable
    try {
      if (isRedo) {
        undoable.redo(callback);
      } else {
        undoable.undo(callback);
      }
    } catch (err) {
      // Catch unexpected errors
      error = err;
    }
    
    expectedErrorHandler.destroy();
    
    this.__executingUndoable = false;
    
    return error;
  </method>
</class>
