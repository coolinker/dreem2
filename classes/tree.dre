<!-- The MIT License (MIT)

Copyright ( c ) 2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->

<!--/**
   * @class dr.tree {UI Components}
   * @extends dr.view
   * An visual component whose state represents a node in a tree structure.  Trees will try to interpret many different
   * data formats, but the preferred is an array of objects that have a "label" text property and optionally an "nodes"
   * property which can contain more nodes.  The simplest example, for example, might look like this:
   * `[{"label":"first node", "nodes": [{"label":"inner node"}], {"label":"second top node"}]`
   *
   *     @example
   *
   *     <tree name="simple" height="200" width="200" border="1" bordercolor="#eee"
   *      data='[{"label":"first", "items": [1, 2, 3]}]'></tree>
   *
   */-->
<class name="tree" extends="view" x="${(this.depth() - 1) * this.indentwidth}" clip="false">

  <attribute name="multiselect" type="boolean" value="false"></attribute>

  <method name="isroot">
    return this.treeroot() === this;
  </method>

  <method name="treeroot">
    if (this.parent && this.parent.treeroot) {
      return this.parent.treeroot();
    }
    return this;
  </method>

  <attribute name="indentwidth" type="number" value="10"></attribute>

  <method name="depth">
    if (this.parent.depth) {
      return this.parent.depth() + 1;
    }
    return 0;
  </method>

  <method name="populate">
    if (this.populated) {
      this.setAttribute('populated', false);
    }
    this.setAttribute('populating', true);

    var d = this.data;
    if (typeof(d) === 'string' && ((d[0] == '[' && d[d.length - 1] == ']') || (d[0] == '{' && d[d.length - 1] == '}'))) {
      try {
        d = this.data = JSON.parse(d);
      } catch (e) {
        console.log('String looked like JSON but had error parsing', e, d);
      }
    }
    if (typeof(d) === 'number') {
      d = d.toString();
    }

    if (this.isroot()) {
      this.toggle.setAttribute('visible', false)
    }

    if (typeof(d) === 'string') {
      this.label.setAttribute('text', d);
    } else if (!Array.isArray(d)) {
      if (d.title) {
        this.label.setAttribute('text', d.title)
      } else if (d.label) {
        this.label.setAttribute('text', d.label)
      } else if (d.text) {
        this.label.setAttribute('text', d.text)
      } else if (d.name) {
        this.label.setAttribute('text', d.name)
      } else {
        this.label.setAttribute('visible', false);
      }

      if (Array.isArray(d.items)) {
        d = d.items;
      } else if (Array.isArray(d.nodes)) {
        d = d.nodes;
      } else { //be fancy
        var found = [];
        var props = Object.getOwnPropertyNames(d);
        for (var i=0; i < props.length; i++) {
          var name = props[i];
          if (name == 'title' || name == 'text' || name == 'label' || name == 'name') {
            continue;
          }
          var value = d[name];
          if (!Array.isArray(value)) {
            value = [value];
          }
          found.push({name:name, items:value})
        }
        if (found.length) {
          d = found;
        }
      }
    }

    if (d.title) {
      this.label.setAttribute('text', d.title)
    } else if (d.label) {
      this.label.setAttribute('text', d.label)
    } else if (d.text) {
      this.label.setAttribute('text', d.text)
    } else if (d.name) {
      this.label.setAttribute('text', d.name)
    }

    if (Array.isArray(d)) {
      this.nodes.setAttribute('data', d);
    }

    this.setAttribute('populating', false);
    this.setAttribute('populated', true)
  </method>

  <method name="__resizeToChildren">
    var childheight = 0;
    var childwidth = 0;

    for (var i =0; i < this.subviews.length; i++) {
      var child = this.subviews[i];
      if (child.__resizeToChildren) {
        child.__resizeToChildren();
      }
      if (child.visible){
        childheight = Math.max(childheight, child.y + child.height);
        childwidth = Math.max(childwidth, child.x + child.width)
      }
    }
    this.setAttribute('height', childheight);
    this.setAttribute('width', childwidth);
  </method>

  <attribute name="populated" type="boolean" value="false"></attribute>
  <attribute name="data" type="object" value=""></attribute>
  <handler event="ondata,oninit" method="populate"></handler>

  <attribute name="selectcolor" type="color" value="#eee"></attribute>

  <attribute name="selected" type="boolean" value="false"></attribute>
  <handler event="onselected">
    if (this.selected) {
      this.label.setAttribute('bgcolor', this.selectcolor)
    } else {
      this.label.setAttribute('bgcolor', 'transparent')
    }
  </handler>

  <method name="clearSelection">
    this.setAttribute('selected', false);
    for (var i = 0; i < this.subviews.length; i++) {
      var subview = this.subviews[i];
      if (subview.clearSelection) {
        subview.clearSelection();
      }
    }
  </method>

  <attribute name="collapsed" type="boolean" value="false"></attribute>
  <handler event="oncollapsed">
    this.__setToggleRotation();
    if (this.nodes.children) {
      for (var i = 0; i < this.nodes.children.length; i++) {
        var child = this.nodes.children[i];
        child.setAttribute('visible', !this.collapsed)
      }
      this.__resizeToChildren();
      var parent = this.parent;
      while (parent) {
        if (parent.__resizeToChildren) {
          parent.__resizeToChildren();
        }
        parent = parent.parent;
      }
    }
  </handler>

  <method name="__setToggleRotation">
    if (this.collapsed) {
      this.toggle.setAttribute('rotation', -135);
    } else {
      this.toggle.setAttribute('rotation', -45);
    }
  </method>

  <indicator name="toggle" fill="${this.parent.bordercolor}" visible="false"
    x="0" y="${this.parent.label.height / 2 - this.height / 2}"
    rotation="-45" fill="#333">
    <handler event="onclick">
      this.parent.setAttribute('collapsed', !this.parent.collapsed)
    </handler>
  </indicator>
  <text name="label" text="" clickable="true" y="0" x="${this.parent.toggle.width + this.parent.indentwidth}">
    <handler event="onclick">
      this.parent.setAttribute('selected', !this.parent.selected)
    </handler>
  </text>

  <replicator name="nodes" classname="tree">
    <handler event="onreplicated" args="r">
      this.parent.toggle.setAttribute('visible', (r.children.length > 0));

      for (var i = 0; i < r.children.length; i++) {
        var child = r.children[i];
        child.__resizeToChildren();
        child.setAttribute('name', 'treenode_' + i);
        if (i) {
          var lastChild = i - 1;
          child.setAttribute('y', '${this.parent.treenode_' + lastChild + '.y + this.parent.treenode_' + lastChild + '.height}');
        } else {
          child.setAttribute('y', '${this.parent.label.height}');
        }
      }

      this.parent.__resizeToChildren();
    </handler>
  </replicator>


</class>
