<!-- The MIT License (see LICENSE)
     Copyright (C) 2014-2015 Teem2 LLC -->
<!--/**
  * @class dr.editor.modelattrundoable {UI Components}
  * @extends dr.editor.undoable
  * An attr undoable that only updates the model
  */-->
<class name="editor-modelattrundoable" extends="editor-undoable"
  undodescription='Undo change {0} from "{1}" to "{2}".'
  redodescription='Redo change {0} from "{1}" to "{2}".'
>
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <attribute name="target" type="expression" value=""></attribute>

  <attribute name="attribute" type="string" value="x"></attribute>

  <attribute name="oldvalue" type="expression" value="undefined"></attribute>

  <attribute name="newvalue" type="expression" value="undefined"></attribute>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <method name="setAttribute" args="attrName, value">
    if ((attrName === 'oldvalue' || attrName === 'newvalue') && this.attribute !== 'parent') {
      var cfgAttrName = dr.AccessorSupport.generateConfigAttrName(attrName);
      if (value !== 'undefined') value = '"' + ('' + value).split('"').join('\\"') + '"';
      if (this[cfgAttrName] !== value) {
        this[cfgAttrName] = value;
        this.setActualAttribute(attrName, value);
      }
      return this;
    } else {
      return this.super();
    }
  </method>

  <method name="getUndoDescription">
    return this.__getDescription(this.super());
  </method>

  <method name="getRedoDescription">
    return this.__getDescription(this.super());
  </method>

  <method name="__getDescription" args="template">
    return dr.fillTextTemplate(template, this.attribute, this.oldvalue, this.newvalue);
  </method>

  <method name="undo" args="callback">
    if (this.done) {
      var target = this.target,
        attrName = this.attribute;
      editormodel.updateAttr(target.id || target.getRoot().id, attrName, this.oldvalue);
      if (attrName === 'with') behaviors_panel.refresh(target);
    } else {
      dr.global.error.notifyWarn('invalidUndo', "Invalid undo in modelattrundoable.");
    }
    return this.super();
  </method>

  <method name="redo" args="callback">
    if (this.done) {
      dr.global.error.notifyWarn('invalidRedo', "Invalid redo in modelattrundoable.");
    } else {
      var target = this.target,
        attrName = this.attribute;
      
      // Record oldvalue one time only just before applying the new value.
      if (!this.__storedOldValue && this.oldvalue === undefined) {
        this.setAttribute('oldvalue', editormodel.getAttrValue(target, attrName));
        this.__storedOldValue = true;
      }
      
      editormodel.updateAttr(target.id || target.getRoot().id, attrName, this.newvalue);
      if (attrName === 'with') behaviors_panel.refresh(target);
    }
    return this.super();
  </method>
</class>
