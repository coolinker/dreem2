<!--
Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->
<class name="texteditor" extends="editor_inputtext" height="20">
  <setter name="value" args="v">
    // Clean up some common constraint patterns
    switch (this.targetattr) {
      case 'x':
        if (v === '${this.boundsxdiff}') {
          v = 'left';
        } else if (v === '${((this.parent.innerwidth - this.boundswidth) / 2) + this.boundsxdiff}') {
          v = 'center';
        } else if (v === '${this.parent.innerwidth - this.boundswidth + this.boundsxdiff}') {
          v = 'right';
        } else {
          var percent = this._parseAsPercentConstraint(v, 'innerwidth');
          if (percent !== undefined) v = percent + '%';
        }
        break;
      case 'y':
        if (v === '${this.boundsydiff}') {
          v = 'top';
        } else if (v === '${((this.parent.innerheight - this.boundsheight) / 2) + this.boundsydiff}') {
          v = 'middle';
        } else if (v === '${this.parent.innerheight - this.boundsheight + this.boundsydiff}') {
          v = 'bottom';
        } else {
          var percent = this._parseAsPercentConstraint(v, 'innerheight');
          if (percent !== undefined) v = percent + '%';
        }
        break;
      case 'width':
        var percent = this._parseAsPercentConstraint(v, 'innerwidth');
        if (percent !== undefined) v = percent + '%';
        break;
      case 'height':
        var percent = this._parseAsPercentConstraint(v, 'innerheight');
        if (percent !== undefined) v = percent + '%';
        break;
    }
    return this.super(v);
  </setter>
  <method name="_parseAsPercentConstraint" args="value, innerAttr">
    var prefix = '${this.parent.' + innerAttr + ' * ';
    if (typeof value === 'string' && value.startsWith(prefix) && value.endsWith('}')) {
      value = Number(value.substring(prefix.length, value.length - 1));
      if (!isNaN(value)) return value * 100;
    }
  </method>
  <handler event="onfocus">
    this.oldvalue = this.text;
  </handler>
  <handler event="onvalue" args="value">
    // Reset the oldvalue whenever an external update occurs.
    if (this._isSync) this.oldvalue = value;
  </handler>
  <handler event="onkeydown" args="platformEvent">
    var keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent);
    if (keyCode === 13 && !this.multiline) this._applyChange();
  </handler>
  <handler name="_applyChange" event="onblur">
    if (!this.isBeingDestroyed) {
      var oldvalue = this.oldvalue, 
        newvalue = this.value;
      
      if (oldvalue !== newvalue) {
        var target = this.target,
          targetAttr = this.targetattr;
        
        // If attribute is layout locked then revert
        if (target.isA(dr.View) && target.__layoutDomainInUseForView(targetAttr)) {
          this.setActualAttribute('value', oldvalue);
          messages.addMessage('Your change to attribute "' + targetAttr + '" was reverted because a layout is already managing it.');
        } else {
          actions.do(new dr.editor.editorattrundoable({
            target:target, attribute:targetAttr, oldvalue:oldvalue, newvalue:newvalue
          }));
          this.oldvalue = newvalue;
        }
      }
    }
  </handler>
</class>


<class name="booleaneditor" height="20">
  <handler event="onvalue" args="value">
    this.field.setActualAttribute('selected', value);
  </handler>
  <checkbox name="field" checkcolor="#999999" y="2">
    <handler event="onselected" args="selected">
      var parent = this.parent,
        targetattr = parent.targetattr,
        target = parent.target;
      if (!parent._isSync && target && ('' + target['__cfg_' + targetattr]) !== ('' + selected)) {
        actions.do(new dr.editor.editorattrundoable({
          target:target, attribute:targetattr, newvalue:selected
        }));
      }
    </handler>
  </checkbox>
</class>


<class name="listvieweditor" height="20">
  <handler event="onvalue" args="value">
    this.field.setAttribute('selecteditem', this.field._getConfigAttrsByName(value));
  </handler>
  
  <method name="initNode" args="parent, attrs">
    var cfg = attrs.cfg,
      floatingpanelid = attrs.floatingpanelid;
    delete attrs.cfg;
    delete attrs.floatingpanelid;
    
    this.super();
    
    this.field.setAttribute('floatingpanelid', floatingpanelid);
    this.field.cfg = cfg;
  </method>
  
  <listviewbutton name="field" y="3" listviewattrs="{maxheight:340}">
    <attribute name="selecteditem" type="expression" value="null"/>
    <handler event="onselecteditem" args="selecteditem">
      if (selecteditem) this.setActualAttribute('label', selecteditem.text);
    </handler>
    
    <method name="_getConfigAttrsByName" args="name">
      if (name) {
        var cfg = this.cfg, i = cfg.length, attrs;
        while (i) {
          attrs = cfg[--i].attrs;
          if (attrs && attrs.name === name) return attrs;
        }
      }
    </method>
    
    <method name="doActivated">
      var cfg = this.cfg,
        i = cfg.length, attrs, 
        selecteditemname = this.selecteditem.name;
      while (i) {
        attrs = cfg[--i].attrs;
        if (attrs) attrs.disabled = attrs.name === selecteditemname;
      }
      this.setActualAttribute('itemconfig', cfg.concat()); // Concat to work around equality test.
      this.toggleFloatingPanel();
    </method>
    
    <method name="doItemActivated" args="itemview">
      this.setActualAttribute('selecteditem', itemview);
      
      this.super();
      
      var newvalue = itemview.name,
        parent = this.parent,
        targetattr = parent.targetattr,
        target = parent.target;
      if (!parent._isSync && target && ('' + target['__cfg_' + targetattr]) !== ('' + newvalue)) {
        actions.do(new dr.editor.editorattrundoable({
          target:target, attribute:targetattr, newvalue:newvalue
        }));
      }
    </method>
  </listviewbutton>
</class>


<class name="coloreditor" with="floatingpanelanchor, button"
  floatingalign="insideright" floatingvalign="outsidebottom" floatingvalignoffset="2"
  border="1" bordercolor="#eeeeee" height="18" cornerradius="3"
  bgcolor="transparent"
  floatingpanelid="colorpicker"
>
  <method name="showFocusEmbellishment">
    this.sprite.hideFocusEmbellishment();
    this.setActualAttribute('boxshadow', config.boxshadow_normal);
  </method>
  <method name="hideFocusEmbellishment">
    this.setActualAttribute('boxshadow', null);
  </method>
  <method name="destroy">
    this.hideFloatingPanel();
    this.super();
  </method>
  
  <method name="doActivated">
    var fp = this.getFloatingPanel();
    if (fp) {
      this.toggleFloatingPanel();
      var value = this.target.getActualAttribute(this.targetattr);
      // FIXME: this needs to deal with 'transparent' and 'inherit' correctly.
      if (!value) value = '#000000'; // Default to black if no actual value exists.
      fp.setAttribute('color', value);
      this.oldvalue = fp.rgbaColor();
    }
  </method>

  <handler event="onvalue" args="value">
    this.colorview.setActualAttribute('bgcolor', value);
    if (this.target && !this._isSync) this.target.setAttribute(this.targetattr, value); // No need to update model since notifyPanelHidden does that
  </handler>

  <method name="notifyPanelHidden" args="panel">
    if (this.oldvalue !== this.value) {
      actions.do(new dr.editor.editorattrundoable({
        target:this.target, attribute:this.targetattr, oldvalue:this.oldvalue, newvalue:this.value
      }));
    }
  </method>
  
  <method name="getNextFocusAfterPanel" args="panelId">
    var nsv = this.parent.getNextSiblingView();
    return nsv && nsv.field ? nsv.field : this;
  </method>

  <bitmap x="0" y="0" width="100%" height="100%" repeat="repeat" stretches="none" cornerradius="${this.parent.cornerradius}" src="/editor/img/transparent_pattern.png" />
  <view name="colorview" x="0" y="0" width="100%" height="100%" cornerradius="${this.parent.cornerradius}"></view>

</class>

<class name="fonteditor" with="floatingpanelanchor, button"
  floatingalign="insideright" floatingvalign="outsidebottom" floatingvalignoffset="2"
  border="1" bordercolor="#eeeeee" height="20" cornerradius="3"
  floatingpanelid="fontpicker" focusembellishment="false"
>
  <method name="destroy">
    this.hideFloatingPanel();
    this.super();
  </method>

  <method name="doActivated">
    this.oldvalue = this.target[this.targetattr];
    var fp = this.getFloatingPanel();
    if (fp) {
      this.toggleFloatingPanel();
    }
  </method>

  <handler event="onvalue" args="value">
    if (this.target && !this._isSync) this.target.setAttribute(this.targetattr, value); // No need to update model since notifyPanelHidden does that
  </handler>

  <method name="notifyPanelHidden" args="panel">
    if (this.oldvalue !== this.value) {
      actions.do(new dr.editor.editorattrundoable({
        target:this.target, attribute:this.targetattr, oldvalue:this.oldvalue, newvalue:this.value
      }));
    }
  </method>

  <method name="getNextFocusAfterPanel" args="panelId">
    var nsv = this.parent.getNextSiblingView();
    return nsv && nsv.field ? nsv.field : this;
  </method>
  <text y="2" x="2" text="${this.parent.value}" fontsize="14" fontfamily="${this.parent.value}"></text>
</class>

<class name="attributeeditor" height="auto" width="100%">
  <method name="initNode" args="parent, attrs">
    this.super();
    
    var self = this,
      data = this.data,
      targetAttrName = data.name,
      type = data.type,
      target = data.target,
      readonly = data.readonly,
      attrs = {
        name:'field',
        x:config.attribute_label_width + 4, // 4 pixel spacing
        target:target, 
        targetattr:targetAttrName,
        disabled:readonly
      };

    switch (type) {
      case 'color':
        attrs.class = 'coloreditor'
        break;
      case 'boolean':
        attrs.class = 'booleaneditor';
        break;
      case 'motion':
        attrs.class = 'listvieweditor';
        attrs.floatingpanelid = 'motions';
        attrs.cfg = [
          {attrs:{name:'linear', text:'linear'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inQuad', text:'Quadratic in'}},
          {attrs:{name:'outQuad', text:'Quadratic out'}},
          {attrs:{name:'inOutQuad', text:'Quadratic in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inCubic', text:'Cubic in'}},
          {attrs:{name:'outCubic', text:'Cubic out'}},
          {attrs:{name:'inOutCubic', text:'Cubic in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inQuart', text:'Quartic in'}},
          {attrs:{name:'outQuart', text:'Quartic out'}},
          {attrs:{name:'inOutQuart', text:'Quartic in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inQuint', text:'Quintic in'}},
          {attrs:{name:'outQuint', text:'Quintic out'}},
          {attrs:{name:'inOutQuint', text:'Quintic in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inSine', text:'Sine in'}},
          {attrs:{name:'outSine', text:'Sine out'}},
          {attrs:{name:'inOutSine', text:'Sine  in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inExpo', text:'Exponential in'}},
          {attrs:{name:'outExpo', text:'Exponential out'}},
          {attrs:{name:'inOutExpo', text:'Exponential in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inCirc', text:'Circular in'}},
          {attrs:{name:'outCirc', text:'Circular out'}},
          {attrs:{name:'inOutCirc', text:'Circular in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inElastic', text:'Elastic in'}},
          {attrs:{name:'outElastic', text:'Elastic out'}},
          {attrs:{name:'inOutElastic', text:'Elastic in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inBack', text:'Back in'}},
          {attrs:{name:'outBack', text:'Back out'}},
          {attrs:{name:'inOutBack', text:'Back in &amp; out'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'inBounce', text:'Bounce in'}},
          {attrs:{name:'outBounce', text:'Bounce out'}},
          {attrs:{name:'inOutBounce', text:'Bounce in &amp; out'}}
        ];
        break;
      case 'string':
        if (targetAttrName === 'text') {
          attrs.multiline = true;
          attrs.wrap = false;
          attrs.height = 'auto';

        } else if (targetAttrName === 'fontfamily') {
          attrs.class = 'fonteditor'
          break;
        }
        // Fall through to default
      default:
        attrs.class = 'texteditor';
        if (readonly) {
          attrs.bgcolor = 'transparent';
          attrs.bordercolor = 'transparent';
        }
        var aval = target.getAttribute(targetAttrName);
        if (typeof(aval) === 'string' && /^\$\{.*\}$/.test(aval)) {
          attrs.color = 'green'
        }

        break;
    }
    
    var child = this.createChild(attrs);

    // Text may look like a constraint so call setActualAttribute rather than
    // setAttribute to work around constraint binding.
    child.setActualAttribute('value', target.getAttribute(targetAttrName));
    
    // update when selected item's value changes
    child.listenTo(target, 'on__cfg_' + targetAttrName, function(val) {
      this._isSync = true;
      this.setActualAttribute('value', val);
      self._checkActualIsDifferent();
      this._isSync = false;
    });
    
    child.syncTo(this, 'oninnerwidth', function(w) {
      this.setActualAttribute('width', w - this.x - self.actual.width - 8); // 8 is 4 pixel spacing before and after
    });
    
    // Setup actual value for all attributes except motion since there is no
    // point in showing the text content of a function.
    if (type !== 'motion') {
      this.actual.syncTo(target, 'on' + targetAttrName, function(val) {
        // Allow at most 2 decimal places to be shown for "actual" numbers.
        if (type === 'number') val = +(+(val || 0).toFixed(2));
        this.setActualAttribute('text', val);
        self._checkActualIsDifferent();
      });
    }

    var labelText = targetAttrName;
    if (this.data && this.data.editorname) {
      labelText = this.data.editorname;
    }
    labelText = labelText.charAt(0).toUpperCase() + labelText.slice(1)

    this.label.setActualAttribute('text', labelText);
  </method>
  
  <method name="_checkActualIsDifferent">
    var actual = this.actual;
    actual.setActualAttribute('visible', '' + this.field.value !== actual.text);
  </method>

  <editor_text name="label" width="${config.attribute_label_width}" y="3" textalign="right"/>
  <editor_text name="actual" x="${this.parent.innerwidth - this.width - 4}" y="3" width="60"/><!-- 4 pixel spacing -->
</class>