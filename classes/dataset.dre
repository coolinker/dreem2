<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<!--/**
  * @class dr.dataset {Data}
  * @extends dr.node
  * Datasets hold onto a set of JSON data, either inline or loaded from a URL.
  * They are used with lz.replicator for data binding.
  *
  * This example shows how to create a dataset with inline JSON data, and use a replicator to show values inside. Inline datasets are useful for prototyping, especially when your backend server isn't ready yet:
  *
  *     @example wide
  *     <dataset name="example">
  *      {
  *        "store": {
  *          "book": [
  *            {
  *              "category": "reference",
  *              "author": "Nigel Rees",
  *              "title": "Sayings of the Century",
  *              "price": 8.95
  *            },
  *            {
  *              "category": "fiction",
  *              "author": "Evelyn Waugh",
  *              "title": "Sword of Honour",
  *              "price": 12.99
  *            },
  *            {
  *              "category": "fiction",
  *              "author": "Herman Melville",
  *              "title": "Moby Dick",
  *              "isbn": "0-553-21311-3",
  *              "price": 8.99
  *            },
  *            {
  *              "category": "fiction",
  *              "author": "J. R. R. Tolkien",
  *              "title": "The Lord of the Rings",
  *              "isbn": "0-395-19395-8",
  *              "price": 22.99
  *            }
  *          ],
  *          "bicycle": {
  *            "color": "red",
  *            "price": 19.95
  *          }
  *        }
  *      }
  *     </dataset>
  *     <spacedlayout axis="y" spacing="5"></spacedlayout>
  *     <replicator classname="text" datapath="$example/store/book[*]/title"></replicator>
  *
  * Data can be loaded from a URL when your backend server is ready, or reloaded to show changes over time:
  *
  *     @example wide
  *     <dataset name="example" url="/examples/data/example.json"></dataset>
  *     <spacedlayout axis="y" spacing="5"></spacedlayout>
  *     <replicator classname="text" datapath="$example/store/book[*]/title"></replicator>
  */-->
<class name="dataset" type="coffee" extends="node" scriptincludes="lib/json.async.js">
  <attribute name="datasets" type="expression" value="{}" allocation="class"></attribute>

  <!--/**
    * @attribute {String} name (required)
    * The name of the dataset
    */-->
  <setter name="name" args="name">
    if not @initing then @_storeByName(name, @name)
    return name
  </setter>

  <!--/**
    * @attribute {Object} data
    * The data inside the dataset
    */-->
  <attribute name="data" type="expression" value="undefined"></attribute>

  <!--/**
    * @attribute {String} url
    * The url to load JSON data from.
    */-->
  <attribute name="url" type="string" value=""></attribute>

  <!--/**
    * @attribute {Boolean} [async=false]
    * If true, parse json in a worker thread
    */-->
  <attribute name="async" value="true" type="boolean"></attribute>

  <setter name="$textcontent" args="textcontent">
    textcontent = textcontent?.trim()
    if textcontent?
      @setAttribute('data', JSON.parse(textcontent))
    return textcontent
  </setter>

  <handler event="onurl" args="url">
    return unless url
    # console.log('loading url', url)

    cb = (json) =>
      @setAttribute('data', json)

    dr.global.requestor.fetch(url).success((data) ->
      if (@async)
        JSON.parseAsync(data, cb)
      else
        cb(JSON.parse(data))
    ).error((error) ->
      console.error('Failed to load data', url, @, error)
    )
  </handler>

  <method name="initNode" args="parent, attrs">
    @super()
    
    @_storeByName(@name)
  </method>

  <!--/**
    * @private
    */-->
  <method name="_storeByName" args="newName,oldName">
    datasets = dr.dataset.datasets
    
    if oldName
      delete datasets[oldName]
    
    if newName
      if datasets[newName]?
        console.warn('Clobbering existing dataset named: "' + newName + '".')
      datasets[newName] = @
    else
      console.warn('No name provided to dataset.')
  </method>

  <method name="updateData" args="path, data">
    # find the scope and property to be updated
    re = /\/([^\/]+)$/
    property = path.match(re)
    if property and property[1]
      subpath = path.replace(re, '')

      # console.log('updating data', @data, subpath)
      scope = JsonPath.resolve(@data, subpath)
      # only handle updating a single field
      return unless scope.length == 1

      # console.log(data, @data, path, scope[0], property[1], scope[0][property[1]])
      scope[0][property[1]] = data
      # TODO: send smaller updates based on path argument
      @sendEvent('data', @data)
  </method>
</class>
