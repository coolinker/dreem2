<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<include href='./keyboarddraggable.dre'/>
<include href='./editable.dre'/>
<include href='./controlhandle.dre'/>
<include href='./reticle.dre'/>

<view name="editor" width="100%" height="100%" defaultplacement="content" clip="true">
  <!--// SERVICE NODES //-->
  <node id="config">
    <attribute name="topbar_height" type="number" value="32"></attribute>
    <attribute name="leftbar_width" type="number" value="75"></attribute>
    <attribute name="rightbar_width" type="number" value="250"></attribute>
    <attribute name="bottombar_height" type="number" value="24"></attribute>
  </node>
  
  <node id="selectionmanager">
    <attribute name="selected" type="expression" value="null"></attribute>
  </node>
  
  <node id="actions">
    <method name="_undoRedoCallback" args="undoable">
      if (undoable.target) selectionmanager.setAttribute('selected', undoable.target);
    </method>
    
    <method name="undo">
      undo.undo(this._undoRedoCallback);
    </method>
    
    <method name="redo">
      undo.redo(this._undoRedoCallback);
    </method>
    
    <method name="bringToFront">
      var target = reticle.target;
      if (target) {
        var newprevsibling = target.getLastSiblingView();
        if (newprevsibling) {
          var oldprevsibling = target.getPrevSiblingView();
          undo.do(new dr.editor.orderundoable({target:target, oldprevsibling:oldprevsibling, newprevsibling:newprevsibling}));
        }
      }
    </method>
    
    <method name="bringForward">
      var target = reticle.target;
      if (target) {
        var newprevsibling = target.getNextSiblingView();
        if (newprevsibling) {
          var oldprevsibling = target.getPrevSiblingView();
          undo.do(new dr.editor.orderundoable({target:target, oldprevsibling:oldprevsibling, newprevsibling:newprevsibling}));
        }
      }
    </method>
    
    <method name="sendToBack">
      var target = reticle.target;
      if (target) {
        var oldprevsibling = target.getPrevSiblingView();
        if (oldprevsibling) {
          undo.do(new dr.editor.orderundoable({target:target, oldprevsibling:oldprevsibling, newprevsibling:null}));
        }
      }
    </method>
    
    <method name="sendBackward">
      var target = reticle.target;
      if (target) {
        var oldprevsibling = target.getPrevSiblingView();
        if (oldprevsibling) {
          var newprevsibling = oldprevsibling.getPrevSiblingView();
          undo.do(new dr.editor.orderundoable({target:target, oldprevsibling:oldprevsibling, newprevsibling:newprevsibling}));
        }
      }
    </method>
    
    <method name="save">
      editormodel.save();
      undo.reset();
    </method>
    
    <method name="clearSelection">
      selectionmanager.setAttribute('selected', null);
    </method>
  </node>
  
  <editor-undostack id="undo"></editor-undostack>
  
  <node id="editormodel">
    <handler event="oninit">
      var _this = this;
      // rewrite the file to be editable, which will reload this page automatically
      dr.global.requestor.fetch(window.location.toString() + '?edit=1').success(
        function(data, status) {
          var parser = new dr.htmlparser();
          var jsobj = parser.parse(data)
          _this.setAttribute('model', jsobj);
          // console.log('loaded model', jsobj)
        }
      );
    </handler>
    
    <method name="update" args="id, name, value">
      if (this.model) {
        var child = this._findChild(id, this.model);
        if (child) {
          child.attr[name] = value;
          // console.log('found child', child, id, child.attr);
        }
      }
    </method>
    
    <method name="save">
      dr.global.requestor.send(window.location.toString() + '?edit=1', JSON.stringify(this.model) );
    </method>
    
    <method name="_findChild" args="id, jsobj">
      var children = jsobj.child;
      for (var i = 0; children.length > i; i++) {
        var child = children[i]
        if (child.attr && (child.attr.id === id)) {
          // console.log('found child', child)
          return child;
        } else if (child.child) {
          newchild = this._findChild(id, child);
          if (newchild) {
            return newchild;
          }
        }
      }
    </method>
  </node>
  
  <!--// HANDLERS //-->
  <handler event="onkeydown" reference="dr.keyboard" args="platformEvent">
    var keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent);
    if (dr.keyboard.isAcceleratorKeyDown()) {
      switch (keyCode) {
        case 66: // B: Reorder backward
          platformEvent.preventDefault(); // Prevent browser show bookmarks bar functionality
          (dr.keyboard.isShiftKeyDown() ? sendBackwardButton : sendToBackButton).doActivated();
          break;
        case 70: // F: Reorder forward
          platformEvent.preventDefault(); // Prevent browser find functionality
          (dr.keyboard.isShiftKeyDown() ? bringForwardButton : bringToFrontButton).doActivated();
          break;
        case 90: // Z: Undo/Redo
          platformEvent.preventDefault(); // Prevent browser undo/redo functionality
          (dr.keyboard.isShiftKeyDown() ? redoButton : undoButton).doActivated();
          break;
      }
    }
  </handler>
  
  <!--// VIEWS //-->
  <view name="topbar" ignoreplacement="true" bgcolor="gray"
    width="100%" height="${config.topbar_height}"
  >
    <spacedlayout spacing="2" inset="4"></spacedlayout>
    <constantlayout attribute="y" value="'middle'"></constantlayout>
    
    <labelbutton id="undoButton">Undo<handler event="onactivated">actions.undo();</handler></labelbutton>
    <labelbutton id="redoButton">Redo<handler event="onactivated">actions.redo();</handler></labelbutton>
    <labelbutton id="bringToFrontButton">Bring To Front<handler event="onactivated">actions.bringToFront();</handler></labelbutton>
    <labelbutton id="bringForwardButton">Bring Forward<handler event="onactivated">actions.bringForward();</handler></labelbutton>
    <labelbutton id="sendToBackButton">Send to Back<handler event="onactivated">actions.sendToBack();</handler></labelbutton>
    <labelbutton id="sendBackwardButton">Send Backward<handler event="onactivated">actions.sendBackward();</handler></labelbutton>
    <labelbutton id="saveButton">Save<handler event="onactivated">actions.save();</handler></labelbutton>
  </view>
  
  <view name="leftbar" ignoreplacement="true" bgcolor="silver"
    y="${config.topbar_height}"
    width="${config.leftbar_width}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
  ></view>
  
  <view name="content" ignoreplacement="true"
    x="${config.leftbar_width}" y="${config.topbar_height}"
    width="${this.parent.innerwidth - this.x - config.rightbar_width}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
    scrollable="true"
  >
    <handler event="onmousedown" args="event">actions.clearSelection();</handler>
  </view>

  <class name="texteditor" extends="inputtext">
    <handler event="onfocus">
      this.oldvalue = this.text;
    </handler>
    <handler event="ontext" args="text">
      if (this.target) {
        this.target.setAttribute(this.targetattr, text);
      }
    </handler>
    <handler event="onblur">
      if (this.oldvalue !== this.text) {
        undo.do(new dr.editor.attrundoable({target:this.target, attribute:this.targetattr, oldvalue: this.oldvalue, newvalue: this.text}));
      }
    </handler>
  </class>
  
  <class name="attributeeditor" height="auto">
    <handler event="oninit" args="data">
      // console.log('ondata', this.data)
      var name = this.data.name;
      this.label.setAttribute('text', name)
      var schema = {class: 'texteditor', parent: this, text: selectionmanager.selected[name], x: 100, target: selectionmanager.selected, targetattr: name};
      var child = this.createChild(schema)
      // update when selected item's value changes
      child.listenTo(selectionmanager.selected, 'on' + name, function(val) {
        this.setAttribute('text', val);
      });
      // console.log('child', child)
    </handler>
    <text name="label"></text>
  </class>

  <view name="rightbar" ignoreplacement="true" bgcolor="silver"
    x="right" y="${config.topbar_height}"
    width="${config.rightbar_width}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
  >
    <spacedlayout axis="y" spacing="2"></spacedlayout>
    <attribute name="attributelist" type="expression" value="[]"></attribute>
    <handler event="onselected" args="selected" reference="selectionmanager" type="coffee">
      attrs = []

      compare = (a, b) ->
        if (a.name < b.name)
          return -1
        if (a.name > b.name)
          return 1
        0

      if selected
        ancestors = this.klass.ancestors()
        # pull attributes from ancestor, since we don't want the editor mixin itself
        myattributes = ancestors[ancestors.length - 1].attributes
        # console.log('hello', this, myattributes)
        # build list of attributes for the replicator
        for key, value of myattributes
          value.name = key
          attrs.push(value)
          # console.log('attribute', key, value)

        attrs.sort(compare)
      
      # console.log('attributelist', attrs)
      this.repl.setAttribute('data', attrs);
    </handler>
    <replicator name="repl" classname="attributeeditor"></replicator>
  </view>
  
  <view name="bottombar" ignoreplacement="true" bgcolor="gray" y="bottom"
    width="100%" height="${config.bottombar_height}"
  ></view>
  
  <reticle id="reticle" ignoreplacement="true"></reticle>
</view>