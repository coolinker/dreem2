<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Classroot'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view width="100%" height="100%">
      <!-- Class Declarations -->
      <class name="foo" width="100" height="100" bgcolor="orange" cornerradius="4">
        <view name="v1" x="10" y="10" width="20" height="20" bgcolor="red">
          <view name="v1_v1" x="10" y="10" width="10" height="10" bgcolor="yellow"
            cornerradius="${this.classroot.cornerradius / 2}"
          >
            <handler event="oninit">
              this.cr = this.classroot;
              
              assert.equal(this.cornerradius, 2, 'Verify classroot works in a constraint');
            </handler>
          </view>
          <handler event="oninit">
            this.cr = this.classroot;
          </handler>
        </view>
        <handler event="oninit">
          this.cr = this.classroot;
        </handler>
      </class>
      
      <class name="subfoo" extends="foo" bgcolor="salmon">
        <view name="v2" x="10" y="40" width="20" height="20" bgcolor="green">
          <handler event="oninit">
            this.cr = this.classroot;
          </handler>
        </view>
      </class>
      
      <class name="bar" bgcolor="purple" width="auto" height="auto" padding="2">
        <view name="v1" x="10" y="10" width="20" height="20" bgcolor="green">
          <handler event="oninit">
            this.cr = this.classroot;
          </handler>
        </view>
        <foo name="v2" y="40"></foo>
        <handler event="oninit">
          this.cr = this.classroot;
        </handler>
      </class>
      
      <!-- Instances -->
      <spacedlayout axis="y"></spacedlayout>
      
      <foo name="foo_instance">
        <view name="v2i" x="10" y="40" width="20" height="20" bgcolor="green">
          <handler event="oninit">
            this.instance_cr = this.classroot;
          </handler>
        </view>
        <view name="vp" placement="v1" x="1" y="1" width="10" height="10" bgcolor="green">
          <handler event="oninit">
            this.instance_cr = this.classroot;
          </handler>
        </view>
        <handler event="oninit">
          this.instance_cr = this.classroot;
        </handler>
      </foo>
      
      <subfoo name="subfoo_instance">
        <handler event="oninit">
          this.instance_cr = this.classroot;
        </handler>
      </subfoo>
      
      <bar name="bar_instance" cornerradius="6">
        <handler event="oninit">
          this.instance_cr = this.classroot;
        </handler>
      </bar>
      
      <view name="view_instance" width="8" height="8" bgcolor="black"
        cornerradius="${this.classroot.cornerradius / 2}"
      >
        <handler event="oninit">
          this.instance_cr = this.classroot;
        </handler>
      </view>
      
      <handler event="oninit">
        var fi = this.foo_instance,
          sfi = this.subfoo_instance,
          bi = this.bar_instance,
          vi = this.view_instance,
          rootView = this.getRoot();
        
        // This view is the root view
        assert.equal(rootView, this);
        
        // Classroot of the root view is the root view
        assert.equal(rootView.classroot, rootView);
        
        // Too many classroot refs will still just be the rootView
        assert.equal(rootView.classroot.classroot, rootView);
        
        // Instances in the "scene" markup have the root view as the classroot.
        assert.equal(fi.instance_cr, rootView);
        assert.equal(sfi.instance_cr, rootView);
        assert.equal(bi.instance_cr, rootView);
        assert.equal(vi.instance_cr, rootView);
        
        // Instances in the "scene" markup have the root view as the classroot
        // in the oninit handler defined in the class
        assert.equal(fi.cr, rootView);
        assert.equal(sfi.cr, rootView);
        assert.equal(bi.cr, rootView);
        
        // Descendants declared in a class will have the instance of the class
        // as the classroot.
        assert.equal(fi.v1.cr, fi);
        assert.equal(fi.v1.v1_v1.cr, fi);
        
        // Descendants declared in a subclass will have the instance of the
        // subclass as the classroot
        assert.equal(sfi.v1.cr, sfi);
        assert.equal(sfi.v1.v1_v1.cr, sfi);
        assert.equal(sfi.v2.cr, sfi);
        
        // Descendants declared in an intance of a class will have the root
        // view as the classroot.
        assert.equal(fi.v2i.instance_cr, rootView);
        
        // Class instances used inside another class declaration have the
        // inside instance as the classroot. 
        assert.equal(bi.v1.cr, bi);
        assert.equal(bi.v2.cr, bi);
        assert.equal(bi.v2.v1.cr, bi.v2);
        assert.equal(bi.v2.v1.v1_v1.cr, bi.v2);
        
        // classroot.classroot should be the outer instance
        assert.equal(bi.v2.v1.classroot.classroot, bi);
        assert.equal(bi.v2.v1.v1_v1.classroot.classroot, bi);
        
        // Triple classroot is the rootView
        assert.equal(bi.v2.v1.classroot.classroot.classroot, rootView);
        assert.equal(bi.v2.v1.v1_v1.classroot.classroot.classroot, rootView);
        
        
        
        // Programatic instance creation. The classroot of the new instance will
        // be the classroot of the view it is created on.
        var newView = this.createChild();
        assert.equal(newView.classroot, this.classroot);
        assert.equal(newView.classroot, this);
        assert.equal(newView.parent, this);
        
        var newSubView = newView.createChild();
        assert.equal(newSubView.classroot, newView.classroot);
        assert.equal(newSubView.classroot, this);
        assert.equal(newSubView.parent, newView);
        
        // New child of a class instance
        var newFooSubView = fi.createChild();
        assert.equal(newFooSubView.classroot, fi.classroot);
        assert.equal(newFooSubView.classroot, this);
        assert.equal(newFooSubView.parent, fi);
        
        var newBarSubView = bi.v2.createChild();
        assert.equal(newBarSubView.classroot, bi.v2.classroot);
        assert.equal(newBarSubView.classroot, bi);
        assert.equal(newBarSubView.parent, bi.v2);
        
        
        // Placement: The classroot is taken from the provided parent so 
        // placement has no effect on classroot
        assert.equal(fi.v1.vp.instance_cr, rootView);
        var anotherNewView = fi.createChild({placement:'v1', name:'vp2'});
        assert.equal(anotherNewView.classroot, rootView);
        assert.equal(anotherNewView.parent, fi.v1);
        
        
        
        // Reparenting
        assert.equal(vi.classroot, rootView);
        assert.equal(vi.parent, rootView);
        assert.equal(vi.cornerradius, 0);
        
        vi.setAttribute('parent', bi.v2);
        vi.setAttribute('y', 50);
        
        assert.equal(vi.classroot, bi);
        assert.equal(vi.parent, bi.v2);
        assert.equal(vi.cornerradius, 3);
        
        
        
        // Explicit classroot setting
        vi.setAttribute('classroot', rootView);
        assert.equal(vi.classroot, rootView);
        assert.equal(vi.parent, bi.v2);
        assert.equal(vi.cornerradius, 3);
        
        // Rebind constraints so that the cornerradius constraint updates for
        // the new classroot.
        vi.rebindConstraints();
        assert.equal(vi.cornerradius, 0);
      </handler>
    </view>
  </screen>
</screens>
</composition>