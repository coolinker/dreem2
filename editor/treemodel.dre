<tree id="treemodel" x="0" multipleselection="false">

  <handler event="onselected" args="view" reference="selectionmanager">
    if (view) {
      // Map inner view to root since the inner view is what allows editing of
      // the root view for the screen.
      if (view === editor.content_bg.content.inner) view = view.getRoot();
      
      this._selectInTree(this._getViewForId(view.id))
    } else {
      this.clearSelection();
    }
  </handler>

  <method name="_selectInTree" args="view">
    if (view) {
      var walk = function(v) {
        if (!v.selected && v.data && v.data.id == view.id) {
          v.triggerSelection(true);
          return true;
        }
        for (var i = 0; v.subviews.length > i; i++) {
          if (walk(v.subviews[i])) return true;
        }
        return false;
      };
      
      return walk(this);
    }
  </method>

  <method name="_getViewForId" args="viewid">
    return window[viewid];
  </method>

  <method name="selectHandler" args="sel, d">
    var viewid = d.id;
    if (viewid) {
      if (sel) {
        var view = this._getViewForId(viewid);
        if (view !== selectionmanager.selected) selectionmanager.select(view);
      } else {
        selectionmanager.select(null);
      }
    }
  </method>

  <handler event="oninit" method="reloadTree"></handler>
  <handler event="onready" args="ready" reference="editormodel">
    if (ready) {
      this.reloadTree();
      dr.idle.callOnIdle(function() {
        treemodel.__resizeToChildren();
      });
    }
  </handler>

  <method name="reloadTree">
    var model = [];
    var d = editormodel.model

    var parser = function(m, o) {
      //if we're at the root node, so parse down through until we find the first screen
      if (o.tag == '$root') {
        for (var i =0; i < o.child.length; i++) {
          var composition = o.child[i];
          if (composition.tag == 'composition') {
            for (var j=0;j < composition.child.length;j++) {
              var screens = composition.child[j];
              if (screens.tag == 'screens') {
                o = screens.child;
                for (var h=0; h < o.length; h++) {
                  var screen = o[h];
                  if (screen.tag == 'screen' && screen.attr && screen.attr.name == 'default') {
                    o = screen.child;
                    break;
                  }
                }
                break;
              }
            }
            break;
          }
        }
      }

      //for each child, build a normalized representation of the object that looks like { title:'foo', image:imageid, id:'editor_id', items:[child,ren]}
      for (var s =0; s < o.length; s++) {
        var scr = o[s];
        if (scr.tag && scr.tag[0] != '$') {
          var title = '';
          var name = '';
          var tag = scr.tag;
          var id = '';
          var img = config.img_root + 'view.png';

          if (["text", "bitmap"].indexOf(tag) >= 0) {
            img = config.img_root + tag + '.png';
          }

          if (scr.attr) {
            var attr = scr.attr;

            id = attr.id;

            if (attr.title) {
              name = attr.title
            } else if (attr.name) {
              name = attr.name;
            } else if (attr.event) {
              name = attr.event;
            } else if (attr.text) {
              name = '"' + attr.text + '"';
            }
          }

          if (name) {
            title = name;
          } else {
            title = tag;
            title = title.charAt(0).toUpperCase() + title.slice(1);
          }


          var items = [];
          var object = { title: title, image: img };
          if (id) {
            object['id'] = id;
          }
          if (scr.child) {
            parser(items, scr.child);
            if (items.length) {
              object['items'] = items;
            }
          }

          if (object.id) {
            var obj = window[object.id];
            if (obj && obj.isA(dr.View)) {
              m.push(object);
            }
          }
        }
      }
    };
    if (d) {
      parser(model, d);
    }

    this.setAttribute('data', model);
  </method>
</tree>
