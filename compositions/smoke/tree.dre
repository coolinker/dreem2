<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->
<composition>
  <screens>
    <screen type='browser' name='default' title='Smoke Test - Tree'>
      <include href='./includes/boilerplate.dre'/>
      <view width='100%' height='100%' padding='25'>
        <spacedlayout axis='y' spacing='15'/>
        <tree name='diff_patch_test'>
          <handler event='oninit'>

            assert.isTrue(this.deepCompare('a', 'a'), 'a is a')
            assert.isTrue(this.deepCompare(true, true), 'true is true')
            assert.isTrue(this.deepCompare(false, false), 'false is false')
            assert.isTrue(this.deepCompare(0, 0), 'zilch is zilch')
            assert.isTrue(this.deepCompare(1, 1), 'one is one')

            assert.isTrue(this.deepCompare([1,2,3], [1,2,3]), 'arrays are equal')
            assert.isTrue(this.deepCompare([1,2,3,[4,5]], [1,2,3,[4,5]]), 'nested arrays are equal')
            assert.isTrue(this.deepCompare({a:1,b:2},{a:1,b:2}), 'objects are equal')
            assert.isTrue(this.deepCompare({a:1,b:{c:2,d:3}},{a:1,b:{c:2,d:3}}), 'nested objects are equal')

            assert.isFalse(this.deepCompare('a', 'b'), 'a is different than b')
            assert.isFalse(this.deepCompare(true, false), 'true is not false')
            assert.isFalse(this.deepCompare(1, 2), 'one is not 2')
            assert.isFalse(this.deepCompare(1, '1'), 'the number one is not the string one')

            assert.isFalse(this.deepCompare([1,2,3], [1,3,2]), 'mixed up arrays are not equal')
            assert.isFalse(this.deepCompare({a:1,b:{c:2,d:3}},{a:1,b:{c:2,d:5}}), 'objects with different values in leaf nodes are also not equal')

            var recursiveA = [1, 2, 3, 4];
            var recursiveB = [4, 5, 6, 7, recursiveA];
            recursiveA.push(recursiveB);

            var recursiveA2 = [1, 2, 3, 4];
            var recursiveB2 = [4, 5, 6, 7, recursiveA2];
            recursiveA2.push(recursiveB2);

            assert.isTrue(this.deepCompare(recursiveB, recursiveB2), 'equal recursive arrays are equal and wont lock up the system')

            var recursobjA = {a:7,b:8};
            var recursobjB = {c:5, d:recursobjA};
            recursobjA['e'] = recursobjB;

            var recursobjA2 = {a:7,b:8};
            var recursobjB2 = {c:5, d:recursobjA2};
            recursobjA2['e'] = recursobjB2;

            assert.isTrue(this.deepCompare(recursobjB, recursobjB2), 'equal recursive objects are equal and wont lock up the system')

            var a = {
              onlyina: true,
              objina: { some:'object' },
              array: [1,2,3,5],
              objinboth: { same:'object', ina:'onlyina', changed:'aversion' },
              inboth:true
            };
            var b = {
              onlyinb: true,
              objinb: { some:'object' },
              array: [0,2,3,4,6],
              objinboth: { same:'object', inb:'onlyinb', changed:'bversion' },
              inboth:true
            };
            var patch = this.diff(a,b);
            var expected = [
              {action:'DEL', path:'/onlyina'},
              {action:'DEL', path:'/objina'},
              {action:'DEL', path:'/array[3]'},
              {action:'DEL', path:'/array[0]'},
              {action:'SET', path:'/array[0]', value:0},
              {action:'SET', path:'/array[3]', value:4},
              {action:'SET', path:'/array[4]', value:6},
              {action:'DEL', path:'/objinboth/ina'},
              {action:'SET', path:'/objinboth/changed', value:'bversion'},
              {action:'SET', path:'/objinboth/inb', value:'onlyinb'},
              {action:'SET', path:'/onlyinb', value:true},
              {action:'SET', path:'/objinb', value:{ some:'object' }},
            ];
            assert.deepEqual(expected, patch);

            var c = JSON.parse(JSON.stringify(a));
            assert.notDeepEqual(b, c);
            this.patch(patch, c);
            assert.deepEqual(b, c);

            var blankpatch = this.diff({},b);
            var blankexpected = [
              {action:'SET', path:'/onlyinb', value:true},
              {action:'SET', path:'/objinb', value:{ some:'object' }},
              {action:'SET', path:'/array', value:[0,2,3,4,6]},
              {action:'SET', path:'/objinboth', value:{ same:'object', inb:'onlyinb', changed:'bversion' }},
              {action:'SET', path:'/inboth', value:true}
            ];
            assert.deepEqual(blankexpected, blankpatch);

            var d = {};
            assert.notDeepEqual(b, d);
            this.patch(blankpatch, d);
            assert.deepEqual(b, d);
          </handler>
        </tree>
        <tree id='tre' name='simple' height='200' width='200' data='{ "label":"default", nodes:[{ "label":"child1", nodes:[{ "label":"child1child1", nodes:[] }] }, { "label":"child2", nodes:[] }] }'/>
        <tree height='200' width='200' border='1' bordercolor='#eee' multipleselection='false' branchselection='true' data='{"label":"branch selection", "items": [{"label":"first", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": []}]}]}]}]}, {"label":"second", "items": []}, {"label":"third", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": []}]}]}]}'/>
        <tree height='200' width='200' border='1' bordercolor='#eee' multipleselection='true' branchselection='false' data='{"label":"multi selection", "items": [{"label":"first", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": []}]}]}]}]}, {"label":"second", "items": []}, {"label":"third", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": []}]}]}]}'/>
        <tree height='200' width='200' border='1' bordercolor='#eee' multipleselection='true' branchselection='true' data='{"label":"multi+branch selection", "items": [{"label":"first", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": []}]}]}]}]}, {"label":"second", "items": []}, {"label":"third", "items": [{"label":"branch", "items": [{"label":"first", "items": []}, {"label":"second", "items": []}, {"label":"third", "items": []}]}]}]}'/>
      </view>
    </screen>
  </screens>
</composition>
