<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<class name="reticle" with="button, keyboarddraggable" visible="false"
  distancebeforedrag="5" clickable="false"
  draggroups="{editable:true}"
  isdraggable="${!selectionmanager.isrootselection}"
>
  <attribute name="draglockthresh" type="number" value="20"/>

  <!-- clickable:false is because the mousedown/up events are in fact
       simulated from the editable. This prevents the reticle from covering
       but still allows it to behave as draggable. -->
  <handler event="onselectedview" args="selected" reference="selectionmanager">
    var oldTarget = this.target;
    this.target = selected;
    if (selected) {
      this.setActualAttribute('visible', true);
      this.focus(true);
      this._syncPosition();
      if (!oldTarget) this.listenTo(dr.idle, 'onidle', this._syncPosition);
    } else {
      this.stopListening(dr.idle, 'onidle', this._syncPosition);
      this.setActualAttribute('visible', false);
    }
  </handler>

  <!-- Syncs the position and size of this reticle to the position and
       size of the target view. Also updates the vertical and horizontal
       selection bars found within the rulers. -->
  <method name="_syncPosition">
    var target = this.target;
    if (target.destroyed) {
      console.log('Selection target was destroyed so aborting _syncPosition.');
      selectionmanager.clear();
    } else {
      var pos = target.getAbsolutePosition(editor),
        w = target.width,
        h = target.height;
      
      this._isSync = true;
      this.setActualAttribute('width', w);
      this.setActualAttribute('height', h);
      this.setActualAttribute('x', pos.x);
      this.setActualAttribute('y', pos.y);
      this._isSync = false;
      
      // Update selection bars
      var hSel = horizontal_selection,
        startX = hSel.x - ruler_horizontal.x + ruler_horizontal.scrollx - 100,
        startXRelative = target.x,
        endX = startX + w,
        xDifferent = startX !== endX,
        hLocsize = hSel.locsize,
        hLocend = hSel.locend,
        hLocrelend = hSel.locrelend;
      hSel.locstart.setActualAttribute('text', this._formatNumber(startX));
      hSel.locrelstart.setActualAttribute('text', this._formatNumber(startXRelative));
      
      hLocsize.setActualAttribute('visible', xDifferent);
      hLocend.setActualAttribute('visible', xDifferent);
      hLocrelend.setActualAttribute('visible', xDifferent);
      if (xDifferent) {
        hLocsize.setActualAttribute('text', this._formatNumber(w));
        hLocend.setActualAttribute('text', this._formatNumber(endX));
        hLocrelend.setActualAttribute('text', this._formatNumber(startXRelative + w));
      }
      
      var vSel = vertical_selection,
        startY = vSel.y - ruler_vertical.y + ruler_vertical.scrolly - 100,
        startYRelative = target.y,
        endY = startY + h,
        yDifferent = startY !== endY,
        vLocsize = vSel.locsize,
        vLocend = vSel.locend,
        vLocrelend = vSel.locrelend;
      vSel.locstart.setActualAttribute('text', this._formatNumber(startY));
      vSel.locrelstart.setActualAttribute('text', this._formatNumber(startYRelative));
      
      vLocsize.setActualAttribute('visible', yDifferent);
      vLocend.setActualAttribute('visible', yDifferent);
      vLocrelend.setActualAttribute('visible', yDifferent);
      if (yDifferent) {
        vLocsize.setActualAttribute('text', this._formatNumber(h));
        vLocend.setActualAttribute('text', this._formatNumber(endY));
        vLocrelend.setActualAttribute('text', this._formatNumber(startYRelative + h));
      }
    }
  </method>

  <!-- Formats the numbers displayed in the vertical and horizontal selections
       bars to at most two decimal places. -->
  <method name="_formatNumber" args="v">
    // Allow at most 2 decimal places to be shown.
    return +(v.toFixed(2));
  </method>

  <method name="drawFocusedState">
    this.fill.setActualAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
  </method>
  <method name="drawHoverState">
    this.fill.setActualAttribute('boxshadow', config.boxshadow_normal);
  </method>
  <method name="drawActiveState">
    this.fill.setActualAttribute('boxshadow', null);
  </method>
  <method name="drawReadyState">
    this.fill.setActualAttribute('boxshadow', config.boxshadow_normal);
  </method>
  
  <!-- Syncs an attribute on the target to one on the reticle. -->
  <method name="_updateTarget" args="attr, value">
    if (!this._isSync) {
      var target = this.target;
      if (target) target.setAttribute(attr, value, true); // 3rd arg enables model update
    }
  </method>
  
  <handler event="onx" args="x">
    this._updateTarget('x', x + this.dx);
  </handler>
  
  <handler event="ony" args="y">
    this._updateTarget('y', y + this.dy);
  </handler>
  
  <handler event="onwidth" args="width">
    this._updateTarget('width', width);
    this.resizer.setActualAttribute('x', this.width - 5)
  </handler>
  
  <handler event="onheight" args="height">
    this._updateTarget('height', height);
    this.resizer.setActualAttribute('y', this.height - 5)
  </handler>
  
  <method name="updatePosition" args="x, y">
    if (!this.disabled && this.isdraggable) {
      if (!this._isArrowAdj) {
        if (dr.keyboard.isShiftKeyDown()) {
          var origLoc = this.getOriginalLocation();
          if (this.draglockthresh > Math.abs(x - origLoc.x)) x = origLoc.x;
          if (this.draglockthresh > Math.abs(y - origLoc.y)) y = origLoc.y;
        }
      }
      
      // Snap to grid
      var gx = Number(gridsizex.value),
        gy = Number(gridsizey.value);
      if (gx > 0) x = (gx * Math.round((x + this.dx) / gx)) - this.dx;
      if (gy > 0) y = (gy * Math.round((y + this.dy) / gy)) - this.dy;
      
      // Snap to guides
      var target = this.target,
        noXAdj = target.__layoutDomainInUseForView('x'),
        noYAdj = target.__layoutDomainInUseForView('y');
      
      if (!this._isArrowAdj && snaptoguides.selected) {
        var pos = this.__lastGuidePos = this._updateGuides(x, y, noXAdj, noYAdj);
        x = pos.x;
        y = pos.y;
        guides.setActualAttribute('visible', true);
      } else {
        delete this.__lastGuidePos;
      }
      
      // If a layout in parent is managing x/y position then don't allow drag.
      if (noXAdj) x = this.getOriginalLocation().x;
      if (noYAdj) y = this.getOriginalLocation().y;
      
      this.super(x, y);
    }
  </method>

  <method name="_updateGuides" args="x, y, noXAdj, noYAdj">
    var svs = guides.getSubviews(), i = svs.length;
    while (i) svs[--i].destroy();
    
    var target = this.target,
      w = target.width,
      halfW = w / 2,
      h = target.height,
      halfH = h / 2,
      parent = target.parent,
      newpos = {x:x, y:y},
      sibling, abs, sx, sy,
      foundX = false,
      foundY = false;
    
    // Match against parent first
    if (!noXAdj && !foundX) {
      abs = parent.getAbsolutePosition(editor);
      sx = abs.x + parent.leftpadding;
      
      // Left Guides
      foundX = this._createHGuide(newpos, sx, x, 'lower_lower', 0);
      if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth / 2, x, 'lower_middle', 0);
      if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth, x, 'lower_upper', 0);
      
      // Right Guides
      if (!foundX) foundX = this._createHGuide(newpos, sx, x, 'upper_lower', w);
      if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth / 2, x, 'upper_middle', w);
      if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth, x, 'upper_upper', w);
      
      // Center Guides
      if (!foundX) foundX = this._createHGuide(newpos, sx, x, 'middle_lower', halfW);
      if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth / 2, x, 'middle_middle', halfW);
      if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth, x, 'middle_upper', halfW);
      
      if (foundX) {
        newpos.xTarget = parent;
        this._createTargetOutline(parent, abs);
      }
    }
    if (!noYAdj && !foundY) {
      if (!abs) abs = parent.getAbsolutePosition(editor);
      sy = abs.y + parent.toppadding;
      
      // Top Guides
      foundY = this._createVGuide(newpos, sy, y, 'lower_lower', 0);
      if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight / 2, y, 'lower_middle', 0);
      if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight, y, 'lower_upper', 0);
      
      // Bottom Guides
      if (!foundY) foundY = this._createVGuide(newpos, sy, y, 'upper_lower', h);
      if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight / 2, y, 'upper_middle', h);
      if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight, y, 'upper_upper', h);
      
      // Middle Guides
      if (!foundY) foundY = this._createVGuide(newpos, sy, y, 'middle_lower', halfH);
      if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight / 2, y, 'middle_middle', halfH);
      if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight, y, 'middle_upper', halfH);
      
      if (foundY) {
        newpos.yTarget = parent;
        this._createTargetOutline(parent, abs);
      }
    }
    abs = null;
    
    svs = parent.getSubviews();
    i = svs.length;
    while (i) {
      sibling = svs[--i];
      
      if (sibling !== target) {
        if (!noXAdj && !foundX) {
          abs = sibling.getAbsolutePosition(editor);
          sx = abs.x;
          
          // Left Guides
          foundX = this._createHGuide(newpos, sx, x, 'lower_lower', 0);
          if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width / 2, x, 'lower_middle', 0);
          if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width, x, 'lower_upper', 0);
          
          // Right Guides
          if (!foundX) foundX = this._createHGuide(newpos, sx, x, 'upper_lower', w);
          if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width / 2, x, 'upper_middle', w);
          if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width, x, 'upper_upper', w);
          
          // Center Guides
          if (!foundX) foundX = this._createHGuide(newpos, sx, x, 'middle_lower', halfW);
          if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width / 2, x, 'middle_middle', halfW);
          if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width, x, 'middle_upper', halfW);
          
          if (foundX) {
            newpos.xTarget = sibling;
            this._createTargetOutline(sibling, abs);
          }
        }
        
        if (!noYAdj && !foundY) {
          if (!abs) abs = sibling.getAbsolutePosition(editor);
          sy = abs.y;
          
          // Top Guides
          foundY = this._createVGuide(newpos, sy, y, 'lower_lower', 0);
          if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height / 2, y, 'lower_middle', 0);
          if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height, y, 'lower_upper', 0);
          
          // Bottom Guides
          if (!foundY) foundY = this._createVGuide(newpos, sy, y, 'upper_lower', h);
          if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height / 2, y, 'upper_middle', h);
          if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height, y, 'upper_upper', h);
          
          // Middle Guides
          if (!foundY) foundY = this._createVGuide(newpos, sy, y, 'middle_lower', halfH);
          if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height / 2, y, 'middle_middle', halfH);
          if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height, y, 'middle_upper', halfH);
          
          if (foundY) {
            newpos.yTarget = sibling;
            this._createTargetOutline(sibling, abs);
          }
        }
        
        abs = null;
      }
    }
    
    return newpos;
  </method>
  
  <method name="_createHGuide" args="newpos, gv, v, type, adj">
    v += adj;
    if (5 > Math.abs(gv - v)) {
      guides.createChild({class:'view', x:gv, y:0, width:1, height:5000, bgcolor:'cyan'});
      newpos.x = gv - adj;
      newpos.xType = type;
      return true;
    }
  </method>
  
  <method name="_createVGuide" args="newpos, gv, v, type, adj">
    v += adj;
    if (5 > Math.abs(gv - v)) {
      guides.createChild({class:'view', x:0, y:gv, width:5000, height:1, bgcolor:'cyan'});
      newpos.y = gv - adj;
      newpos.yType = type;
      return true;
    }
  </method>
  
  <method name="_createTargetOutline" args="sibling, abs">
    guides.createChild({
      class:'view', x:abs.x, y:abs.y, 
      width:sibling.width, height:sibling.height,
      border:1, bordercolor:'cyan'
    });
  </method>

  <method name="willPermitDrop" args="droptarget">
    return true;
  </method>

  <method name="startDrag" args="event">
    this._start();
    this.super();
    
    // Make half opacity during drag
    var target = this.target;
    this._origOpacity = target.getActualAttribute('opacity');
    target.setActualAttribute('opacity', this._origOpacity / 2);
  </method>

  <method name="notifyDrop" args="droptarget, isAbort">
    this.super();
    
    if (isAbort) {
      this._abort();
    } else if (this.droptarget) {
      this._stop(droptarget);
    }
  </method>

  <method name="notifyDropFailed">
    if (this._isArrowAdj) {
      // Arrow adjustments should always succeed.
      this._stop(this.target.parent);
    } else {
      this._abort();
    }
  </method>

  <method name="notifyDropAborted">
    this._abort();
  </method>

  <method name="stopDrag" args="event, isAbort">
    this.super();
    
    // Restore opacity after drag
    this.target.setActualAttribute('opacity', this._origOpacity);
    guides.setActualAttribute('visible', false);
  </method>

  <method name="_start">
    this.isStarted = true;
    
    delete this.__lastGuidePos;
    delete this.resizer.__lastGuidePos;
    
    var target = this.target,
      pos = target.getAbsolutePosition(editor);
    this.dx = target.x - pos.x;
    this.dy = target.y - pos.y;
    
    // started dragging, create compound for target with current values
    var EAU = dr.editor.editorattrundoable;
    this._undoablew = new EAU({target:target, attribute:'width', oldvalue:target.getAttribute('width')});
    this._undoableh = new EAU({target:target, attribute:'height', oldvalue:target.getAttribute('height')});
    this._undoablex = new EAU({target:target, attribute:'x', oldvalue:target.getAttribute('x')});
    this._undoabley = new EAU({target:target, attribute:'y', oldvalue:target.getAttribute('y')});
    
    this.listenTo(dr.keyboard, 'onkeydown, onkeyup', this._handleKeyChange);
  </method>

  <method name="_stop" args="droptarget">
    // Target can be null if you undo/redo a create/delete while dragging
    // the node that is created/deleted so make sure it exists first.
    var target = this.target;
    if (target) {
      // stopped dragging, store new values
      var E = dr.editor,
        compound = new E.compoundundoable(),
        undoW = this._undoablew,
        undoH = this._undoableh,
        undoX = this._undoablex,
        undoY = this._undoabley,
        undoP, undoO, undoExtraX, undoExtraY,
        isNewParent = false;
      
      undoW.newvalue = '' + target.getAttribute('width'); // Coerce to string for consistent comparison
      undoH.newvalue = '' + target.getAttribute('height'); // Coerce to string for consistent comparison
      undoX.newvalue = '' + target.getAttribute('x'); // Coerce to string for consistent comparison
      undoY.newvalue = '' + target.getAttribute('y'); // Coerce to string for consistent comparison
     
      // TODO: remove check for _isInReplicator() when we have a true class editor. For 
      // now, it prevents attempts to reparent child views inside replicated classes. 
      if (!this._isArrowAdj && !this.target._isInReplicator()) {
        isNewParent = droptarget && (droptarget !== target.parent);
        if (isNewParent) {
          undoP = new E.editorattrundoable({target:target, attribute:'parent', oldvalue:target.parent, newvalue:droptarget});
          undoO = new E.orderundoable({target:target, oldprevsibling:target.getPrevSiblingView()});
          
          var loc = dr.componentdropable.calculateDropLocation(target, droptarget);
          undoX.newvalue = '' + loc.x;
          undoY.newvalue = '' + loc.y;
        }
      }
      
      // Setup constraints for resize guides
      var guidePos = this.resizer.__lastGuidePos;
      if (guidePos && dr.keyboard.isAltKeyDown()) {
        var xType = guidePos.xType;
        if (xType) {
          var xConstraint,
            gxTarget = guidePos.xTarget,
            guideTargetXName = gxTarget.name;
          
          if ((gxTarget === target.parent && !isNewParent)) {
            if (xType === 'lower') {
              xConstraint = '0';
            } else if (xType === 'middle') {
              xConstraint = '${this.parent.innerwidth / 2 - this.x}';
            } else {
              xConstraint = '${this.parent.innerwidth - this.x}';
            }
          } else if (!isNewParent) {
            if (!guideTargetXName) {
              guideTargetXName = this._generateUniqueName(gxTarget);
              compound.add(new E.editorattrundoable({target:gxTarget, attribute:'name', oldvalue:'', newvalue:guideTargetXName}));
            }
            
            if (xType === 'lower') {
              xConstraint = '${this.parent.' + guideTargetXName + '.x - this.x}';
            } else if (xType === 'middle') {
              xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth / 2 - this.x}';
            } else {
              xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth - this.x}';
            }
          }
          undoW.newvalue = xConstraint;
        }
        
        var yType = guidePos.yType;
        if (yType) {
          var yConstraint,
            gyTarget = guidePos.yTarget,
            guideTargetXName = gyTarget.name;
          
          if ((gyTarget === target.parent && !isNewParent)) {
            if (yType === 'lower') {
              yConstraint = '0';
            } else if (yType === 'middle') {
              yConstraint = '${this.parent.innerheight / 2 - this.y}';
            } else {
              yConstraint = '${this.parent.innerheight - this.y}';
            }
          } else if (!isNewParent) {
            if (!guideTargetXName) {
              guideTargetXName = this._generateUniqueName(gyTarget);
              compound.add(new E.editorattrundoable({target:gyTarget, attribute:'name', oldvalue:'', newvalue:guideTargetXName}));
            }
            
            if (yType === 'lower') {
              yConstraint = '${this.parent.' + guideTargetXName + '.y - this.y}';
            } else if (yType === 'middle') {
              yConstraint = '${this.parent.' + guideTargetXName + '.y + this.parent.' + guideTargetXName + '.boundsheight / 2 - this.y}';
            } else {
              yConstraint = '${this.parent.' + guideTargetXName + '.y + this.parent.' + guideTargetXName + '.boundsheight - this.y}';
            }
          }
          undoH.newvalue = yConstraint;
        }
      }
      
      // Setup constraints for reposition guides
      guidePos = this.__lastGuidePos;
      if (guidePos && dr.keyboard.isAltKeyDown()) {
        var xType = guidePos.xType;
        if (xType) {
          var xConstraint,
            parts = xType.split('_'),
            sourceGuide = parts[0],
            targetGuide = parts[1],
            gxTarget = guidePos.xTarget,
            guideTargetXName = gxTarget.name;
          
          if ((gxTarget === target.parent && !isNewParent) || droptarget.parent === target.parent) {
            if (targetGuide === 'lower') {
              if (sourceGuide === 'lower') {
                xConstraint = 'left';
              } else if (sourceGuide === 'middle') {
                xConstraint = '${-(this.boundswidth / 2) + this.boundsxdiff}';
              } else {
                xConstraint = '${-this.boundswidth + this.boundsxdiff}';
              }
            } else if (targetGuide === 'middle') {
              if (sourceGuide === 'lower') {
                xConstraint = '${this.parent.innerwidth / 2 + this.boundsxdiff}';
              } else if (sourceGuide === 'middle') {
                xConstraint = 'center';
              } else {
                xConstraint = '${this.parent.innerwidth / 2  - this.boundswidth + this.boundsxdiff}';
              }
            } else {
              if (sourceGuide === 'lower') {
                xConstraint = '${this.parent.innerwidth + this.boundsxdiff}';
              } else if (sourceGuide === 'middle') {
                xConstraint = '${this.parent.innerwidth - (this.boundswidth / 2) + this.boundsxdiff}';
              } else {
                xConstraint = 'right';
              }
            }
            undoX.newvalue = xConstraint;
          } else if (!isNewParent || gxTarget === target.parent) {
            if (!guideTargetXName) {
              guideTargetXName = this._generateUniqueName(gxTarget);
              compound.add(new E.editorattrundoable({target:gxTarget, attribute:'name', oldvalue:'', newvalue:guideTargetXName}));
            }
            
            if (targetGuide === 'lower') {
              if (sourceGuide === 'lower') {
                xConstraint = '${this.parent.' + guideTargetXName + '.x + this.boundsxdiff}';
              } else if (sourceGuide === 'middle') {
                xConstraint = '${this.parent.' + guideTargetXName + '.x - (this.boundswidth / 2) + this.boundsxdiff}';
              } else {
                xConstraint = '${this.parent.' + guideTargetXName + '.x - this.boundswidth + this.boundsxdiff}';
              }
            } else if (targetGuide === 'middle') {
              if (sourceGuide === 'lower') {
                xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth / 2 + this.boundsxdiff}';
              } else if (sourceGuide === 'middle') {
                xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth / 2  - (this.boundswidth / 2) + this.boundsxdiff}';
              } else {
                xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth / 2  - this.boundswidth + this.boundsxdiff}';
              }
            } else {
              if (sourceGuide === 'lower') {
                xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth + this.boundsxdiff}';
              } else if (sourceGuide === 'middle') {
                xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth - (this.boundswidth / 2) + this.boundsxdiff}';
              } else {
                xConstraint = '${this.parent.' + guideTargetXName + '.x + this.parent.' + guideTargetXName + '.boundswidth - this.boundswidth + this.boundsxdiff}';
              }
            }
            
            if (gxTarget === target.parent) {
              undoExtraX = new dr.editor.editorattrundoable({target:undoX.target, attribute:'x', oldvalue:undoX.newvalue, newvalue:xConstraint});
            } else {
              undoX.newvalue = xConstraint;
            }
          }
        }
        
        var yType = guidePos.yType;
        if (yType) {
          var yConstraint,
            parts = yType.split('_'),
            sourceGuide = parts[0],
            targetGuide = parts[1],
            gyTarget = guidePos.yTarget,
            guideTargetYName = gyTarget.name;
          
          if ((gyTarget === target.parent && !isNewParent) || droptarget.parent === target.parent) {
            if (targetGuide === 'lower') {
              if (sourceGuide === 'lower') {
                yConstraint = 'top';
              } else if (sourceGuide === 'middle') {
                yConstraint = '${-(this.boundsheight / 2) + this.boundsydiff}';
              } else {
                yConstraint = '${-this.boundsheight + this.boundsydiff}';
              }
            } else if (targetGuide === 'middle') {
              if (sourceGuide === 'lower') {
                yConstraint = '${this.parent.innerheight / 2 + this.boundsydiff}';
              } else if (sourceGuide === 'middle') {
                yConstraint = 'middle';
              } else {
                yConstraint = '${this.parent.innerheight / 2  - this.boundsheight + this.boundsydiff}';
              }
            } else {
              if (sourceGuide === 'lower') {
                yConstraint = '${this.parent.innerheight + this.boundsydiff}';
              } else if (sourceGuide === 'middle') {
                yConstraint = '${this.parent.innerheight - (this.boundsheight / 2) + this.boundsydiff}';
              } else {
                yConstraint = 'bottom';
              }
            }
            undoY.newvalue = yConstraint;
          } else if (!isNewParent || gyTarget === target.parent) {
            if (!guideTargetYName) {
              guideTargetYName = this._generateUniqueName(gyTarget);
              compound.add(new E.editorattrundoable({target:gyTarget, attribute:'name', oldvalue:'', newvalue:guideTargetYName}));
            }
            
            if (targetGuide === 'lower') {
              if (sourceGuide === 'lower') {
                yConstraint = '${this.parent.' + guideTargetYName + '.y + this.boundsydiff}';
              } else if (sourceGuide === 'middle') {
                yConstraint = '${this.parent.' + guideTargetYName + '.y - (this.boundsheight / 2) + this.boundsydiff}';
              } else {
                yConstraint = '${this.parent.' + guideTargetYName + '.y - this.boundsheight + this.boundsydiff}';
              }
            } else if (targetGuide === 'middle') {
              if (sourceGuide === 'lower') {
                yConstraint = '${this.parent.' + guideTargetYName + '.y + this.parent.' + guideTargetYName + '.boundsheight / 2 + this.boundsydiff}';
              } else if (sourceGuide === 'middle') {
                yConstraint = '${this.parent.' + guideTargetYName + '.y + this.parent.' + guideTargetYName + '.boundsheight / 2  - (this.boundsheight / 2) + this.boundsydiff}';
              } else {
                yConstraint = '${this.parent.' + guideTargetYName + '.y + this.parent.' + guideTargetYName + '.boundsheight / 2  - this.boundsheight + this.boundsydiff}';
              }
            } else {
              if (sourceGuide === 'lower') {
                yConstraint = '${this.parent.' + guideTargetYName + '.y + this.parent.' + guideTargetYName + '.boundsheight + this.boundsydiff}';
              } else if (sourceGuide === 'middle') {
                yConstraint = '${this.parent.' + guideTargetYName + '.y + this.parent.' + guideTargetYName + '.boundsheight - (this.boundsheight / 2) + this.boundsydiff}';
              } else {
                yConstraint = '${this.parent.' + guideTargetYName + '.y + this.parent.' + guideTargetYName + '.boundsheight - this.boundsheight + this.boundsydiff}';
              }
            }
            
            if (gyTarget === target.parent) {
              undoExtraY = new dr.editor.editorattrundoable({target:undoY.target, attribute:'y', oldvalue:undoY.newvalue, newvalue:yConstraint});
            } else {
              undoY.newvalue = yConstraint;
            }
          }
        }
      }
      
      if (isNewParent || undoW.newvalue !== undoW.oldvalue && !target.__layoutDomainInUseForView('width')) compound.add(undoW);
      if (isNewParent || undoH.newvalue !== undoH.oldvalue && !target.__layoutDomainInUseForView('height')) compound.add(undoH);
      if (isNewParent || undoX.newvalue !== undoX.oldvalue && !target.__layoutDomainInUseForView('x')) compound.add(undoX);
      if (isNewParent || undoY.newvalue !== undoY.oldvalue && !target.__layoutDomainInUseForView('y')) compound.add(undoY);
      
      // Must be last so that dragging into a parent that already has a layout works as expected. To repro,
      // but a view at x=10, drag it into a view with only an x-spacedlayout, undo the drag and then
      // notice the view did not get put back at 10, but instead at 0.
      if (isNewParent) compound.add(undoO).add(undoP);
      
      // Must come after setting the parent so that named based constraints won't get applied against 
      // an invalid set of parent names.
      if (undoExtraX && undoExtraX.newvalue !== undoExtraX.oldvalue && !target.__layoutDomainInUseForView('x')) compound.add(undoExtraX);
      if (undoExtraY && undoExtraY.newvalue !== undoExtraY.oldvalue && !target.__layoutDomainInUseForView('y')) compound.add(undoExtraY);
      
      // Only do it if something changed.
      if (compound.getUndoableCount() > 0) actions.do(compound);
    }
    
    this.stopListening(dr.keyboard, 'onkeydown, onkeyup', this._handleKeyChange);
    this.isStarted = false;
  </method>

  <method name="_generateUniqueName" args="target">
    var count = 0,
      name = 'layer_' + count++,
      parent = target.parent;
    while (parent[name]) name = 'layer_' + count++;
    return name;
  </method>

  <method name="_abort">
    var target = this.target;
    if (target) {
      target.setAttribute('x', this._undoablex.oldvalue);
      target.setAttribute('y', this._undoabley.oldvalue);
      target.setAttribute('width', this._undoablew.oldvalue);
      target.setAttribute('height', this._undoableh.oldvalue);
    }
    
    this.stopListening(dr.keyboard, 'onkeydown, onkeyup', this._handleKeyChange);
    this.isStarted = false;
  </method>

  <method name="_handleKeyChange" args="platformEvent">
    var sprite = dr.sprite,
      keyCode = sprite.KeyObservable.getKeyCodeFromEvent(platformEvent),
      GK = sprite.GlobalKeys;
    if (keyCode === GK.KEYCODE_SHIFT) {
      if (this.focused) {
        this.__requestDragPosition();
      } else if (this.resizer.focused) {
        this.resizer.__requestDragPosition();
      }
    } else if (keyCode === GK.KEYCODE_CONTROL) {
      if (this.resizer.focused) {
        this.resizer.__requestDragPosition();
      }
    }
  </method>


  <!--// Views //////////////////////////////////////////////////////////////-->
  <!-- This view allows the reticle to visually appear zero width/height while
       still supporting borders. -->
  <view name="fill" width="100%" height="100%" clip="true">
    <view name="inner" width="100%" height="100%" border="1" bordercolor="${config.selection_color}"/>
  </view>

  <controlhandle name="resizer" visible="${!selectionmanager.isrootselection}">
    <handler event="onx" args="x">
      this.parent.setActualAttribute('width', x + 5);
    </handler>
    
    <handler event="ony" args="y">
      this.parent.setActualAttribute('height', y + 5);
    </handler>
    
    <method name="startDrag" args="event">
      var parent = this.parent;
      this._origAspectRatio = parent.height / parent.width;
      parent._start();
      this.super();
    </method>
    
    <method name="updatePosition" args="x, y">
      if (!this.disabled) {
        if (!this._isArrowAdj) {
          if (dr.keyboard.isShiftKeyDown()) {
            // If shift is down, preserver aspect ratio
            var ar = this._origAspectRatio;
            if (ar === 0) {
              y = -5;
            } else if (ar === Infinity) {
              x = -5;
            } else {
              var closestPoint = dr.getClosestPointOnALineToAPoint(0, 0, 1, ar, x + 5, y + 5);
              x = Math.round(closestPoint.x - 5);
              y = Math.round(closestPoint.y - 5);
            }
          } else if (dr.keyboard.isControlKeyDown()) {
            // If alt key down make square
            var closestPoint = dr.getClosestPointOnALineToAPoint(0, 0, 1, 1, x + 5, y + 5);
            x = Math.round(closestPoint.x - 5);
            y = Math.round(closestPoint.y - 5);
          }
        }
        
        // Snap to grid
        var gx = Number(gridsizex.value),
          gy = Number(gridsizey.value);
        if (gx > 0) x = (gx * Math.round((x + 5) / gx)) - 5;
        if (gy > 0) y = (gy * Math.round((y + 5) / gy)) - 5;
        
        // Snap to guides
        var target = this.parent.target,
          noXAdj = target.__layoutDomainInUseForView('width'),
          noYAdj = target.__layoutDomainInUseForView('height');
        
        if (!this._isArrowAdj && snaptoguides.selected) {
          var pos = this.__lastGuidePos = this._updateGuides(x, y, noXAdj, noYAdj);
          x = pos.x;
          y = pos.y;
          guides.setActualAttribute('visible', true);
        } else {
          delete this.__lastGuidePos;
        }
        
        // If a layout in parent is managing x/y position then don't allow drag.
        if (noXAdj) x = this.getOriginalLocation().x;
        if (noYAdj) y = this.getOriginalLocation().y;
        
        this.setActualAttribute('x', Math.max(-5, x));
        this.setActualAttribute('y', Math.max(-5, y));
      }
    </method>
    
    <method name="_updateGuides" args="x, y, noXAdj, noYAdj">
      var reticle = this.parent;
      x += 5 + reticle.x;
      y += 5 + reticle.y;
      
      var svs = guides.getSubviews(), i = svs.length;
      while (i) svs[--i].destroy();
      
      var target = reticle.target,
        w = target.width,
        h = target.height,
        parent = target.parent,
        newpos = {x:x, y:y},
        sibling, abs, sx, sy,
        foundX = false,
        foundY = false;
      
      // Match against parent first
      if (!noXAdj && !foundX) {
        abs = parent.getAbsolutePosition(editor);
        sx = abs.x + parent.leftpadding;
        
        if (!foundX) foundX = this._createHGuide(newpos, sx, x, 'lower');
        if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth / 2, x, 'middle');
        if (!foundX) foundX = this._createHGuide(newpos, sx + parent.innerwidth, x, 'upper');
        
        if (foundX) {
          newpos.xTarget = parent;
          reticle._createTargetOutline(parent, abs);
        }
      }
      if (!noYAdj && !foundY) {
        if (!abs) abs = parent.getAbsolutePosition(editor);
        sy = abs.y + parent.toppadding;
        
        if (!foundY) foundY = this._createVGuide(newpos, sy, y, 'lower');
        if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight / 2, y, 'middle');
        if (!foundY) foundY = this._createVGuide(newpos, sy + parent.innerheight, y, 'upper');
        
        if (foundY) {
          newpos.yTarget = parent;
          reticle._createTargetOutline(parent, abs);
        }
      }
      abs = null;
      
      svs = parent.getSubviews();
      i = svs.length;
      while (i) {
        sibling = svs[--i];
        
        if (sibling !== target) {
          if (!noXAdj && !foundX) {
            abs = sibling.getAbsolutePosition(editor);
            sx = abs.x;
            
            if (!foundX) foundX = this._createHGuide(newpos, sx, x, 'lower');
            if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width / 2, x, 'middle');
            if (!foundX) foundX = this._createHGuide(newpos, sx + sibling.width, x, 'upper');
            
            if (foundX) {
              newpos.xTarget = sibling;
              reticle._createTargetOutline(sibling, abs);
            }
          }
          
          if (!noYAdj && !foundY) {
            if (!abs) abs = sibling.getAbsolutePosition(editor);
            sy = abs.y;
            
            if (!foundY) foundY = this._createVGuide(newpos, sy, y, 'lower');
            if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height / 2, y, 'middle');
            if (!foundY) foundY = this._createVGuide(newpos, sy + sibling.height, y, 'upper');
            
            if (foundY) {
              newpos.yTarget = sibling;
              reticle._createTargetOutline(sibling, abs);
            }
          }
          
          abs = null;
        }
      }
      
      newpos.x -= 5 + reticle.x;
      newpos.y -= 5 + reticle.y;
      return newpos;
    </method>
    
    <method name="_createHGuide" args="newpos, gv, v, type">
      if (5 > Math.abs(gv - v)) {
        guides.createChild({class:'view', x:gv, y:0, width:1, height:5000, bgcolor:'cyan'});
        newpos.x = gv;
        newpos.xType = type;
        return true;
      }
    </method>
    
    <method name="_createVGuide" args="newpos, gv, v, type">
      if (5 > Math.abs(gv - v)) {
        guides.createChild({class:'view', x:0, y:gv, width:5000, height:1, bgcolor:'cyan'});
        newpos.y = gv;
        newpos.yType = type;
        return true;
      }
    </method>
    
    <method name="stopDrag" args="event, isAbort">
      guides.setActualAttribute('visible', false);
      
      if (isAbort) {
        this.parent._abort();
      } else {
        this.parent._stop();
      }
      this.super();
    </method>
  </controlhandle>
</class>