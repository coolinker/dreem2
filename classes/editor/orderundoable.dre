<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
  * @class dr.editor.orderundoable {UI Components}
  * @extends dr.editor.undoable
  * An undoable that updates the lexical order of a view.
  */-->
<class name="editor-orderundoable" extends="editor-undoable"
  undodescription='Undo change order of view.'
  redodescription='Redo change order of view.'
>
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {dr.AccessorSupport} [target]
    * The target object that will be moved.
    */-->
  <attribute name="target" type="expression" value=""></attribute>

  <!--/**
    * @attribute {expression} [oldprevsibling]
    * The view the target view begins in front of.
    */-->
  <attribute name="oldprevsibling" type="expression" value="undefined"></attribute>

  <!--/**
    * @attribute {expression} [newprevsibling]
    * The view the target view ends up in front of.
    */-->
  <attribute name="newprevsibling" type="expression" value="undefined"></attribute>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <method name="undo" args="callback">
    if (this.done) {
      if (this.oldprevsibling) {
        this.target.moveInFrontOf(this.oldprevsibling);
      } else {
        this.target.moveToBack();
      }
    } else {
      dr.global.error.notifyWarn('invalidUndo', "Invalid undo in orderundoable.");
    }
    return this.super();
  </method>

  <method name="redo" args="callback">
    if (this.done) {
      dr.global.error.notifyWarn('invalidRedo', "Invalid redo in orderundoable.");
    } else {
      if (this.newprevsibling) {
        this.target.moveInFrontOf(this.newprevsibling);
      } else {
        this.target.moveToBack();
      }
    }
    return this.super();
  </method>

  <!--/**
    * @method serialize
    * @overrides
    */-->
  <method name="serialize" args="obj">
    if (!obj) obj = {};
    
    // Store attrs of this undoable on the obj to be serialized. Use IDs for
    // any node/view references since we just want to retrieve the objects
    // from the composition during deserialization not serialize/deserialize 
    // entire view/node objects.
    obj.target = this.target.id || null;
    obj.oldprevsibling = this.oldprevsibling ? this.oldprevsibling.id : null;
    obj.newprevsibling = this.newprevsibling ? this.newprevsibling.id : null;
    
    return this.super(obj);
  </method>

  <!--/**
    * @method deserialize
    * @overrides
    */-->
  <method name="deserialize" args="data">
    // Retrieve objects via the serialized IDs.
    var retrieveFunc = dr.editor.undoable.retrieveById;
    data.target = dr.editor.undoable.retrieveById(data.target);
    
    if (!data.target) {
      dr.global.error.notifyWarn('deserialization', "Target could not be found for orderundoable: " + data.target);
      return null;
    }
    
    if (data.oldprevsibling) data.oldprevsibling = retrieveFunc(data.oldprevsibling);
    if (data.newprevsibling) data.newprevsibling = retrieveFunc(data.newprevsibling);
    
    return this.super(data);
  </method>
</class>
