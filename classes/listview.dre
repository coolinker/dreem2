<!-- The MIT License (see LICENSE)
     Copyright (C) 2014-2015 Teem2 LLC -->
<!--/**
   * @class dr.listview {UI Component}
   * A floating panel that contains a list of items.
   */-->
<class name="listview" extends="floatingpanel" requires="listviewitem, listviewseparator"
  bgcolor="#cccccc" boxshadow="[0,3,6,0,'#999999']" scrollable="true"
>
  <!--// Attributes /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {Number} maxheight
    * The maximum height of the list view in pixels. If set to -1 no max 
    * height will be used.
    */-->
  <attribute name="maxheight" type="number" value="-1"/>
  <setter name="maxheight" args="v">
    if (this.setActual('maxheight', v, 'number', -1)) {
      if (this.inited) this.setAttribute('height', this.height);
    }
  </setter>

  <!--/**
    * @attribute {Number} minwidth
    * The minimum width for the list. The list will size itself to fit the 
    * maximum width of the items in the list or this value whichever is larger.
    */-->
  <attribute name="minwidth" type="number" value="0"/>

  <!--/**
    * @attribute {Class} defaultitemclass
    * The class to use for list items if one is not provided in the config.
    */-->
  <attribute name="defaultitemclass" type="expression" value="dr.listviewitem"/>

  <!--/**
    * @attribute {Array} itemconfig
    * An array of configuration information for the items in the list.
    */-->
  <attribute name="itemconfig" type="expression" value="[]"/>
  <setter name="itemconfig" args="v">
    if (this.setActual('itemconfig', v, 'expression', [])) {
      if (this.inited) this.__updateItems();
    }
  </setter>

  <!--/**
    * @attribute {Array} itemconfig
    * @readonly
    * The array of items in the list.
    */-->
  <attribute name="items" type="expression" value="[]"/>

  <!--/** @overrides */-->
  <setter name="height" args="v">
    // Limit height if necessary
    if (this.maxheight >= 0) v = Math.min(this.maxheight, v);
    
    return this.super(v);
  </setter>


  <!--// Life Cycle /////////////////////////////////////////////////////////-->
  <method name="initNode" args="parent, attrs">
    this.super();
    
    this.__updateItems();
  </method>


  <!--// Methods ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method getContentView
    * Get the view that will contain list content.
    * @returns {dr.view}
    */-->
  <method name="getContentView">
    return this;
  </method>

  <!--/**
    * @method doItemActivated
    * The listviewitems of this listview should call this method when they are 
    * activated. The default implementation invokes doItemActivated on the
    * listviewanchor.
    * @param {dr.view} itemView
    */-->
  <method name="doItemActivated" args="itemView">
    var owner = this.owner;
    if (owner) owner.doItemActivated(itemView);
  </method>

  <!--/** @overrides */-->
  <method name="getFirstFocusableDescendant">
    return this.getFirstFocusableItem() || this.super();
  </method>

  <method name="getFirstFocusableItem">
    var items = this.items, item, len = items.length, i = 0;
    for (; len > i; ++i) {
      item = items[i];
      if (item.isFocusable()) return item;
    }
    return null;
  </method>

  <!--/**
    * @method getLastFocusableItem
    * Gets the last focusable item in this list.
    */-->
  <method name="getLastFocusableItem">
    var items = this.items, item, i = items.length;
    while (i) {
      item = items[--i];
      if (item.isFocusable()) return item;
    }
    return null;
  </method>

  <!--/** @private */-->
  <method name="__updateItems">
    var cfg = this.itemconfig || [],
        cfgLen = cfg.length, cfgItem, cfgClass, cfgAttrs,
        items = this.items, itemsLen = items.length, item,
        defaultItemClass = this.defaultitemclass,
        contentView = this.getContentView(), 
        layouts = contentView.getLayouts(), layout,
        layoutLen = layouts.length, i,
        minItemWidth, 
        minWidth = this.minwidth;
    
    // Lock layouts during reconfiguration
    i = layoutLen;
    while (i) layouts[--i].setAttribute('locked', true);
    
    // Reconfigure list
    for (i = 0; cfgLen > i; ++i) {
      cfgItem = cfg[i];
      cfgClass = cfgItem.klass || defaultItemClass;
      cfgAttrs = cfgItem.attrs || {};
      
      item = items[i];
      
      // Destroy existing item if it's the wrong class
      if (item && !item.isA(cfgClass)) {
        item.destroy();
        item = null;
      }
      
      // Create a new item if no item exists
      if (!item) item = items[i] = new cfgClass(contentView, {listview:this});
      
      // Apply config to item and measure width
      if (item) {
        item.setAttributes(cfgAttrs);
        minItemWidth = item.getMinimumWidth();
        if (minItemWidth > minWidth) minWidth = minItemWidth;
      }
    }
    
    // Delete any remaining items
    for (; itemsLen > i; ++i) items[i].destroy();
    items.length = cfgLen;
    
    // Resize items and contentView
    for (i = 0; cfgLen > i; ++i) items[i].setAttribute('width', minWidth);
    contentView.setAttribute('width', minWidth);
    
    // Unlock layouts and update
    i = layoutLen;
    while (i) layouts[--i].setAttribute('locked', false);
  </method>


  <!--// Views //////////////////////////////////////////////////////////////-->
  <spacedlayout axis="y" spacing="1" updateparent="true"/>
</class>