<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Variable Layout'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view width="100%" height="100%" bgcolor="#cccccc">
      <class name="item" width="10" height="10"></class>
      
      <view name="container" width="100" height="100" bgcolor="#999999">
        <variablelayout name="layoutX" attribute="x" value="10">
          <handler event="oninit">
            this.beforeCallCount = 0;
            this.afterCallCount = 0;
          </handler>
          <method name="doBeforeUpdate">
            this.beforeCallCount++;
          </method>
          <method name="updateSubview" args="count, view, attribute, value">
            return this.super() + count + view.width;
          </method>
          <method name="doAfterUpdate" args="value">
            this.afterCallCount++;
            this.afterValue = value;
          </method>
          <method name="updateParent" args="attribute, value, count">
            this.parent.setAttribute('width', value);
          </method>
        </variablelayout>
        
        <!-- Variable layout should behave pretty much like a constant layout
             if you don't override anything. -->
        <variablelayout name="layoutBgcolor" attribute="bgcolor" value="'#666666'"></variablelayout>
        
        <item name="v1"></item>
        <item name="v2"></item>
        <item name="v3"></item>
        <item name="v4"></item>
        <item name="v5" height="5" width="5"></item>
        <item name="v6" visible="false"></item>
        
        <variablelayout name="layoutY" attribute="y" value="5" updateparent="true">
          <method name="updateSubview" args="count, view, attribute, value">
            return this.super() + count + view.height;
          </method>
          <method name="skipSubview" args="view">
            return 5 >= view.height || this.super()
          </method>
          <method name="updateParent" args="attribute, value, count">
            this.parent.setAttribute(attribute, value);
          </method>
        </variablelayout>
      </view>
      
      <!-- Test layout order -->
      <view name="container2" x="150" width="100" height="100" bgcolor="#999999">
        <variablelayout name="layoutY" attribute="y" value="5" updateparent="true">
          <method name="updateSubview" args="count, view, attribute, value">
            return this.super() + view.height;
          </method>
        </variablelayout>
        
        <item name="v1" x="10" bgcolor="red"/>
        <item name="v2" x="20" bgcolor="green"/>
        <item name="v3" x="30" bgcolor="blue"/>
        
        <handler event="oninit">
          // Verify initial order
          var layoutSubs = this.layoutY.getSubviews(), subs = this.getSubviews();
          assert.deepEqual(subs, layoutSubs, 'The parent and layout subviews should be identical.');
          
          // Verify ignorelayout changes maintain order
          this.v2.setAttribute('ignorelayout', true);
          
          assert.lengthOf(layoutSubs, 2, 'View 2 was removed from the layout.');
          assert.equal(layoutSubs[0], subs[0], 'First entries still match.');
          assert.equal(layoutSubs[1], subs[2], 'Second layout subview should be third view subview.');
          
          this.v2.setAttribute('ignorelayout', false);
          
          assert.lengthOf(layoutSubs, 3, 'View 3 was removed from the layout.');
          assert.equal(layoutSubs[0], subs[0], 'First entries still match.');
          assert.equal(layoutSubs[1], subs[1], 'Second entries still match.');
          assert.equal(layoutSubs[2], subs[2], 'Third entries still match.');
          
          // Lexical order changes
          this.v3.moveBehind(this.v2);
          assert.equal(layoutSubs[0], subs[0], 'First entries still match.');
          assert.equal(layoutSubs[1], subs[1], 'Second entries still match.');
          assert.equal(layoutSubs[2], subs[2], 'Third entries still match.');
          
          // Adding a subview
        </handler>
      </view>
      
      <handler event="oninit">
        var container = this.container,
            layoutX = container.layoutX,
            layoutY = container.layoutY,
            layoutBgcolor = container.layoutBgcolor,
            v1 = container.v1,
            v2 = container.v2,
            v3 = container.v3,
            v4 = container.v4,
            v5 = container.v5,
            v6 = container.v6;
        
        // Verify doBeforeUpdate and doAfterUpdate we're called
        assert.equal(1, layoutX.beforeCallCount, 'doBeforeUpdate should be called once.');
        assert.equal(1, layoutX.afterCallCount, 'doAfterUpdate should be called once.');
        assert.equal(70, layoutX.afterValue, 'The value passed to doAfterUpdate should be 70.');
        
        // Verify updateSubview works and default as well as overridden 
        // skipSubview works
        assert.equal('#666666', v1.bgcolor, 'View one should have a bgcolor of #666666.');
        assert.equal('#666666', v2.bgcolor, 'View two should have a bgcolor of #666666.');
        assert.equal('#666666', v3.bgcolor, 'View three should have a bgcolor of #666666.');
        assert.equal('#666666', v4.bgcolor, 'View four should have a bgcolor of #666666.');
        assert.equal('#666666', v5.bgcolor, 'View five should have a bgcolor of #666666.');
        assert.equal('transparent', v6.bgcolor, 'View six should have a bgcolor of undefined.');
        
        assert.equal(10, v1.x, 'View one should have an x of 10.');
        assert.equal(21, v2.x, 'View two should have an x of 21.');
        assert.equal(33, v3.x, 'View three should have an x of 33.');
        assert.equal(46, v4.x, 'View four should have an x of 46.');
        assert.equal(60, v5.x, 'View five should have an x of 60.');
        assert.equal(0, v6.x, 'View six should have an x of 0.');
        
        assert.equal(5, v1.y, 'View one should have a y of 5.');
        assert.equal(16, v2.y, 'View two should have a y of 16.');
        assert.equal(28, v3.y, 'View three should have a y of 28.');
        assert.equal(41, v4.y, 'View four should have a y of 41.');
        assert.equal(0, v5.y, 'View five should have a y of 0 because it gets skipped.');
        assert.equal(0, v6.y, 'View six should have a y of 0.');
        
        assert.equal(55, container.y, 'Update parent should set the container y to 55.');
        assert.equal(100, container.width, 'Update parent for layoutX should not have been called.');
        
        // Verify subview monitoring works
        v3.setAttribute('visible', false);
        assert.equal(2, layoutX.beforeCallCount, 'doBeforeUpdate should be called once again.');
        assert.equal(2, layoutX.afterCallCount, 'doAfterUpdate should be called once again.');
        assert.equal(55, layoutX.afterValue, 'The value passed to doAfterUpdate should be 55.');
        
        assert.equal(10, v1.x, 'View one should have an x of 10.');
        assert.equal(21, v2.x, 'View two should have an x of 21.');
        assert.equal(33, v3.x, 'View three should still have an x of 33.');
        assert.equal(33, v4.x, 'View four should have an x of 33.');
        assert.equal(46, v5.x, 'View five should have an x of 46.');
        assert.equal(0, v6.x, 'View six should have an x of 0.');
        
        assert.equal(5, v1.y, 'View one should have a y of 5.');
        assert.equal(16, v2.y, 'View two should have a y of 16.');
        assert.equal(28, v3.y, 'View three should still have a y of 28.');
        assert.equal(28, v4.y, 'View four should have a y of 28.');
        assert.equal(0, v5.y, 'View five should have a y of 0 because it gets skipped.');
        assert.equal(0, v6.y, 'View six should have a y of 0.');
        
        assert.equal(41, container.y, 'Update parent should set the container y to 41.');
        
        v6.setAttribute('visible', true);
        assert.equal(3, layoutX.beforeCallCount, 'doBeforeUpdate should be called once again.');
        assert.equal(3, layoutX.afterCallCount, 'doAfterUpdate should be called once again.');
        
        assert.equal('#666666', v6.bgcolor, 'View six should have a bgcolor of #666666.');
        
        assert.equal(10, v1.x, 'View one should have an x of 10.');
        assert.equal(21, v2.x, 'View two should have an x of 21.');
        assert.equal(33, v3.x, 'View three should still have an x of 33.');
        assert.equal(33, v4.x, 'View four should have an x of 33.');
        assert.equal(46, v5.x, 'View five should have an x of 46.');
        assert.equal(55, v6.x, 'View six should have an x of 55.');
        
        assert.equal(5, v1.y, 'View one should have a y of 5.');
        assert.equal(16, v2.y, 'View two should have a y of 16.');
        assert.equal(28, v3.y, 'View three should still have a y of 28.');
        assert.equal(28, v4.y, 'View four should have a y of 28.');
        assert.equal(0, v5.y, 'View five should have a y of 0 because it gets skipped.');
        assert.equal(41, v6.y, 'View six should have a y of 41.');
        
        assert.equal(55, container.y, 'Update parent should set the container y to 55.');
        
        layoutX.setAttribute('updateparent', true);
        assert.equal(4, layoutX.beforeCallCount, 'doBeforeUpdate should be called once again.');
        assert.equal(4, layoutX.afterCallCount, 'doAfterUpdate should be called once again.');
        
        assert.equal(70, container.width, 'Update parent for layoutX should set the container width to 70.');
        
        // Verify reverse works
        layoutX.setAttribute('reverse', true);
        
        assert.equal(55, v1.x, 'View one should have an x of 10.');
        assert.equal(41, v2.x, 'View two should have an x of 41.');
        assert.equal(33, v3.x, 'View three should still have an x of 33.');
        assert.equal(28, v4.x, 'View four should have an x of 28.');
        assert.equal(21, v5.x, 'View five should have an x of 21.');
        assert.equal(10, v6.x, 'View six should have an x of 10.');
        
        assert.equal(70, container.width, 'Update parent for layoutX should set the container width to 70.');
      </handler>
    </view>
  </screen>
</screens>
</composition>