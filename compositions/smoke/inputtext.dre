<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Input Text'>
    <include href="./includes/boilerplate.dre"></include>
    
    <!-- InputText smoke tests. See spec/features/inputtext_spec.rb for interactive tests -->
    <view width="100%" height="100%" scrollable="true" bgcolor="#999999" padding="20">
      <wrappinglayout spacing="5" linespacing="5"></wrappinglayout>
    
      <!-- Setting text with static attribute -->
      <inputtext>
        <handler event="oninit">
          assert.testCaseLabel = 'Setting text with static attribute';
          assert.equal(this.text, "", "no attr set");
          assert.equal(this.value, "", "no attr set");
        </handler>
      </inputtext>
    
      <inputtext text="">
        <handler event="oninit">
          assert.equal(this.text, "", "attr set to empty string");
          assert.equal(this.value, "", "attr set to empty string");
        </handler>
      </inputtext>
    
      <inputtext text="some text" bgcolor="thistle">
        <handler event="oninit">
          assert.equal(this.text, "some text", "attr set to some text");
          assert.equal(this.value, "some text", "attr set to some text");
        </handler>
      </inputtext>
      
      <!-- Setting text by the value attribute -->
      <inputtext value="">
        <handler event="oninit">
          assert.equal(this.text, "", "attr set to empty string");
          assert.equal(this.value, "", "attr set to empty string");
        </handler>
      </inputtext>
    
      <inputtext text="some text" bgcolor="thistle">
        <handler event="oninit">
          assert.equal(this.text, "some text", "attr set to some text");
          assert.equal(this.value, "some text", "attr set to some text");
        </handler>
      </inputtext>
      
      <!-- Setting text programatically -->
      <inputtext text="some text" bgcolor="orange">
        <handler event="oninit">
          assert.equal(this.text, "some text", "attr set to some text");
          assert.equal(this.value, "some text", "attr set to some text");
          
          this.setAttribute('text', 'foo');
          
          assert.equal(this.text, "foo");
          assert.equal(this.value, "foo");
          
          this.setAttribute('value', 'bar');
          
          assert.equal(this.text, "bar");
          assert.equal(this.value, "bar");
        </handler>
      </inputtext>
      
      <!-- Value formatting -->
      <inputtext text="some text" bgcolor="orange">
        <method name="format" args="str">
          if (typeof str === 'string') {
            return str + " MODIFIED";
          } else {
            return (str && str.value) ? str.value : '';
          }
        </method>
        <handler event="oninit">
          assert.equal(this.text, "some text MODIFIED", "attr set to some text");
          assert.equal(this.value, "some text MODIFIED", "attr set to some text");
          
          this.setAttribute('text', 'foo');
          
          assert.equal(this.text, "foo MODIFIED");
          assert.equal(this.value, "foo MODIFIED");
          
          this.setAttribute('value', 'bar');
          
          assert.equal(this.text, "bar MODIFIED");
          assert.equal(this.value, "bar MODIFIED");
          
          this.setAttribute('text', {value:'hello'});
          
          assert.equal(this.text, 'hello');
          assert.equal(this.value, 'hello');
          
          this.setAttribute('text', null);
          
          assert.equal(this.text, '');
          assert.equal(this.value, '');
        </handler>
      </inputtext>
    
      <!-- Setting text with a constraint -->
      <view width="auto" height="auto" padding="2" bgcolor="red">
        <attribute name="text" type="string" value="some text"></attribute>
    
        <inputtext bgcolor="lightgreen" text="${this.parent.text}">
          <handler event="oninit">
            assert.testCaseLabel = 'Setting text with a constraint';
            assert.equal(this.sprite.get_value(), 'some text');
            assert.equal(this.text, "some text");
          </handler>
        </inputtext>
        
        <handler event="oninit">
          assert.equal(this.width, 104)
          assert.closeTo(this.height, 27, 5, 'Default height is 1 line which is approx 23px.')
        </handler>
      </view>
    
      <view width="auto" height="auto" padding="2" bgcolor="red">
        <inputtext bgcolor="lightyellow" text="${this.parent.text}">
          <handler event="oninit">
            assert.equal(this.sprite.get_value(), '');
            assert.equal(this.text, '');
          </handler>
        </inputtext>
      </view>
    
      <!-- Setting width and height -->
      <inputtext width="100" height="30" bgcolor="lightpink">
        <handler event="oninit">
          assert.testCaseLabel = 'Setting width and height';
          
          assert.equal(this.width, 100);
          assert.equal(this.height, 30);
    
          this.setAttribute('width', 140)
          this.setAttribute('height', 100)
          assert.equal(this.width, 140)
          assert.equal(this.height, 100)
        </handler>
      </inputtext>
    
      <!-- Setting text between tags -->
      <inputtext>
        some other text
        <handler event="oninit">
          assert.testCaseLabel = 'Setting text between tags';
          assert.equal(this.text, 'some other text')
          assert.equal(this.value, 'some other text')
        </handler>
      </inputtext>
    
      <!-- Default sizing -->
      <inputtext bgcolor="green">
        Text
        <handler event="oninit">
          assert.testCaseLabel = 'Default sizing';
          
          assert.equal(this.__cfg_width, '100', 'Default configured width is 100.')
          assert.equal(this.__cfg_height, 'auto', 'Default configured height is auto.')
          
          assert.equal(this.width, 100, 'Default width is 100.')
          assert.closeTo(this.height, 23, 5, 'Default height is 1 line which is approx 23px.')
        </handler>
      </inputtext>
      
      <!-- Borders and Padding -->
      <inputtext border="1" bordercolor="black" padding="10">
        Text
        <handler event="oninit">
          assert.testCaseLabel = 'Border and padding sizing';
          
          assert.equal(this.width, 100, 'Default width is 100.')
          assert.closeTo(this.height, 45, 5, 'Default height is 1 line which is approx 45px due to border and padding.')
        </handler>
      </inputtext>
    
      <!-- Multiline -->
      <inputtext bgcolor="thistle" multiline="true">
        Test content heres some more test content to make this a lot bigger
        <handler event="oninit">
          assert.testCaseLabel = 'Multiline';
          assert.equal(this.multiline, true)
          assert.equal(this.rows, 3)
          
          // Use this until we add browser detection
          var firefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1
          var mac = navigator.userAgent.toLowerCase().indexOf('macintosh') > -1
          if (firefox && !mac) {
            // Firefox on windows and linux has different sizes
            assert.closeTo(this.height, 89, 5, 'Default height is 3 lines')
          }
          else {
            assert.closeTo(this.height, 69, 5, 'Default height is 3 lines')
          }

        </handler>
      </inputtext>
      
      <inputtext bgcolor="thistle" multiline="true" rows="5" width="200">
        Test content here's some more test content to make this a lot bigger
        <handler event="oninit">
          assert.testCaseLabel = 'Multiline';
          assert.equal(this.multiline, true)
          assert.equal(this.rows, 5)
          
          assert.equal(this.width, 200, 'Width is 200.')

          // Use this until we add browser detection
          var firefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1
          var mac = navigator.userAgent.toLowerCase().indexOf('macintosh') > -1
          if (firefox && !mac) {
            // Firefox on windows and linux has different sizes
            assert.closeTo(this.height, 137, 5, 'Height is 5 lines');
          }
          else {
            assert.closeTo(this.height, 115, 5, 'Height is 5 lines');
          }

          
          assert.equal(this.text,  'Test content here\'s some more test content to make this a lot bigger')
          assert.equal(this.value, 'Test content here\'s some more test content to make this a lot bigger')
        </handler>
      </inputtext>
      
      <inputtext bgcolor="thistle" multiline="true" rows="5" width="200">
        Test content here's some more test content to make this a lot bigger
        
        Also, it's two lines
        <handler event="oninit">
          var text = this.text.replace(/\r/g,'');   // Windows/phantom adds \r
          var value = this.value.replace(/\r/g,''); // Windows/phantom adds \r
          assert.isTrue(this.wrap);
          assert.equal(text,  'Test content here\'s some more test content to make this a lot bigger\n        \n        Also, it\'s two lines')
          assert.equal(value, 'Test content here\'s some more test content to make this a lot bigger\n        \n        Also, it\'s two lines')
        </handler>
      </inputtext>
      
      <!-- Wrap Attribute: Requires visual inspection to verify that the text is not wrapped. -->
      <inputtext bgcolor="thistle" multiline="true" wrap="false" width="100">
        This text should not be wrapped.
        
        Also, it's two lines
        <handler event="oninit">
          var text = this.text.replace(/\r/g,'');   // Windows/phantom adds \r
          var value = this.value.replace(/\r/g,''); // Windows/phantom adds \r
          assert.isFalse(this.wrap);
          assert.equal(text,  'This text should not be wrapped.\n        \n        Also, it\'s two lines')
          assert.equal(value, 'This text should not be wrapped.\n        \n        Also, it\'s two lines')
        </handler>
      </inputtext>
      
      <inputtext bgcolor="thistle" multiline="false">
        Test content heres some more test content to make this a lot bigger
        <handler event="oninit">
          assert.equal(this.multiline, false)
        </handler>
      </inputtext>
      
      <!-- Password Fields -->
      <inputtext password="true" width="100" bgcolor="white">
        <handler event="oninit">
          assert.testCaseLabel = 'Password fields';
          assert.equal(this.password, true, "password should be true");
          assert.equal(this.sprite.platformObject.type, 'password');
          
          // Changing the password attribute at runtime should not effect the underlying dom element
          this.setAttribute('password', false);
          assert.equal(this.password, true, "password can not be changed once initing is false.");
          assert.equal(this.sprite.platformObject.type, 'password');
        </handler>
      </inputtext>
      
      <inputtext password="true" multiline="true" width="100" bgcolor="white">
        <handler event="oninit">
          assert.equal(this.password, true, "password should be true");
          assert.equal(this.multiline, false, "multiline should be false even when set to true for password fields.");
        </handler>
      </inputtext>
    </view>
  </screen>
</screens>
</composition>
