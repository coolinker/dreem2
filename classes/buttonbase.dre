<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->



<!--/**
   * @class dr.buttonbase {UI Components}
   * @extends dr.view
   * Base class for button components. Buttons share common elements,
   * including their ability to be selected, a visual element to display
   * their state, and a default and selected color.
   * The visual element is a dr.view that shows the current state of the
   * button. For example, in a labelbutton the entire button is the visual
   * element. For a checkbutton, the visual element is a square dr.view
   * that is inside the button.
   *
   * The following example shows a subclass that has a plain view as the visual 
   * element, and sets selected to true onismousedown. The selectcolor is 
   * automatically applied when selected is true.
   * 
   *     @example
   *     <class name="purplebutton" extends="buttonbase" defaultcolor="purple" selectcolor="plum" width="100" height="40" visual="${this}">
   *        <handler event="onismousedown" args="ismousedown">
   *          this.setAttribute('selected', ismousedown)
   *        </handler>
   *     </class>
   *     <purplebutton></purplebutton>
   */-->
<class name="buttonbase" with="button" type="coffee" clip="true" bordercolor="${this.selectcolor}">
  <!--/**
    * @attribute {String} [defaultcolor="#808080"]
    * The default color of the visual button element when not selected.
    */-->
  <attribute name="defaultcolor" type="string" value="black"></attribute>

  <attribute name="textcolor" type="string" value="white"></attribute>

  <!--/**
    * @attribute {String} [selectcolor="#a0a0a0"]
    * The selected color of the visual button element when selected.
    */-->
  <attribute name="selectcolor" type="string" value="white"></attribute>

  <!--/**
    * @attribute {Boolean} [selected=false]
    * The current state of the button.
    */-->
  <!--/**
    * @event onselected
    * Fired when the state of the button changes.
    * @param {dr.buttonbase} view The dr.buttonbase that fired the event
    */-->
  <!-- selected: button state -->
  <attribute name="selected" type="boolean" value="false"></attribute>

  <!-- text_x, text_y: Location of button text within button -->
  <attribute name="textx" type="number" value="0"></attribute>
  <attribute name="texty" type="number" value="0"></attribute>
  <attribute name="text" type="string" value=""></attribute>

  <handler event="ondefaultcolor,ontextcolor,onselectcolor,onselected,oninit" method="visualize"></handler>

  <handler event="onwidth,onheight,oninnerwidth,oninnerheight,ontext" reference="this.label" method="handleResize"></handler>
  <handler event="onwidth,onheight,oninnerwidth,oninnerheight" method="handleResize"></handler>

  <!-- visualize: Show the current button state -->
  <method name="visualize">
    if @visual
      if @selected
        @visual.setAttribute('bgcolor', @selectcolor);
      else
        @visual.setAttribute('bgcolor', @defaultcolor);

    if @label
      if !@label.text || @label.text.length == 0
        @label.setAttribute('visible', false)
      else
        @label.setAttribute('visible', true)

      if @selected
        @label.setAttribute('color', @defaultcolor);
      else
        @label.setAttribute('color', @textcolor);
  </method>

  <method name="handleResize">
    # Custom behavior in subclasses

    # Detect if the button was supplied with a size. Computed once
    if !@_fixedwidth? then @_fixedwidth = @innerwidth > 0
    if !@_fixedheight? then @_fixedheight = @innerheight > 0
  </method>

  <!-- label: Text label -->
  <!--/**
    * @attribute {String} [text=""]
    * Button text.
    */-->
  <text name="label" type="coffee"
    x="${this.parent.textx}" y="${this.parent.texty}" text="${this.parent.text}"
  ></text>
</class>
