<composition>
<server name='mysvr'>
  <handler name='init'>
    teem.setInterval(function(){
     // console.log('whee')
      //teem.screens.browser.dosomething()

    },100)
  </handler>
</server>
<screens>
  <screen type="browser" name="default" title='Whoo'>
    <method name="foo" args="bar">
      console.log('foo was called.');
    </method>
    <view name="root_instance" width="100%" height="100%" minwidth="1000" bgcolor="#cc99cc" scrollable="true">
      <method name="getColor">
        return '#' + Math.floor(Math.random() * Math.pow(16, 6)).toString(16);
      </method>
    
      <handler event="onscroll" args="scroll">
        console.log('onscroll', scroll);
      </handler>
      
      <!--// Class Definitions //-->
      <class name="item" with="button" extends="view" height="15" width="100" bgcolor="#ff0000">
        <attribute name="thing" type="number" value="20"></attribute>
        <handler event="onactivated" args="activated" type="coffee">
          @count ?= 0
          @count++
          switch @count
            when 1
              @setAttribute('width', 2 * @width)
              @setAttribute('height', 2 * @height) 
            when 2
              @setAttribute('width', @width / 2)
              @setAttribute('height', @height / 2)
            when 3
              @destroy()
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item class', width);
          this.callSuper(width);
          this.foo();
        </setter>

        <method name="foo" args="bar">
          console.log('METHOD:foo', this.width);
        </method>
      </class>
      
      <class name="item2" extends="item" height="200" width="40" bgcolor="#0000ff"></class>
      
      <class name="foo" height="20" width="40" bgcolor="#0000cc">
        <view name="a" with="bar" x="1" y="1" width="20" height="20" bgcolor="#669933">
          <view name="aa" x="12" y="1" width="auto" height="auto" bgcolor="${this.classroot.bgcolor}" border="1" bordercolor="white">
            <text>text</text>
          </view>
        </view>
        <view name="b" x="25" y="1" width="20" height="20" bgcolor="#996633"></view>
      </class>
      
      <class name="subfoo" extends="foo">
        <view name="c" x="1" y="25" width="10" height="10" bgcolor="${this.classroot.classroot.bgcolor}" border="1" bordercolor="white"></view>
      </class>
      
      <mixin name="baz" opacity="0.5"></mixin>
      
      <mixin name="bar" with="baz" defaultplacement="m1"><!-- defaultplacement="m1" -->
        <view name="m1" x="1" y="1" width="90" height="90" bgcolor="red" scrollable="true">
        
        </view>
        <view name="m2" defaultplacement="a" x="1" y="42" width="20" height="40" bgcolor="green" scrollable="true"><!-- defaultplacement="a" -->
          <view name="a" x="2" y="2" width="8" height="8" bgcolor="#0000ff">
          
          </view>
        </view>
      </mixin>
      
      <!--// Instances //-->
      <view with="bar" name="view_instance" x="10" y="20" width="200" height="${this.parent.item2_instance.x + 100}" bgcolor="#ff9999">
        <wrappinglayout id="foolayout" spacing="2" inset="5" speed="1000" updateparent="true"></wrappinglayout>
        <wrappinglayout ignoreplacement="true" spacing="2" inset="5" speed="1000"></wrappinglayout>
        
        <view name="v1" placement="m2.*" x="1" y="1" width="5" height="5" bgcolor="#ffffff"></view>
        
        <view with="button" name="v2" width="25" height="25" bgcolor="#aaaaaa">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('spacing', foolayout.spacing + 10);
            
            if (this.count == null) this.count = -1;
            this.count++;
            
            if (this.count == 10) {
              console.log('start destroy');
              this.destroy();
              console.log('end destroy');
            }
          </handler>
        </view>
        <view with="button" name="v3" width="25" height="25" bgcolor="#bbbbbb">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('spacing', foolayout.spacing - 10);
          </handler>
        </view>
        <view with="button" name="v4" width="25" height="25" bgcolor="#cccccc">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('inset', foolayout.inset + 10);
          </handler>
        </view>
        <view with="button" name="v5" width="25" height="25" bgcolor="#dddddd">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('inset', foolayout.inset - 10);
          </handler>
        </view>
        <view with="button" name="v6" width="25" height="25" bgcolor="#eeeeee">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('axis', foolayout.axis === 'x' ? 'y' : 'x');
          </handler>
        </view>
        <view width="45" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="55" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="55" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="55" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="35" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="55" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="35" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="45" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="35" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
      </view>
      
      <subfoo id="bar" name="subfoo_instance" x="200" width="100" height="40">
        <view name="d" x="50" y="5" width="10" height="10" bgcolor="#9933cc"></view>
      </subfoo>
      
      <item2 name="item2_instance" y="200" x="${this.y / 10 + foo.width + foo.x}" bgcolor="green"></item2>
      <text>text</text>
      <item name="item_instance" y="250" id="foo" bgcolor="orange">
        <attribute name="thing" type="number" value="5"></attribute>
        <attribute name="another" type="string" value="hello"></attribute>
        <attribute name="again" type="boolean" value="true"></attribute>
        
        <handler event="onactivated" args="activated">
          console.log('HANDLER:activated', activated, this.thing, this.another, this.again);
        </handler>
        <handler event="onanother" args="another">
          console.log('HANDLER:another', another);
        </handler>
        <handler event="onthing" args="thing">
          console.log('HANDLER:thing', thing);
        </handler>
        <handler event="onthing,onanother  oninit" args="value">
          console.log('MULTI HANDLER', value);
        </handler>
        <handler event="ondestroy" args="value">
          console.log('HANDLER:destroy', value);
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item instance', width, this.inited);
          if (this.inited) {
            this.setAttribute('opacity', this.opacity / 2);
            this.setAttribute('another', 'hi there');
            this.setAttribute('thing', 132);
          }
          this.callSuper(width);
        </setter>
        <animator name="anim_1" attribute="x" to="100" repeat="2" running="true"></animator>
        <animator name="anim_2" attribute="y" to="-25" relative="true" running="true"></animator>
      </item>
      <handler event="onanother" args="another" reference="this.item_instance">
        console.log('HANDLER:another by reference', another);
      </handler>
      <handler event="onthing" args="thing" reference="foo">
        console.log('HANDLER:thing by reference', thing);
      </handler>
      
      <dreem-text name="dreemtext_instance" text="This is text in an attr" x="250" y="100" bgcolor="white"></dreem-text>
      <text name="text_instance" x="250" y="150" bgcolor="orange">text as content</text>
      <markup x="50" y="120">asdf asdf asdf</markup>
      
      <mixin name="commonDragBehavior" with="draggable" bgcolor="green" border="1" bordercolor="white">
        <handler event="onisdragging" args="isdragging">
          this.moveToFront();
          this.setAttribute('bgcolor', isdragging ? 'orange' : 'green');
        </handler>
      </mixin>
      
      <view x="300" y="100" width="500" height="500" bgcolor="#999999" scrollable="true">
        <handler event="oninit">
          this.moveToBack();
        </handler>
        
        <view x="100" y="100" width="500" height="500" bgcolor="#cccccc" scrollable="true">
          <view with="commonDragBehavior"
            distancebeforedrag="10" dragaxis="x"
            x="10" y="10" width="30" height="30"
          ></view>
          
          <view with="commonDragBehavior"
            isdraggable="false"
            x="100" y="100" width="20" height="20"
          ></view>
          
          <view with="commonDragBehavior,button"
            centeronmouse="true" allowabort="true"
            x="50" y="50" width="50" height="60"
          >
            <method name="updatePosition" args="x,y">
              this.super();
              if (this.getDistanceFromOriginalLocation() > 100) this.setAttribute('disabled', true);
            </method>
          </view>
          
          <view with="commonDragBehavior"
            allowabort="true"
            x="150" y="50" width="200" height="80"
          >
            <method name="getDragViews">
              return this.header;
            </method>
            <view name="header" with="button" width="100%" height="10" bgcolor="white"></view>
            
            <buttonbase x="5" y="15" defaultcolor="orange" selectcolor="purple" width="40" height="24" text="itis" visual="${this}">
              <handler event="onmousedown" args="mousedown">
                this.setAttribute('selected', mousedown);
              </handler>
            </buttonbase>
            
            <labelbutton x="5" y="40">foo bar baz</labelbutton>
          </view>
        </view>
      </view>
    </view>
  </screen>

  <screen type="dali" name="dali" title='Whoo'>
    <method name="foo" args="bar">
      console.log('foo was called.');
    </method>
    <view name="root_instance" width="100%" height="100%" minwidth="1000" bgcolor="#cc99cc" scrollable="true">
      <method name="getColor">
        function getHex() {
            return Math.floor(Math.random() * 16).toString(16);
        };
        return '#' + getHex() + getHex() + getHex() + getHex() + getHex() + getHex();
      </method>
      
      <handler event="onscroll" args="scroll">
        console.log('onscroll', scroll);
      </handler>
      
      <!--// Class Definitions //-->
      <class name="item" with="button" extends="view" height="15" width="100" bgcolor="#ff0000">
        <attribute name="thing" type="number" value="20"></attribute>
        <handler event="onactivated" args="activated" type="coffee">
          @count ?= 0
          @count++
          switch @count
            when 1
              @setAttribute('width', 2 * @width)
              @setAttribute('height', 2 * @height) 
            when 2
              @setAttribute('width', @width / 2) 			  
              @setAttribute('height', @height / 2)
            when 3
              @destroy()
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item class', width);
          this.callSuper(width);
          this.foo();
        </setter>
	
        <method name="foo" args="bar">
          console.log('METHOD:foo', this.width);
        </method>
      </class>
      
      <class name="item2" extends="item" height="200" width="40" bgcolor="#0000ff"></class>
      
      <class name="foo" height="20" width="40" bgcolor="#0000cc">
        <view name="a" with="bar" x="1" y="1" width="20" height="20" bgcolor="#669933">
          <view name="aa" x="12" y="1" width="5" height="5" bgcolor="${this.classroot.bgcolor}" border="1" bordercolor="white"></view>
        </view>
        <view name="b" x="25" y="1" width="20" height="20" bgcolor="#996633"></view>
      </class>
      
      <class name="subfoo" extends="foo">
        <view name="c" x="1" y="25" width="10" height="10" bgcolor="${this.classroot.classroot.bgcolor}" border="1" bordercolor="white"></view>
      </class>
      
      <mixin name="baz" opacity="0.5"></mixin>
      
      <mixin name="bar" with="baz">
        <view name="m1" x="1" y="1" width="10" height="10" bgcolor="#ff0000"></view>
      </mixin>
      
      <!--// Instances //-->
      <view with="bar" name="view_instance" x="10" y="20" width="200" height="${this.parent.item2_instance.x + 100}" bgcolor="#ff9999">
        <wrappinglayout id="foolayout" spacing="2" inset="20" speed="1000"></wrappinglayout>
        
        <view name="v1" placement="m1" width="5" height="5" bgcolor="#ffffff"></view>
        
        <view with="button" name="v2" width="25" height="25" bgcolor="#aaaaaa">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('spacing', foolayout.spacing + 10);
            
            if (this.count == null) this.count = -1;
            this.count++;
            
            if (this.count == 10) {
              console.log('start destroy');
              this.destroy();
              console.log('end destroy');
            }
          </handler>
        </view>
        <view with="button" name="v3" width="25" height="25" bgcolor="#bbbbbb">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('spacing', foolayout.spacing - 10);
          </handler>
        </view>
        <view with="button" name="v4" width="25" height="25" bgcolor="#cccccc">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('inset', foolayout.inset + 10);
          </handler>
        </view>
        <view with="button" name="v5" width="25" height="25" bgcolor="#dddddd">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('inset', foolayout.inset - 10);
          </handler>
        </view>
        <view with="button" name="v6" width="25" height="25" bgcolor="#eeeeee">
          <handler event="onactivated" args="activated">
            foolayout.setAttribute('axis', foolayout.axis === 'x' ? 'y' : 'x');
          </handler>
        </view>
        <view width="45" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="55" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="55" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="55" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="35" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="55" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="35" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="45" bgcolor="${this.classroot.getColor()}"></view>
        <view width="45" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="35" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="35" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
        <view width="25" height="25" bgcolor="${this.classroot.getColor()}"></view>
      </view>
      
      <subfoo id="bar" name="subfoo_instance" x="200" width="100" height="40">
        <view name="d" x="50" y="5" width="10" height="10" bgcolor="#9933cc"></view>
      </subfoo>
      
    <item2 name="item2_instance" y="200" x="${this.y / 10 + foo.width + foo.x}" bgcolor="green"></item2>
      
      <item name="item_instance" y="250" id="foo" bgcolor="orange">
        <attribute name="thing" type="number" value="5"></attribute>
        <attribute name="another" type="string" value="hello"></attribute>
        <attribute name="again" type="boolean" value="true"></attribute>
        
        <handler event="onactivated" args="activated">
          console.log('HANDLER:activated', activated, this.thing, this.another, this.again);
        </handler>
        <handler event="onanother" args="another">
          console.log('HANDLER:another', another);
        </handler>
        <handler event="onthing" args="thing">
          console.log('HANDLER:thing', thing);
        </handler>
        <handler event="onthing,onanother  oninit" args="value">
          console.log('MULTI HANDLER', value);
        </handler>
        <handler event="ondestroy" args="value">
          console.log('HANDLER:destroy', value);
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item instance', width, this.inited);
          if (this.inited) {
            this.setAttribute('opacity', this.opacity / 2);
            this.setAttribute('another', 'hi there');
            this.setAttribute('thing', 132);
          }
          this.callSuper(width);
        </setter>
        <animator name="anim_1" attribute="x" to="100" repeat="2" running="true"></animator>
        <animator name="anim_2" attribute="y" to="-25" relative="true" running="true"></animator>
      </item>
      <handler event="onanother" args="another" reference="this.item_instance">
        console.log('HANDLER:another by reference', another);
      </handler>
      <handler event="onthing" args="thing" reference="foo">
        console.log('HANDLER:thing by reference', thing);
      </handler>
      
      <dreem-text name="dreemtext_instance" text="Hai bob!." x="250" y="100" bgcolor="white"></dreem-text>
      <text name="text_instance" x="250" y="150" bgcolor="orange">text as content</text>
      <!--markup x="50" y="120">asdf asdf asdf</markup-->
    </view>
  </screen>
  </screens>
</composition>