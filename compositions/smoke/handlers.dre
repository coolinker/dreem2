<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Attributes'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view id="root" width="100%" height="100%" clip="true">
      <testingtimer>200</testingtimer>
      
      <attribute name="bgcolorhandled" type="boolean" value="false"></attribute>
      <attribute name="hasbeenselected" type="boolean" value="false"></attribute>
      
      <spacedlayout axis="y" spacing="15"></spacedlayout>
      
      <!-- Incomplete handler definitions will generate messages. -->
      <expectedoutput>Handler has no attributes.</expectedoutput>
      <handler></handler>
      
      <!-- Handler with no event or name generates a message. -->
      <expectedoutput>Handler has no event attribute.</expectedoutput>
      <handler method="foo"></handler>
      
      <!-- Handler with an empty reference attribute generates a message. -->
      <expectedoutput>Empty reference attribute in handler.</expectedoutput>
      <handler event="onwidth" reference=""></handler>
      
      <!-- Handler that points to a non-existant reference generates a message. -->
      <expectedoutput>resolveName failed for:foo at part:0 "foo"</expectedoutput>
      <handler event="onwidth" reference="foo"></handler>
      
      <!-- Handler that points to a non-existant method generates a message. -->
      <expectedoutput>Target method "foo" not found when firing "onwidth" event.</expectedoutput>
      <handler event="onwidth" method="foo"></handler>
      
      <!-- Handler that points to a non-function method generates a message. -->
      <expectedoutput>Target method "x" not a function when firing "onwidth" event.</expectedoutput>
      <handler event="onwidth" method="x"></handler>
      
      
      <!-- Events are thrown for attributes set in the declaration -->
      <!-- Also verifies that oninit fires after the other on<attr> events -->
      <view bgcolor="AliceBlue" width="50" height="20">
        <handler event="onbgcolor" args="c">
          root.bgcolorhandled = true
        </handler>
        <handler event="oninit">
          assert.equal(root.bgcolorhandled, true)
        </handler>
      </view>
  
      <!-- Handler executes after the new value has been set -->
      <view bgcolor="AliceBlue" width="50" height="20">
        <handler event="onbgcolor" args="c">
          assert.equal(c, this.bgcolor)
        </handler>
      </view>
  
      <!-- Attaching by reference -->
      <view id="v1" with="button" name="v1" width="50" height="50" bgcolor="green"></view>
      <view id="v2" with="button" name="v2" width="50" height="50" bgcolor="green">
        <!-- Verifies two handlers with the same event name but different
             references don't step on each other. -->
        <handler event="onactivated" reference="v1">
          this.v1clicked = true
        </handler>
        <handler event="onactivated">
          this.v2clicked = true
        </handler>
        
        <handler event="oninit">
          assert.equal(this.v1clicked, undefined, 'Verify initial state.');
          assert.equal(this.v2clicked, undefined, 'Verify initial state.');
          
          v1.doActivated();
          
          assert.equal(this.v1clicked, true);
          assert.equal(this.v2clicked, undefined);
          
          this.doActivated();
          
          assert.equal(this.v1clicked, true);
          assert.equal(this.v2clicked, true);
        </handler>
      </view>
  
      <view with="button" id="greenbox" text="green" bgcolor="white"></view>
      <handler event="onselected" args="value" reference="greenbox">
        root.hasbeenselected = true
      </handler>
      
      <handler event="oninit">
        greenbox.setAttribute('selected', true)
        
        this.eventAttrWorks = true;
        
        var self = this;
        window.setTimeout(function() {
          assert.isTrue(root.hasbeenselected);
          
          assert.isTrue(self.eventAttrWorks);
          assert.isTrue(self.secondOninit);
          
          // Call a handler by name
          assert.equal(self.handlerAsMethod(5), 5);
          assert.equal(self.handlerAsMethod(3), 8);
        }, 0);
      </handler>
      
      <!-- Multiple handlers are just fine. -->
      <handler event="oninit">
        this.secondOninit = true;
      </handler>
      
      <!-- Verify named handlers are useable as methods and that you can
           pass in and return values from them. -->
      <attribute name="baz" type="number" value="0"></attribute>
      <handler event="onbaz" name="handlerAsMethod" args="baz">
        this.bar = (this.bar != null ? this.bar : 0) + baz;
        return this.bar;
      </handler>
      
      <!-- Verify a named handler can be defined on a class and overridden on
           and instance -->
      <class name="foo">
        <attribute name="bar" type="number" value="0"></attribute>
        <handler event="onbar" name="hello">
          return "hey";
        </handler>
      </class>
      
      <foo>
        <handler event="oninit">
          assert.equal(this.hello(), "hey");
        </handler>
      </foo>
      
      <foo>
        <method name="hello">
          return this.super() + " there!";
        </method>
        
        <handler event="oninit">
          assert.equal(this.hello(), "hey there!");
        </handler>
      </foo>
      
      <!-- Verify that on$textcontent handler gets called. -->
      <view>asdf
        <handler event="on$textcontent" args="textcontent">
          this._tc = textcontent;
        </handler>
        <handler event="oninit">
          assert.equal(this._tc, 'asdf');
        </handler>
      </view>
    </view>
  </screen>
</screens>
</composition>