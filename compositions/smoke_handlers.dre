<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Attributes'>
    <view id="root" width="100%" height="100%" clip="true">
      <testingtimer>200</testingtimer>
      
      <attribute name="bgcolorhandled" type="boolean" value="false"></attribute>
      <attribute name="hasbeenselected" type="boolean" value="false"></attribute>
      
      <spacedlayout axis="y" spacing="15"></spacedlayout>
      
      <!-- Incomplete handler definitions will generate messages. -->
      <expectedoutput>Handler has no attributes.</expectedoutput>
      <handler></handler>
      
      <!-- Handler with no event or name generates a message. -->
      <expectedoutput>Handler has no name or event attribute.</expectedoutput>
      <handler method="foo"></handler>
      
      <!-- Handler with an empty reference attribute generates a message. -->
      <expectedoutput>Empty reference attribute in handler.</expectedoutput>
      <handler event="onwidth" reference=""></handler>
      
      <!-- Handler that points to a non-existant reference generates a message. -->
      <expectedoutput>resolveName failed for:foo at part:0 "foo"</expectedoutput>
      <handler event="onwidth" reference="foo"></handler>
      
      <!-- Handler that points to a non-existant method generates a message. -->
      <expectedoutput>Target method "foo" not found when firing "onwidth" event.</expectedoutput>
      <handler event="onwidth" method="foo"></handler>
      
      <!-- Handler that points to a non-function method generates a message. -->
      <expectedoutput>Target method "x" not a function when firing "onwidth" event.</expectedoutput>
      <handler event="onwidth" method="x"></handler>
      
      
      <!-- Events are thrown for attributes set in the declaration -->
      <!-- Also verifies that oninit fires after the other on<attr> events -->
      <view bgcolor="AliceBlue" width="50" height="20">
        <handler event="onbgcolor" args="c">
          root.bgcolorhandled = true
        </handler>
        <handler event="oninit">
          assert.equal(root.bgcolorhandled, true)
        </handler>
      </view>
  
      <!-- Handler executes after the new value has been set -->
      <view bgcolor="AliceBlue" width="50" height="20">
        <handler event="onbgcolor" args="c">
          assert.equal(c, this.bgcolor)
        </handler>
      </view>
  
      <!-- Attaching by reference -->
      <view id="v1" with="button" name="v1" width="50" height="50" bgcolor="green"></view>
      <view id="v2" with="button" name="v2" width="50" height="50" bgcolor="green">
        <!-- Verifies two handlers with the same event name but different
             references don't step on each other. -->
        <handler event="onactivated" reference="v1">
          this.v1clicked = true
        </handler>
        <handler event="onactivated">
          this.v2clicked = true
        </handler>
        
        <handler event="oninit">
          assert.equal(this.v1clicked, undefined, 'Verify initial state.');
          assert.equal(this.v2clicked, undefined, 'Verify initial state.');
          
          v1.doActivated();
          
          assert.equal(this.v1clicked, true);
          assert.equal(this.v2clicked, undefined);
          
          this.doActivated();
          
          assert.equal(this.v1clicked, true);
          assert.equal(this.v2clicked, true);
        </handler>
      </view>
  
      <view with="button" id="greenbox" text="green" bgcolor="white"></view>
      <handler event="onselected" args="value" reference="greenbox">
        root.hasbeenselected = true
      </handler>
      
      <handler event="oninit">
        greenbox.setAttribute('selected', true)
        
        this.eventAttrWorks = true;
        
        var self = this;
        window.setTimeout(function() {
          assert.isTrue(root.hasbeenselected);
          
          assert.isTrue(self.eventAttrWorks);
          assert.isTrue(self.nameAttrWorks);
          assert.isTrue(self.secondOninit);
        }, 0);
      </handler>
      
      <!-- Multiple handlers are just fine. -->
      <handler name="oninit">
        this.secondOninit = true;
      </handler>
      
      <!-- OK to use name instead of event. -->
      <handler name="oninit">
        this.nameAttrWorks = true;
      </handler>
    </view>
  </screen>
</screens>
</composition>