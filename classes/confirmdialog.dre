<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
   * @class dr.confirmdialog {UI Components}
   * A dialog that displays an alert with a cancel and confirm button.
   */-->
<class name="confirmdialog" extends="dialog" padding="20" width="auto" height="auto">
  <attribute name="msg" type="string" value=""/>
  <attribute name="btnlabel" type="string" value=""/>
  <attribute name="cancelbtnlabel" type="string" value=""/>
  
  <method name="setInitialFocus">
    this.buttonContainer.cancelButton.focus();
  </method>
  
  <text name="msgView" text="${this.parent.msg}" multiline="true" fontsize="14">
    <setter name="text" args="text">
      // Scale the width within a min/max based on number of characters.
      this.setAttribute('width', text ? Math.min(600, Math.max(100, text.length * 5)) : 0);
      return this.super();
    </setter>
  </text>
  
  <view name="buttonContainer" x="center" y="${this.parent.msgView.y + this.parent.msgView.height + 10}" height="auto">
    <spacedlayout axis="x" spacing="5" updateparent="true"/>
    
    <simplebutton name="cancelButton" text="${this.classroot.cancelbtnlabel}">
      <method name="doActivated">
        var dialog = this.classroot,
          callback = dialog.callback;
        if (callback) {
          var shouldNotClose = callback(this, false);
          if (shouldNotClose) return;
        }
        dialog.dialogmanager.closeDialog(this);
      </method>
    </simplebutton>
    
    <simplebutton name="confirmButton" text="${this.classroot.btnlabel}">
      <method name="doActivated">
        var dialog = this.classroot,
          callback = dialog.callback;
        if (callback) {
          var shouldNotClose = callback(this, true);
          if (shouldNotClose) return;
        }
        dialog.dialogmanager.closeDialog(this);
      </method>
    </simplebutton>
  </view>
</class>