<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - View Size'>
    <include href="./includes/boilerplate.dre"></include>
    
    <!-- InputText smoke tests. See spec/features/inputtext_spec.rb for interactive tests -->
    <view width="auto" height="auto" padding="25">
      <testingtimer>500</testingtimer>
      
      <spacedlayout axis="y" spacing="15"></spacedlayout>
  
      <!-- Default DOM property and CSS property Tests -->
      <view>
        <handler event="oninit">
          assert.testCaseLabel = 'Default DOM property and CSS property Tests';
          
          var el = this.sprite.platformObject;
          
          assert.equal(el.model, this.sprite, 'A model reference back to the dr.sprite.View should exist.');
          
          assert.equal(el.clientTop, 0);
          assert.equal(el.clientLeft, 0);
          assert.equal(el.clientWidth, 0);
          assert.equal(el.clientHeight, 0);
          
          assert.equal(el.draggable, false);
          assert.equal(el.hidden, false);
          assert.equal(el.isContentEditable, false);
        </handler>
      </view>
  
      <!-- Visibility -->
      <view bgcolor="lightgreen" width="100" height="50" visible="false">
        <handler event="oninit">
          assert.testCaseLabel = 'Visibility false';
          assert.equal(this.visible, false);
          assert.equal(this.sprite.platformObject.style.visibility, 'hidden');
        </handler>
      </view>
  
      <view bgcolor="lightpink" width="100" height="50" visible="true">
        <handler event="oninit">
          assert.testCaseLabel = 'Visibility true';
          assert.equal(this.visible, true);
          assert.equal(this.sprite.platformObject.style.visibility, '');
        </handler>
      </view>
  
      <view bgcolor="thistle" width="100" height="50">
        <handler event="oninit">
          assert.testCaseLabel = 'Visibility empty';
          assert.equal(this.visible, true);
          assert.equal(this.sprite.platformObject.style.visibility, '');
        </handler>
      </view>
  
      <view bgcolor="green" width="100" height="50" visible="false" scrollable="true">
        <view name="mouser" bgcolor="red" x="15" y="15" width="50" height="25">
          <handler event="onmouseover">
            this.setAttribute('bgcolor', 'blue');
          </handler>
          <handler event="onmouseout">
            this.setAttribute('bgcolor', 'red');
          </handler>
        </view>
        <view name="inner" bgcolor="orange" x="25" y="25" width="100" height="50" clickable="true"></view>
        
        <handler event="oninit">
          var sprite = this.sprite;
          
          var elem = this.sprite.platformObject,
            innerElem = this.inner.sprite.platformObject;
          
          assert.equal(elem.style.visibility, 'hidden');
          assert.equal(innerElem.style.visibility, '');
          
          // Scrollable in principle though hidden.
          assert.equal(125, sprite.getScrollWidth());
          assert.equal(75, sprite.getScrollHeight());
          
          this.setAttribute('visible', true);
          
          assert.equal(elem.style.visibility, '');
          assert.equal(innerElem.style.visibility, '');
          
          this.inner.setAttribute('visible', false);
          
          assert.equal(elem.style.visibility, '');
          assert.equal(innerElem.style.visibility, 'hidden');
          
          setTimeout(function() {
            // No longer scrollable since the view that extended outside is no longer visible.
            
            // PhantomJS doesn't adjust the scroll position the way browsers do
            // so we allow 84 as well.
            assert.include([100, 84, 83], sprite.getScrollWidth());
            assert.equal(50, sprite.getScrollHeight());
          }, 300);
        </handler>
      </view>
  
      <!-- z, rotation & scale -->
      <view id="zrs" width="100" height="50" border="2px" bordercolor="lightblue" perspective="5">
        <view name="topView" x="10" y="10" width="5" height="5" bgcolor="orange" z="1" perspective="0"></view>
        <view name="rotateViewDeg" x="80" y="10" xanchor="5" yanchor="10" zanchor="1" width="15" height="15" bgcolor="pink" rotation="45"></view>
        <view name="xScaleView" x="75" y="20" width="20" height="20" bgcolor="darkgreen" xscale="0.1"></view>
        <view name="yScaleView" x="75" y="20" width="20" height="20" bgcolor="red" yscale="0.2"></view>
        <view id="xmz" name="scaleRotateBottomView" x="50" y="20" width="20" height="20" bgcolor="blue"
          z="-10" rotation="-115" xscale="10.5" yscale="10.4"
        ></view>
  
        <!-- Given a style object, retrieve a transform setting -->
        <method name="get_transform" args="style, setting">
          // Retrieve a transform from either css, webkit, or moz
          var transform = style[setting] || style['-webkit-' + setting] || style['-moz-' + setting];
          return transform;
        </method>

        <!-- Compare two strings with varying whitespace -->
        <method name="compare_ws" args = "str1, str2">
          if (!str1 || !str2) return false;

          return str1.replace(/\s/g, '') == str2.replace(/\s/g, '');
        </method>
    
        <handler event="oninit">
          assert.testCaseLabel = 'Z, Rotation and Scale';
          
          // Check both generic and vendor syntax so that the tests will pass in firefox. This includes removing spaces when comparing strings.
          var transform = this.get_transform(this.topView.sprite.platformObject.style, 'transform');
          assert.equal(this.compare_ws(transform, 'translate3d(0, 0, 1px)') || this.compare_ws(transform, 'translate3d(0px, 0px, 1px)'), true, 'Verify translate.')
  
          transform = this.get_transform(this.rotateViewDeg.sprite.platformObject.style, 'transform');
          assert.equal(this.compare_ws(transform, 'rotate3d(0, 0, 1.0, 45deg)') || this.compare_ws(transform, 'rotate3d(0, 0, 1, 45deg)'), true, 'Verify rotate.');
  
          transformOrigin = this.get_transform(this.rotateViewDeg.sprite.platformObject.style, 'transform-origin');
          assert.equal(this.compare_ws('5px 10px 1px', transformOrigin), true, 'Verify transform origin.');
  
          transform = this.get_transform(this.xScaleView.sprite.platformObject.style, 'transform');
          assert.equal(this.compare_ws(transform, 'scale3d(0.1, 1, 1.0)') || this.compare_ws(transform, 'scale3d(0.1, 1, 1)'), true, 'Verify x-scale.');
  
          transform = this.get_transform(this.yScaleView.sprite.platformObject.style, 'transform');
          assert.equal(this.compare_ws(transform, 'scale3d(1, 0.2, 1.0)') || this.compare_ws(transform, 'scale3d(1, 0.2, 1)'), true, 'Verify y-scale.');
  
          transform = this.get_transform(this.scaleRotateBottomView.sprite.platformObject.style, 'transform');
          assert.equal(this.compare_ws(transform, 'scale3d(10.5, 10.4, 1.0) rotate3d(0, 0, 1.0, -115deg) translate3d(0, 0, -10px)') || this.compare_ws(transform, 'scale3d(10.5, 10.4, 1) rotate3d(0, 0, 1, -115deg) translate3d(0px, 0px, -10px)'), true, 'Verify all transforms.');
        </handler>
      </view>
  
      <!-- ensure that opacity passes float vales through unchanged -->
      <view bgcolor="red" width="100" height="50" opacity="0.22">
        <!-- Note: the Math.round is due to floating point errors not matching 0.22 with 0.22 -->
        <handler event="oninit">
            assert.equal(Math.round(this.sprite.platformObject.style.opacity * 100), 22);
        </handler>
      </view>
  
      <!-- Setting cursor -->
      <view bgcolor="PaleVioletRed" width="100" height="50" cursor="crosshair" clickable="true">
        <handler event="oninit">
          assert.equal(this.cursor, 'crosshair', 'cursor should be crosshair when set');
          assert.equal(this.sprite.platformObject.style.cursor, 'crosshair', 'sprite cursor should be crosshair when clickable is true');
        </handler>
      </view>
      <view bgcolor="PaleVioletRed" width="100" height="50" cursor="crosshair" clickable="false">
        <handler event="oninit">
          this.setAttribute('clickable', true)
          assert.equal(this.cursor, 'crosshair', 'cursor should be crosshair after clickable set true');
          assert.equal(this.sprite.platformObject.style.cursor, 'crosshair', 'sprite cursor should be crosshair after clickable set true');
        </handler>
      </view>
      <view bgcolor="PaleVioletRed" width="100" height="50" cursor="crosshair" clickable="true">
        <handler event="oninit">
          this.setAttribute('cursor', 'progress')
          assert.equal(this.cursor, 'progress', 'cursor should be progress when set at runtime');
          assert.equal(this.sprite.platformObject.style.cursor, 'progress', 'sprite cursor should be progress when set at runtime');
        </handler>
      </view>
      
      <!-- Constraint to an initial value works -->
      <view width="100" height="100" bgcolor="lightblue">
        <view name="v1" width="50" height="50" bgcolor="red">
          <view name="inner" width="25" height="25" bgcolor="yellow"></view>
        </view>
        
        <view name="v2"
          x="${(this.parent.v1.x === 0 ? 50 : 25) + this.parent.v1.inner.height}"
          y="${(this.parent.v1.inner.x === 0 ? 50 : 25) + (this.parent.v1.width / 2)}"
          width="25" height="25" bgcolor="green"
        ></view>
        
        <handler event="oninit">
          assert.equal(this.v2.x, 75);
          assert.equal(this.v2.y, 75);
          
          // Change a default value and verify the constraint updated
          this.v1.setAttribute('x', 1);
          
          assert.equal(this.v2.x, 50);
          assert.equal(this.v2.y, 75);
          
          // Change a default value and verify the constraint updated
          this.v1.inner.setAttribute('x', 1);
          
          assert.equal(this.v2.x, 50);
          assert.equal(this.v2.y, 50);
        </handler>
      </view>

      <!-- Views with mouse-related handlers automatically set clickable=true -->
      <view>
        <handler event="onclick">
          return
        </handler>
        <handler event="oninit">
          assert.equal(this.clickable, true);
        </handler>
      </view>
    </view>
  </screen>
</screens>
</composition>