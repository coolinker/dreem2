<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
   * @mixin dr.button {UI Behavior}
   * Provides button functionality to a dr.View. Most of the functionality 
   * comes from the mixins included by this mixin. This mixin resolves issues 
   * that arise when the various mixins are used together.
   * 
   * By default dr.Button instances are focusable.
   */-->
<!--
    Private Attributes:
      __restoreCursor:string The cursor to restore to when the button is
        no longer disabled. -->
<mixin name="button" with="keyactivation, disableable, mouseoveranddown, updateableui, activateable">
  <!--// Life Cycle /////////////////////////////////////////////////////////-->
  <method name="initNode" args="parent, attrs">
    if (attrs.focusable === undefined) attrs.focusable = true;
    if (attrs.cursor === undefined) attrs.cursor = 'pointer';
    
    this.super();
  </method>


  <!--// Attributes /////////////////////////////////////////////////////////-->
  <setter name="focused" args="v">
    var existing = this.focused;
    this.super();
    if (this.initing === false && this.focused !== existing) this.updateUI();
  </setter>


  <!--// Methods ////////////////////////////////////////////////////////////-->
  <!-- @overrides dr.keyactivation -->
  <method name="doActivationKeyDown" args="key, isRepeat">
    // Prevent unnecessary UI updates when the activation key is repeating.
    if (!isRepeat) this.updateUI();
  </method>

  <!-- @overrides dr.keyactivation -->
  <method name="doActivationKeyUp" args="key">
    this.super();
    if (!this.destroyed) this.updateUI();
  </method>

  <!-- @overrides dr.keyactivation -->
  <method name="doActivationKeyAborted" args="key">
    this.super();
    this.updateUI();
  </method>

  <!-- @overrides dr.updateableui -->
  <method name="updateUI">
    if (this.disabled) {
      // Remember the cursor to change back to, but don't re-remember
      // if we're already remembering one.
      if (this.__restoreCursor == null) this.__restoreCursor = this.cursor;
      this.set_cursor('not-allowed');
      this.drawDisabledState();
    } else {
      var rc = this.__restoreCursor;
      if (rc) {
        this.set_cursor(rc);
        this.__restoreCursor = null;
      }
      
      if (this.activatekeydown !== -1 || this.ismousedown) {
        this.drawActiveState();
      } else if (this.focused) {
        this.drawFocusedState();
      } else if (this.ismouseover) {
        this.drawHoverState();
      } else {
        this.drawReadyState();
      }
    }
  </method>

  <!--/**
    * @method drawDisabledState
    * @abstract
    * Draw the UI when the component is in the disabled state.
    * @returns {void}
    */-->
  <method name="drawDisabledState">
    // Subclasses to implement as needed.
  </method>

  <!--/**
    * @method drawFocusedState
    * Draw the UI when the component has focus. The default implementation
    * calls drawHoverState.
    * @returns {void}
    */-->
  <method name="drawFocusedState">
    this.drawHoverState();
  </method>

  <!--/**
    * @method drawHoverState
    * @abstract
    * Draw the UI when the component is on the verge of being interacted 
    * with. For mouse interactions this corresponds to the over state.
    * @returns {void}
    */-->
  <method name="drawHoverState">
    // Subclasses to implement as needed.
  </method>

  <!--/**
    * @method drawActiveState
    * @abstract
    * Draw the UI when the component has a pending activation. For mouse
    * interactions this corresponds to the down state.
    * @returns {void}
    */-->
  <method name="drawActiveState">
    // Subclasses to implement as needed.
  </method>

  <!--/**
    * @method drawReadyState
    * @abstract
    * Draw the UI when the component is ready to be interacted with. For
    * mouse interactions this corresponds to the enabled state when the
    * mouse is not over the component.
    * @returns {void}
    */-->
  <method name="drawReadyState">
    // Subclasses to implement as needed.
  </method>
</mixin>