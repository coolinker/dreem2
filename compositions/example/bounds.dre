<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Example - Bounds'>
    <view bgcolor="#eeeeee" width="auto" height="auto" scrollable="true" skin="default">
      <class name="slidercontrol" extends="slider" width="360" height="32" axis="x" bgcolor="#999999" progresscolor="#333333">
        <attribute name="label" type="string" value=""></attribute>
        <attribute name="actual" type="string" value="${this.value}"></attribute>
        <setter name="value" args="value">
          this.super(Math.round(value));
        </setter>
        <text name="txt" text="${this.parent.label + ':' + this.parent.actual}" color="#ffffff" x="4" y="middle" z="1"></text>
      </class>
      
      <view x="50" y="450" width="auto" height="auto" border="1" bordercolor="black" padding="2" bgcolor="#cccccc">
        <view x="left" y="top" width="50" height="50" bgcolor="#999999">
          <animator attribute="rotation" from="0" to="360" duration="5000" repeat="100"></animator>
          <animator attribute="width" from="10" to="100" duration="30000" repeat="10" bounce="true"></animator>
          <animator attribute="height" from="10" to="100" duration="60000" repeat="5" bounce="true"></animator>
        </view>
      </view>
      
      <view name="original" clip="true" bgcolor="#99ff99" bordercolor="#00cc00"
        x="${target.x}" 
        y="${target.y}" 
        width="${cfgwidth.value}"
        height="${cfgheight.value}"
        border="${cfgborder.value}"
        padding="${cfgpadding.value}"
      >
        <view width="100%" height="100%" bgcolor="#ccffcc"></view>
        <text x="right" y="bottom" color="green">original</text>
      </view>
      
      <view id="target" clip="true" bgcolor="#ffffff" bordercolor="black" opacity="0.75"
        x="${cfgx.value}"
        y="${cfgy.value}"
        width="${cfgwidth.value}"
        height="${cfgheight.value}"
        border="${cfgborder.value}"
        padding="${cfgpadding.value}"
        xscale="${cfgxscale.value / 100}"
        yscale="${cfgyscale.value / 100}"
        rotation="${cfgrotation.value}"
        xanchor="${cfgxanchor.actual}"
        yanchor="${cfgyanchor.actual}"
      >
        <view width="100%" height="100%" bgcolor="#cccccc"></view>
        
        <view name="original" clip="true" bgcolor="#99ff99" bordercolor="#00cc00"
          x="${targeti.x}" 
          y="${targeti.y}" 
          width="${cfgiwidth.value}"
          height="${cfgiheight.value}"
          border="${cfgiborder.value}"
          padding="${cfgipadding.value}"
        >
          <view width="100%" height="100%" bgcolor="#ccffcc"></view>
          <text x="right" y="bottom" color="green">original</text>
        </view>
        
        <view id="targeti" clip="true" bgcolor="#ffffff" bordercolor="black" opacity="0.75"
          x="${cfgix.value}"
          y="${cfgiy.value}"
          width="${cfgiwidth.value}"
          height="${cfgiheight.value}"
          border="${cfgiborder.value}"
          padding="${cfgipadding.value}"
          xscale="${cfgixscale.value / 100}"
          yscale="${cfgiyscale.value / 100}"
          rotation="${cfgirotation.value}"
          xanchor="${cfgixanchor.actual}"
          yanchor="${cfgiyanchor.actual}"
        >
          <view width="100%" height="100%" bgcolor="#999999"></view>
          <text x="center" y="center">inner</text>
        </view>
        
        <view clip="true" border="1" bordercolor="red" opacity="0.75"
          x="${Math.round(targeti.boundsx)}" 
          y="${Math.round(targeti.boundsy)}" 
          width="${Math.round(targeti.boundswidth)}" 
          height="${Math.round(targeti.boundsheight)}"
        >
          <text color="red" x="4" y="4">bounds</text>
        </view>
        
        <text x="center" y="center">outer</text>
      </view>
      
      <view clip="true" border="1" bordercolor="red" opacity="0.75"
        x="${Math.round(target.boundsx)}" 
        y="${Math.round(target.boundsy)}" 
        width="${Math.round(target.boundswidth)}" 
        height="${Math.round(target.boundsheight)}"
      >
        <text color="red" x="4" y="4">bounds</text>
      </view>
      
      <!-- info -->
      <view name="info" x="870" width="auto" height="auto" padding="4" bgcolor="#bbbbbb">
        <spacedlayout axis="y" spacing="4"></spacedlayout>
        
        <test-text>ACTUAL OUTSIDE VALUES</test-text>
        <text text="${'x:' + target.x}"></text>
        <text text="${'y:' + target.y}"></text>
        <text text="${'border:' + target.border}"></text>
        <text text="${'padding:' + target.padding}"></text>
        <text text="${'width:' + target.width}"></text>
        <text text="${'height:' + target.height}"></text>
        <text text="${'inner width:' + target.innerwidth}"></text>
        <text text="${'inner height:' + target.innerheight}"></text>
        <text text="${'bounds width:' + target.boundswidth}"></text>
        <text text="${'bounds height:' + target.boundsheight}"></text>
        <text text="${'x-anchor:' + target.xanchor}"></text>
        <text text="${'y-anchor:' + target.yanchor}"></text>
        
        <test-text>ACTUAL INSIDE VALUES</test-text>
        <text text="${'x:' + targeti.x}"></text>
        <text text="${'y:' + targeti.y}"></text>
        <text text="${'border:' + targeti.border}"></text>
        <text text="${'padding:' + targeti.padding}"></text>
        <text text="${'width:' + targeti.width}"></text>
        <text text="${'height:' + targeti.height}"></text>
        <text text="${'inner width:' + targeti.innerwidth}"></text>
        <text text="${'inner height:' + targeti.innerheight}"></text>
        <text text="${'bounds width:' + targeti.boundswidth}"></text>
        <text text="${'bounds height:' + targeti.boundsheight}"></text>
        <text text="${'x-anchor:' + targeti.xanchor}"></text>
        <text text="${'y-anchor:' + targeti.yanchor}"></text>
      </view>
      
      <!-- controls -->
      <view name="controls" x="500" width="auto" height="auto" padding="4" bgcolor="#bbbbbb">
        <spacedlayout axis="y" spacing="4"></spacedlayout>
        
        <test-text>OUTSIDE VIEW</test-text>
        
        <slidercontrol id="cfgx" value="120" maxvalue="200" label="x"></slidercontrol>
        <slidercontrol id="cfgy" value="100" maxvalue="200" label="y"></slidercontrol>
        
        <slidercontrol id="cfgborder" value="1" maxvalue="25" label="border"></slidercontrol>
        <slidercontrol id="cfgpadding" value="4" maxvalue="50" label="padding"></slidercontrol>
        <slidercontrol id="cfgwidth" value="250" maxvalue="300" label="width"></slidercontrol>
        <slidercontrol id="cfgheight" value="250" maxvalue="300" label="height"></slidercontrol>
        
        <slidercontrol id="cfgxscale" value="100" maxvalue="200" label="x-scale"></slidercontrol>
        <slidercontrol id="cfgyscale" value="100" maxvalue="200" label="y-scale"></slidercontrol>
        <slidercontrol id="cfgrotation" value="45" maxvalue="360" label="rotation"></slidercontrol>
        
        <slidercontrol id="cfgxanchor" value="-15" minvalue="-30" maxvalue="100" label="x-anchor">
          <setter name="actual" args="value">
            if (-20 > value) {
              this.setAttribute('progresscolor', '#ff3333');
              value = 'left';
            } else if (-10 > value) {
              this.setAttribute('progresscolor', '#33ff33');
              value = 'center';
            } else if (0 > value) {
              this.setAttribute('progresscolor', '#3333ff');
              value = 'right';
            } else {
              this.setAttribute('progresscolor', '#333333');
            }
            
            this.super(value);
          </setter>
        </slidercontrol>
        <slidercontrol id="cfgyanchor" value="-15" minvalue="-30" maxvalue="100" label="y-anchor">
          <setter name="actual" args="value">
            if (-20 > value) {
              this.setAttribute('progresscolor', '#ff3333');
              value = 'top';
            } else if (-10 > value) {
              this.setAttribute('progresscolor', '#33ff33');
              value = 'center';
            } else if (0 > value) {
              this.setAttribute('progresscolor', '#3333ff');
              value = 'bottom';
            } else {
              this.setAttribute('progresscolor', '#333333');
            }
            
            this.super(value);
          </setter>
        </slidercontrol>
        
        <test-text>INSIDE VIEW</test-text>
        
        <slidercontrol id="cfgix" value="30" maxvalue="100" label="x"></slidercontrol>
        <slidercontrol id="cfgiy" value="20" maxvalue="100" label="y"></slidercontrol>
        
        <slidercontrol id="cfgiborder" value="1" maxvalue="25" label="border"></slidercontrol>
        <slidercontrol id="cfgipadding" value="4" maxvalue="50" label="padding"></slidercontrol>
        <slidercontrol id="cfgiwidth" value="70" maxvalue="150" label="width"></slidercontrol>
        <slidercontrol id="cfgiheight" value="100" maxvalue="150" label="height"></slidercontrol>
        
        <slidercontrol id="cfgixscale" value="100" maxvalue="200" label="x-scale"></slidercontrol>
        <slidercontrol id="cfgiyscale" value="100" maxvalue="200" label="y-scale"></slidercontrol>
        <slidercontrol id="cfgirotation" value="30" maxvalue="360" label="rotation"></slidercontrol>
        
        <slidercontrol id="cfgixanchor" value="-15" minvalue="-30" maxvalue="100" label="x-anchor">
          <setter name="actual" args="value">
            if (-20 > value) {
              this.setAttribute('progresscolor', '#ff3333');
              value = 'left';
            } else if (-10 > value) {
              this.setAttribute('progresscolor', '#33ff33');
              value = 'center';
            } else if (0 > value) {
              this.setAttribute('progresscolor', '#3333ff');
              value = 'right';
            } else {
              this.setAttribute('progresscolor', '#333333');
            }
            
            this.super(value);
          </setter>
        </slidercontrol>
        <slidercontrol id="cfgiyanchor" value="-15" minvalue="-30" maxvalue="100" label="y-anchor">
          <setter name="actual" args="value">
            if (-20 > value) {
              this.setAttribute('progresscolor', '#ff3333');
              value = 'top';
            } else if (-10 > value) {
              this.setAttribute('progresscolor', '#33ff33');
              value = 'center';
            } else if (0 > value) {
              this.setAttribute('progresscolor', '#3333ff');
              value = 'bottom';
            } else {
              this.setAttribute('progresscolor', '#333333');
            }
            
            this.super(value);
          </setter>
        </slidercontrol>
      </view>
    </view>
  </screen>
</screens>
</composition>