<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->
<include href='./keyboarddraggable.dre'/>
<include href='./previewable.dre'/>
<include href='./editable.dre'/>
<include href='./controlhandle.dre'/>
<include href='./reticle.dre'/>
<include href='./toolbarbutton.dre'/>
<include href='./attributeeditor.dre'/>
<include href='./subnodeeditor.dre'/>
<include href='./colorpicker.dre'/>
<include href='./fontpicker.dre'/>
<include href='./componentdropable.dre'/>
<include href='./componentsource.dre'/>

<include href='./undo/createlayoutundoable.dre'/>
<include href='./undo/deletelayoutundoable.dre'/>
<include href='./undo/createbehaviorundoable.dre'/>
<include href='./undo/deletebehaviorundoable.dre'/>
<include href='./undo/createanimatorundoable.dre'/>
<include href='./undo/deleteanimatorundoable.dre'/>
<include href='./undo/editorattrundoable.dre'/>

<view name="editor" id="editor"
  clip="true" bgcolor="white"
  width="${Math.max(1000, this.parent.width)}"
  height="${Math.max(500, this.parent.height)}"
  ignoreplacement="true" ignorelayout="true"
  defaultplacement="content_bg.content.inner"
>
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <attribute name="editmode" type="boolean" value="true"/>

  <attribute name="showlocationmarkers" type="boolean" value="true"/>


  <!--// SERVICE NODES //////////////////////////////////////////////////////-->
  <include href='./service_nodes/config.dre'/>
  <include href='./service_nodes/selectionmanager.dre'/>
  <include href='./service_nodes/actions.dre'/>
  <include href='./service_nodes/editormodel.dre'/>

  <editor-undostack id="undo">
    <handler event="onstackchange" args="infoObj">
      // Send an undo/redo message to the server for every change to the
      // undo stack. This will allow previewers to keep themselves in sync
      // with changes during editing.
      var type = infoObj.type, msg = {type:type};
      if (type === 'undostack_do') msg.undoable = infoObj.undoable.serialize();
      dr.teem.bus.send(msg);
    </handler>
  </editor-undostack>


  <!--// HANDLERS ///////////////////////////////////////////////////////////-->
  <handler event="onkeydown" reference="dr.keyboard" args="platformEvent">
    // Abort if the modal dialog is open.
    if (dialogmanager.getActiveDialog() != null) return;
    
    var keyboard = dr.keyboard,
      sprite = dr.sprite,
      keyCode = sprite.KeyObservable.getKeyCodeFromEvent(platformEvent),
      isAcceleratorKeyDown = keyboard.isAcceleratorKeyDown(),
      isShiftKeyDown = keyboard.isShiftKeyDown();
    
    // If current focus is an input text don't do anything. In particular,
    // we want to allow the delete key to be processed normally.
    var focusedView = dr.global.focus.focusedView;
    if (focusedView && focusedView.sprite.isA(sprite.InputText)) {
      if (!isAcceleratorKeyDown) return;
      if (keyCode !== 90) return; // Z: Process undo/redo below since we want to supress the browser undo/redo mechanism
    }
    
    if (isAcceleratorKeyDown) {
      switch (keyCode) {
        case 66: // B: Reorder backward
          sprite.preventDefault(platformEvent); // Prevent browser show bookmarks bar functionality
          if (this._actionsPermitted()) actions[(isShiftKeyDown ? 'sendBackward' : 'sendToBack')]();
          break;
        case 67: // C: Copy
          var selected = selectionmanager.selected;
          if (selected && !selected.isInlineEdit()) {
            sprite.preventDefault(platformEvent); // Prevent browser copy functionality
            if (this._actionsPermitted()) actions.copy();
          }
          break;
        case 69: // E: Exit Editor
          sprite.preventDefault(platformEvent);
          if (this._actionsPermitted()) actions.stop();
          break;
        case 70: // F: Reorder forward
          sprite.preventDefault(platformEvent); // Prevent browser find functionality
          if (this._actionsPermitted()) actions[(isShiftKeyDown ? 'bringForward' : 'bringToFront')]();
          break;
        case 77: // M: Messages Panel
          sprite.preventDefault(platformEvent);
          actions.showMessagePanel();
          break;
        case 83: // S: Save document
          sprite.preventDefault(platformEvent); // Prevent browser save functionality
          if (this._actionsPermitted()) actions.save();
          break;
        case 86: // V: Paste
          var selected = selectionmanager.selected;
          if (selected && !selected.isInlineEdit()) {
            sprite.preventDefault(platformEvent); // Prevent browser paste functionality
            if (this._actionsPermitted()) actions[(isShiftKeyDown ? 'pasteInside' : 'paste')]();
          }
          break;
        case 88: // X: Cut
          var selected = selectionmanager.selected;
          if (selected && !selected.isInlineEdit()) {
            sprite.preventDefault(platformEvent); // Prevent browser cut functionality
            if (this._actionsPermitted()) actions.cut();
          }
          break;
        case 90: // Z: Undo/Redo
          sprite.preventDefault(platformEvent); // Prevent browser undo/redo functionality
          if (this._actionsPermitted()) actions[(isShiftKeyDown ? 'redo' : 'undo')]();
          break;
      }
    } else {
      var GK = sprite.GlobalKeys;
      switch (keyCode) {
        case GK.KEYCODE_BACKSPACE: // Delete selected view
          if (this._actionsPermitted()) actions.deleteSelected();
          break;
        case GK.KEYCODE_ESC: // Clear selection
          var fv = dr.global.focus.focusedView;
          if (fv && fv.parent === editormenubar) break; // Prevent deselection when focused on the menus
          if (this._actionsPermitted()) selectionmanager.clear();
          break;
      }
    }
  </handler>
  
  <method name="_actionsPermitted">
    if (dr.global.dragManager.dragview) return false;
    return true;
  </method>

  <handler name="updateLocationMarkers" event="onmousemove" reference="dr.mouse" args="event">
    if (event) {
      this._lastMouseEvent = event;
    } else {
      event = this._lastMouseEvent;
    }
    
    if (event) {
      var xLoc = xLocation, yLoc = yLocation;
      if (this.showlocationmarkers) {
        var rootSprite = editor.parent.sprite,
          x = event.x + rootSprite.getScrollX(), 
          y = event.y + rootSprite.getScrollY(),
          content_bg = this.content_bg,
          content = content_bg.content,
          inner = content.inner;
        xLoc.setActualAttribute('visible', true).setActualAttribute('x', x - 1);
        xLoc.label.setActualAttribute('text', x - content.x - content_bg.x + content_bg.scrollx + inner.scrollx);
        yLoc.setActualAttribute('visible', true).setActualAttribute('y', y - 1);
        yLoc.label.setActualAttribute('text', y - content.y - content_bg.y + content_bg.scrolly + inner.scrolly);
      } else {
        if (xLoc.visible) xLoc.setActualAttribute('visible', false);
        if (yLoc.visible) yLoc.setActualAttribute('visible', false);
      }
    }
    return true;
  </handler>
  <handler event="onshowlocationmarkers">
    this.updateLocationMarkers(); // Do not pass event
  </handler>
  <handler event="onscrollx, onscrolly" reference="this.content_bg">
    this.updateLocationMarkers(); // Do not pass event
  </handler>
  <handler event="onscrollx, onscrolly" reference="editor.parent">
    this.updateLocationMarkers(); // Do not pass event
  </handler>

  <!-- Eat attempts to open the context menu since this typically messes up
       drag and drop. -->
  <handler event="oncontextmenu" args="event"/>

  <!-- Eat and cancel desktop drag and drop events. -->
  <handler event="ondrop, ondragover" args="platformEvent">
    dr.sprite.preventDefault(platformEvent);
  </handler>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <method name="isPlatformEvent" args="eventType">
    // Makes the ondrop, ondragover handler work for platform events.
    // Part of the prevention of desktop drag and drop behavior.
    if (dr.sprite.DropObservable.EVENT_TYPES[eventType]) return true;
    return this.super();
  </method>


  <!--// VIEWS //////////////////////////////////////////////////////////////-->
  <modalpanel>
    <dialogmanager id="dialogmanager"/>
  </modalpanel>

  <!--// Rulers, Location and Selection Overlays //-->
  <view id="ruler_horizontal" ignoreplacement="true" clip="true"
    x="${this.parent.ruler_corner.x + this.parent.ruler_corner.width}"
    y="${config.topbar_height}"
    width="${this.parent.divider_right.x - this.x}"
    height="${config.ruler_thickness}"
    scrollx="${this.parent.content_bg.scrollx + this.parent.content_bg.content.inner.scrollx + 100 - config.content_inset}"
  >
    <spacedlayout axis="x" spacing="100" inset="102"/>
    <replicator classname="horizontal_rulertext" data="${config.ruler_marks}"/>
    
    <bitmap width="5200" ignorelayout="true"
      height="${config.ruler_thickness}"
      src="/classes/editor/img/ruler_horizontal.png" stretches="contain" repeat="repeat-x"
    >
      <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    </bitmap>
  </view>
  
  <view id="ruler_vertical" ignoreplacement="true" clip="true"
    x="${this.parent.divider_left.x}"
    y="${this.parent.ruler_corner.y + this.parent.ruler_corner.height}"
    width="${config.ruler_thickness}"
    height="${this.parent.innerheight - this.y}"
    scrolly="${this.parent.content_bg.scrolly + this.parent.content_bg.content.inner.scrolly + 100 - config.content_inset}"
  >
    <spacedlayout axis="y" spacing="100" inset="97"/>
    <replicator classname="vertical_rulertext" data="${config.ruler_marks}"/>
    
    <bitmap height="5200" ignorelayout="true"
      width="${config.ruler_thickness}"
      src="/classes/editor/img/ruler_vertical.png" stretches="contain" repeat="repeat-y"
    >
      <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    </bitmap>
  </view>
  
  <view id="xLocation" ignoreplacement="true"
    y="${ruler_horizontal.y}" width="1" height="${config.ruler_thickness}" bgcolor="${config.location_color}"
  >
    <text with="locationtext" name="label" x="3" y="2"/>
  </view>

  <view id="yLocation" ignoreplacement="true"
    x="${ruler_vertical.x}" width="${config.ruler_thickness}" height="1" bgcolor="${config.location_color}"
  >
    <verticaltext with="locationtext" name="label" x="2" y="-2"/>
  </view>
  
  <view id="horizontal_selection" with="button, keyboarddraggable" ignoreplacement="true"
    disabled="${selectionmanager.isrootselection}" cursor="col-resize"
    visible="${reticle.visible}" opacity="0.75"
    x="${reticle.x}" y="${ruler_horizontal.y}"
    width="${Math.max(1, reticle.width)}" height="${config.ruler_thickness}"
  >
    <view name="fill" width="100%" height="100%" opacity="0.15" bgcolor="${config.selection_color}"/>
    <view name="lower" width="1" height="100%" bgcolor="${config.selection_color}"/>
    <view name="upper" width="1" x="right" height="100%" bgcolor="${config.selection_color}"/>
    
    <!-- Left Edge Resizer -->
    <view with="button, keyboarddraggable" width="10" x="-5" height="100%" cursor="w-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        // If a layout in parent is managing x/y position then don't allow drag.
        var target = reticle.target;
        if (target.__layoutDomainInUseForView('x') || target.__layoutDomainInUseForView('width')) return;
        
        reticle._start();
        this._origTargetX = reticle.target.x;
        this._origTargetW = reticle.target.width;
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          var diff = Math.min(this._origTargetW, x + 5);
          
          x = this._origTargetX + diff;
          var gx = Number(gridsizex.value);
          if (gx > 0) x = gx * Math.round(x / gx);
          diff = x - this._origTargetX;
          
          target.setAttribute('x', this._origTargetX + diff, true); // 3rd arg enables model update
          target.setAttribute('width', this._origTargetW - diff, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', 'black');
        lower.setActualAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', 'black');
        lower.setActualAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', config.selection_color);
        lower.setActualAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', config.selection_color);
        lower.setActualAttribute('boxshadow', null);
      </method>
    </view>
    
    <!-- Right Edge Resizer -->
    <view with="button, keyboarddraggable" width="10" x="${this.parent.width - 5}" height="100%" cursor="e-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        // If a layout in child is managing width/height then don't allow drag.
        if (reticle.target.__layoutDomainInUseForView('width')) return;
        
        reticle._start();
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          x = Math.max(0, x + 5);
          var gx = Number(gridsizex.value);
          if (gx > 0) x = gx * Math.round(x / gx);
          
          target.setAttribute('width', x, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', 'black');
        upper.setActualAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', 'black');
        upper.setActualAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', config.selection_color);
        upper.setActualAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', config.selection_color);
        upper.setActualAttribute('boxshadow', null);
      </method>
    </view>
    
    <horizontal_ruler_relselecttext name="locrelstart" x="${-this.width - config.selection_marker_offset}"/>
    <horizontal_ruler_selecttext name="locstart" x="${-this.width - config.selection_marker_offset}"/>
    <horizontal_ruler_selecttext name="locsize" x="center"/>
    <horizontal_ruler_selecttext name="locend" x="${this.parent.width + config.selection_marker_offset}"/>
    <horizontal_ruler_relselecttext name="locrelend" x="${this.parent.width + config.selection_marker_offset}"/>
    
    <method name="startDrag" args="event">
      // If a layout in parent is managing x/y position then don't allow drag.
      if (reticle.target.__layoutDomainInUseForView('x')) return;
      
      reticle._start();
      this.super();
    </method>
    <method name="stopDrag" args="event, isAbort">
      if (isAbort) {
        reticle._abort();
      } else {
        reticle._stop();
      }
      this.super();
    </method>
    <method name="updatePosition" args="x, y">
      var target = reticle.target;
      if (!this.disabled && target) {
        x = x - target.getAbsolutePosition(editor).x + target.x;
        var gx = Number(gridsizex.value);
        if (gx > 0) x = gx * Math.round(x / gx);
        
        target.setAttribute('x', x, true); // 3rd arg enables model update
      }
    </method>
    
    <method name="drawHoverState">
      this.fill.setActualAttribute('opacity', 0.25);
    </method>
    <method name="drawActiveState">
      this.fill.setActualAttribute('opacity', 0.4);
    </method>
    <method name="drawReadyState">
      this.fill.setActualAttribute('opacity', 0.15);
    </method>
  </view>
  
  <view id="vertical_selection" with="button, keyboarddraggable" ignoreplacement="true"
    disabled="${selectionmanager.isrootselection}"
    visible="${reticle.visible}" opacity="0.75"
    x="${ruler_vertical.x}" y="${reticle.y}"
    width="${config.ruler_thickness}" height="${Math.max(1, reticle.height)}"
    cursor="row-resize"
  >
    <view name="fill" width="100%" height="100%" opacity="0.15" bgcolor="${config.selection_color}"/>
    <view name="lower" height="1" width="100%" bgcolor="${config.selection_color}"/>
    <view name="upper" height="1" y="bottom" width="100%" bgcolor="${config.selection_color}"/>
    
    <vertical_ruler_relselecttext name="locrelstart" y="${-config.selection_marker_offset}"/>
    <vertical_ruler_selecttext name="locstart" y="${-config.selection_marker_offset}"/>
    <vertical_ruler_selecttext name="locsize" y="middle"/>
    <vertical_ruler_selecttext name="locend" y="${this.parent.height + this.height + config.selection_marker_offset}"/>
    <vertical_ruler_relselecttext name="locrelend" y="${this.parent.height + this.height + config.selection_marker_offset}"/>
    
    <!-- Top Edge Resizer -->
    <view with="button, keyboarddraggable" height="10" y="-5" width="100%" cursor="n-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        // If a layout in parent is managing x/y position then don't allow drag.
        var target = reticle.target;
        if (target.__layoutDomainInUseForView('y') || target.__layoutDomainInUseForView('height')) return;
        
        reticle._start();
        this._origTargetY = reticle.target.y;
        this._origTargetH = reticle.target.height;
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          var diff = Math.min(this._origTargetH, y + 5);
          
          y = this._origTargetY + diff;
          var gy = Number(gridsizey.value);
          if (gy > 0) y = gy * Math.round(y / gy);
          diff = y - this._origTargetY;
          
          target.setAttribute('y', this._origTargetY + diff, true); // 3rd arg enables model update
          target.setAttribute('height', this._origTargetH - diff, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', 'black');
        lower.setActualAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', 'black');
        lower.setActualAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', config.selection_color);
        lower.setActualAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        var lower = this.parent.lower;
        lower.setActualAttribute('bgcolor', config.selection_color);
        lower.setActualAttribute('boxshadow', null);
      </method>
    </view>
    
    <!-- Bottom Edge Resizer -->
    <view with="button, keyboarddraggable" height="10" y="${this.parent.height - 5}" width="100%" cursor="s-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        // If a layout in child is managing width/height then don't allow drag.
        if (reticle.target.__layoutDomainInUseForView('height')) return;
        
        reticle._start();
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          y = Math.max(0, y + 5);
          var gy = Number(gridsizey.value);
          if (gy > 0) y = gy * Math.round(y / gy);
          
          target.setAttribute('height', y, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', 'black');
        upper.setActualAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', 'black');
        upper.setActualAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', config.selection_color);
        upper.setActualAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        var upper = this.parent.upper;
        upper.setActualAttribute('bgcolor', config.selection_color);
        upper.setActualAttribute('boxshadow', null);
      </method>
    </view>
    
    <method name="startDrag" args="event">
      // If a layout in parent is managing x/y position then don't allow drag.
      if (reticle.target.__layoutDomainInUseForView('y')) return;
      
      reticle._start();
      this.super();
    </method>
    <method name="stopDrag" args="event, isAbort">
      if (isAbort) {
        reticle._abort();
      } else {
        reticle._stop();
      }
      this.super();
    </method>
    <method name="updatePosition" args="x, y">
      var target = reticle.target;
      if (!this.disabled && target) {
        y = y - target.getAbsolutePosition(editor).y + target.y;
        var gy = Number(gridsizey.value);
        if (gy > 0) y = gy * Math.round(y / gy);
        
        target.setAttribute('y', y, true); // 3rd arg enables model update
      }
    </method>
    
    <method name="drawHoverState">
      this.fill.setActualAttribute('opacity', 0.25);
    </method>
    <method name="drawActiveState">
      this.fill.setActualAttribute('opacity', 0.4);
    </method>
    <method name="drawReadyState">
      this.fill.setActualAttribute('opacity', 0.15);
    </method>
  </view>

  <view name="ruler_corner" ignoreplacement="true" bgcolor="white"
    x="${this.parent.divider_left.x}" y="${config.topbar_height}"
    height="${config.ruler_thickness}" width="${config.ruler_thickness}"
    border="1" bordercolor="${config.secondary_panel_color}"
  >
    <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
  </view>


  <!--// Content Panels //-->
  <view name="content_bg" ignoreplacement="true" bgcolor="${config.content_color}"
    x="${ruler_horizontal.x}" y="${ruler_vertical.y}"
    width="${this.parent.divider_right.x - this.x}"
    height="${this.parent.innerheight - this.y}"
    scrollable="true"
  >
    <handler event="onmousedown" args="event">selectionmanager.clear();</handler>

    <view x="69" y="36" color="#999999">
      <spacedlayout spacing="8"/>
      <constantlayout attribute="y" value="'middle'"/>

      <listviewbutton with="tooltip" floatingpanelid="screensizes" fontsize="12"
        listviewattrs="{maxheight:340}"
        tooltip="Change the viewport size. This allows you to emulate different screen sizes during editing."
      >
        <method name="initNode" args="parent, attrs">
          this.cfg = [
            {attrs:{name:'custom', text:'custom'}},

            {klass:dr.listviewseparator},

            {attrs:{name:'4k', text:'4K', w:4096, h:2160}},
            {attrs:{name:'2k', text:'2K', w:2048, h:1080}},

            {klass:dr.listviewseparator},

            {attrs:{name:'hdtv', text:'HDTV', w:1920, h:1080}},
            {attrs:{name:'pal',  text:'PAL',  w:720,  h:576}},
            {attrs:{name:'ntsc', text:'NTSC', w:720,  h:486}},

            {klass:dr.listviewseparator},

            {attrs:{name:'xvga', text:'XVGA', w:1024, h:768}},
            {attrs:{name:'svga', text:'SVGA', w:800,  h:600}},
            {attrs:{name:'vga',  text:'VGA',  w:640,  h:480}},

            {klass:dr.listviewseparator},

            {attrs:{name:'iphonetall', text:'iphone (Portrait)',                w:320, h:480}},
            {attrs:{name:'iphonewide', text:'iphone (Landscape)',               w:480, h:320}},

            {attrs:{name:'iphone4tall', text:'iphone 4 (Portrait)',             w:Math.round(640  * 163/326), h:Math.round(960  * 163/326)}},
            {attrs:{name:'iphone4wide', text:'iphone 4 (Landscape)',            w:Math.round(960  * 163/326), h:Math.round(640  * 163/326)}},

            {attrs:{name:'iphone5tall', text:'iphone 5 (Portrait)',             w:Math.round(640  * 163/326), h:Math.round(1135 * 163/326)}},
            {attrs:{name:'iphone5wide', text:'iphone 5 (Landscape)',            w:Math.round(1135 * 163/326), h:Math.round(640  * 163/326)}},

            {attrs:{name:'iphone6tall', text:'iphone 6 (Portrait)',             w:Math.round(750  * 163/326), h:Math.round(1334 * 163/326)}},
            {attrs:{name:'iphone6wide', text:'iphone 6 (Landscape)',            w:Math.round(1334 * 163/326), h:Math.round(750  * 163/326)}},

            {attrs:{name:'iphone6plustall', text:'iphone 6 Plus (Portrait)',    w:Math.round(1080 * 163/401), h:Math.round(1920 * 163/401)}},
            {attrs:{name:'iphone6pluswide', text:'iphone 6 Plus (Landscape)',   w:Math.round(1920 * 163/401), h:Math.round(1080 * 163/401)}},

            {klass:dr.listviewseparator},

            {attrs:{name:'galaxystall', text:'Galaxy S (Portrait)',             w:Math.round(480 * 163/233), h:Math.round(800 * 163/233)}},
            {attrs:{name:'galaxyswide', text:'Galaxy S (Landscape)',            w:Math.round(800 * 163/233), h:Math.round(480 * 163/233)}},

            {attrs:{name:'galaxys2tall', text:'Galaxy S2 (Portrait)',           w:Math.round(480 * 163/217), h:Math.round(800 * 163/217)}},
            {attrs:{name:'galaxys2wide', text:'Galaxy S2 (Landscape)',          w:Math.round(800 * 163/217), h:Math.round(480 * 163/217)}},

            {attrs:{name:'galaxys2ltetall', text:'Galaxy S2 LTE (Portrait)',    w:Math.round(720  * 163/318), h:Math.round(1280 * 163/318)}},
            {attrs:{name:'galaxys2ltewide', text:'Galaxy S2 LTE (Landscape)',   w:Math.round(1280 * 163/318), h:Math.round(720  * 163/318)}},

            {attrs:{name:'galaxys3minitall', text:'Galaxy S3 Mini (Portrait)',  w:Math.round(480 * 163/233), h:Math.round(800 * 163/233)}},
            {attrs:{name:'galaxys3miniwide', text:'Galaxy S3 Mini (Landscape)', w:Math.round(800 * 163/233), h:Math.round(480 * 163/233)}},

            {attrs:{name:'galaxys3slimtall', text:'Galaxy S3 Slim (Portrait)',  w:Math.round(540 * 163/244), h:Math.round(960 * 163/244)}},
            {attrs:{name:'galaxys3slimwide', text:'Galaxy S3 Slim (Landscape)', w:Math.round(960 * 163/244), h:Math.round(540 * 163/244)}},

            {attrs:{name:'galaxys3tall', text:'Galaxy S3 (Portrait)',           w:Math.round(720  * 163/306), h:Math.round(1280 * 163/306)}},
            {attrs:{name:'galaxys3wide', text:'Galaxy S3 (Landscape)',          w:Math.round(1280 * 163/306), h:Math.round(720  * 163/306)}},

            {attrs:{name:'galaxys4minitall', text:'Galaxy S4 Mini (Portrait)',  w:Math.round(540 * 163/256), h:Math.round(960 * 163/256)}},
            {attrs:{name:'galaxys4miniwide', text:'Galaxy S4 Mini (Landscape)', w:Math.round(960 * 163/256), h:Math.round(540 * 163/256)}},

            {attrs:{name:'galaxys4tall', text:'Galaxy S4 (Portrait)',           w:Math.round(1080 * 163/441), h:Math.round(1920 * 163/441)}},
            {attrs:{name:'galaxys4wide', text:'Galaxy S4 (Landscape)',          w:Math.round(1920 * 163/441), h:Math.round(1080 * 163/441)}},

            {attrs:{name:'galaxys5minitall', text:'Galaxy S5 Mini (Portrait)',  w:Math.round(720 *  163/326), h:Math.round(1280 * 163/326)}},
            {attrs:{name:'galaxys5miniwide', text:'Galaxy S5 Mini (Landscape)', w:Math.round(1280 * 163/326), h:Math.round(720 *  163/326)}},

            {attrs:{name:'galaxys5tall', text:'Galaxy S5 (Portrait)',           w:Math.round(1080 * 163/432), h:Math.round(1920 * 163/432)}},
            {attrs:{name:'galaxys5wide', text:'Galaxy S5 (Landscape)',          w:Math.round(1920 * 163/432), h:Math.round(1080 * 163/432)}},

            {attrs:{name:'galaxys6tall', text:'Galaxy S6 (Portrait)',           w:Math.round(1440 * 163/576), h:Math.round(2560 * 163/576)}},
            {attrs:{name:'galaxys6wide', text:'Galaxy S6 (Landscape)',          w:Math.round(2560 * 163/576), h:Math.round(1440 * 163/576)}},

            {klass:dr.listviewseparator},

            {attrs:{name:'nexus4tall', text:'Nexus 4 (Portrait)',               w:Math.round(768 * 163/318), h:Math.round(1280 * 163/318)}},
            {attrs:{name:'nexus4wide', text:'Nexus 4 (Landscape)',              w:Math.round(1280 * 163/318), h:Math.round(768 * 163/318)}},

            {attrs:{name:'nexus5tall', text:'Nexus 5 (Portrait)',               w:Math.round(1080 * 163/445), h:Math.round(1920 * 163/445)}},
            {attrs:{name:'nexus5wide', text:'Nexus 5 (Landscape)',              w:Math.round(1920 * 163/445), h:Math.round(1080 * 163/445)}}
          ];

          this.super();

          // Set initial value
          var cfgKey = dr.global.clientstorage.getItem('_editor_screensize') || 'hdtv';
          this.setAttribute('selecteditem', this._getConfigAttrsByName(cfgKey));
        </method>

        <attribute name="selecteditem" type="expression" value="null"/>
        <handler event="onselecteditem" args="selecteditem">
          if (selecteditem) {
            this.setActualAttribute('label', selecteditem.text);

            var isCustom = selecteditem.name === 'custom';
            this.parent.custom.setActualAttribute('visible', isCustom);
            if (!isCustom) {
              screensizew.setActualAttribute('value', selecteditem.w);
              screensizeh.setActualAttribute('value', selecteditem.h);
            }

            dr.global.clientstorage.setItem('_editor_screensize', selecteditem.name);
          }
        </handler>

        <method name="_getConfigAttrsByName" args="name">
          if (name) {
            var cfg = this.cfg, i = cfg.length, attrs;
            while (i) {
              attrs = cfg[--i].attrs;
              if (attrs && attrs.name === name) return attrs;
            }
          }
        </method>

        <method name="drawDisabledState">
          this.setActualAttribute('color', this.selected ? '#000000' : '#cccccc');
        </method>
        <method name="drawFocusedState">
          this.setActualAttribute('color', this.selected ? '#000000' : '#aaaaaa');
        </method>
        <method name="drawHoverState">
          this.setActualAttribute('color', this.selected ? '#000000' : '#aaaaaa');
        </method>
        <method name="drawActiveState">
          this.setActualAttribute('color', this.selected ? '#000000' : '#888888');
        </method>
        <method name="drawReadyState">
          this.setActualAttribute('color', this.selected ? '#000000' : '#999999');
        </method>
        <method name="doActivated">
          var cfg = this.cfg,
            i = cfg.length, attrs, selecteditemname = this.selecteditem.name;
          while (i) {
            attrs = cfg[--i].attrs;
            if (attrs) attrs.disabled = attrs.name === selecteditemname;
          }

          this.setActualAttribute('itemconfig', cfg.concat()); // Concat to work around equality test.

          this.toggleFloatingPanel();
        </method>

        <method name="doItemActivated" args="itemview">
          this.setActualAttribute('selecteditem', itemview);
          this.super();
        </method>
      </listviewbutton>

      <view name="custom" height="18" visible="false">
        <spacedlayout spacing="4" updateparent="true"></spacedlayout>
        <editor_text text="w:" y="2" fontsize="12"/>
        <editor_inputtext id="screensizew" width="33" allowedchars="0123456789" maxlength="4" fontsize="12">
          <method name="initNode" args="parent, attrs">
            attrs.value = dr.global.clientstorage.getItem('_editor_screensizew');
            this.super();
          </method>
          <setter name="value" args="v">
            return Math.min(v, 5000);
          </setter>
          <handler event="onvalue" args="v">
            dr.global.clientstorage.setItem('_editor_screensizew', v);
          </handler>
        </editor_inputtext>
        <editor_text text="h:" y="2" fontsize="12"/>
        <editor_inputtext id="screensizeh" width="33" allowedchars="0123456789" maxlength="4" fontsize="12">
          <method name="initNode" args="parent, attrs">
            attrs.value = dr.global.clientstorage.getItem('_editor_screensizeh');
            this.super();
          </method>
          <setter name="value" args="v">
            return Math.min(v, 5000);
          </setter>
          <handler event="onvalue" args="v">
            dr.global.clientstorage.setItem('_editor_screensizeh', v);
          </handler>
        </editor_inputtext>
      </view>
    </view>

    <view name="content"
      x="${config.content_inset}"
      y="${config.content_inset}"
      width="${screensizew.value}"
      height="${screensizeh.value}"
      boxshadow="[0,0,16,4,'#cccccc']"
    >
      <!-- Background that shows through when the root bgcolor is transparent. -->
      <bitmap
        width="${screensizew.value}"
        height="${screensizeh.value}"
        repeat="repeat" stretches="none" src="/editor/img/transparent_pattern.png"
      />

      <!-- Use an additional inner view so that scrollbars show up inside the
           "page" rather than over the boxshadow. -->
      <view name="inner" with="editable"
        width="${screensizew.value}"
        height="${screensizeh.value}"
        scrollable="true" maskfocus="${editor.editmode}" focuscage="true" cursor="pointer"
      >
        <method name="initNode" args="parent, attrs">
          this.super();

          this.setAttribute('bgcolor', editor.parent.bgcolor);
        </method>

        <handler event="onmousedown" args="event">selectionmanager.clear();</handler>

        <method name="notifyDragEnter" args="dropable">
          this.__origBoxShadow = this.getActualAttribute('boxshadow');
          this.setActualAttribute('boxshadow', [0, 0, 12, 1, '#00ff00']);
        </method>

        <method name="notifyDragLeave" args="dropable">
          this.setActualAttribute('boxshadow', this.__origBoxShadow);
        </method>
      </view>
    </view>

    <!-- Creates extra space to the bottom and right of the content view. -->
    <view
      x="${this.parent.content.x + this.parent.content.width}" width="${config.content_inset}"
      y="${this.parent.content.y + this.parent.content.height}" height="${config.content_inset}"
    />

    <webpage id="preview" visible="false"
      x="${this.parent.content.x - 2}" y="${this.parent.content.y - 2}"
      width="${this.parent.content.width + 4}" height="${this.parent.content.height + 4}"
      border="2" bordercolor="#66ee00" clickable="true" bgcolor="#999999"
    />
  </view>

  <!--// The guides layer that sits in front of the content being edited. //-->
  <view id="guides" ignoreplacement="true"/>

  <!--// Selection Reticle //-->
  <reticle id="reticle" ignoreplacement="true"/>

  <!--// Left Panel //-->
  <view name="leftbar" ignoreplacement="true" bgcolor="white"
    y="${config.topbar_height}"
    width="${this.parent.divider_left.x}"
    height="${this.parent.innerheight - this.y}"
  >
    <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    
    <view width="100%" height="28" bgcolor="#eeeeee">
      <listviewbutton with="tooltip" id="screennamechooser" floatingpanelid="screenlist" y="6" x="5"
        tooltip="Select a different screen to edit."
        disabled="${!editor.editmode}"
      >
        <method name="doItemActivated" args="itemview">
          this.super();
          actions.changeScreen(itemview.text);
        </method>
      </listviewbutton>
      
      <view width="100%" y="bottom" height="1" bgcolor="#cccccc"/>
    </view>
    
    <view with="droptarget" draggroups="{rootonly:true}"
      y="28" width="100%" height="${this.parent.innerheight - this.y}"
    >
      <method name="notifyDragEnter" args="dropable">
        this.__origBoxShadow = this.getActualAttribute('boxshadow');
        this.setActualAttribute('boxshadow', [0, 0, 6, 1, '#009900', true]);
      </method>
      
      <method name="notifyDragLeave" args="dropable">
        this.setActualAttribute('boxshadow', this.__origBoxShadow);
      </method>
      
      <!-- Nested view is to separate autoscroll draggroups from root 
           droptarget draggroups. -->
      <view with="autoscroller" draggroups="{editable:true}" width="100%" height="100%">
        <include href='./treemodel.dre'/>
      </view>
    </view>
  </view>

  <!--// Right Panel //-->
  <view name="rightbar" ignoreplacement="true" bgcolor="#fcfcfc"
    x="right" y="${config.topbar_height}"
    width="${this.parent.innerwidth - this.parent.divider_right.x}"
    height="${this.parent.leftbar.height}"
  >
    <!-- Component list panel -->
    <view width="100%" height="${this.parent.divider_top.y}" bgcolor="white" scrollable="true">
      <view width="100%">
        <wrappinglayout axis="x" inset="15" outset="15" lineinset="7" lineoutset="7" updateparent="true"/>
        <include href='./service_nodes/component_manifest.dre'/>
      </view>
    </view>
    
    <!-- Attributes Panel(s) -->
    <view y="${this.parent.divider_top.y}" width="100%" height="${this.parent.innerheight - this.y}" scrollable="true">
      <spacedlayout axis="y"/>
      
      <subhead width="100%" text="Attributes"/>
      
      <view width="100%" clip="true">
        <spacedlayout axis="y" updateparent="true"/>
        
        <view width="100%" clip="true">
          <spacedlayout axis="y" spacing="5" inset="5" outset="5" updateparent="true">
            <method name="__positionView" args="view, attrName, value">
              // Only animate the parent updates so that the panel appears to
              // slide open/closed
              var isParent = view === this.parent;
              if (isParent) this.speed = 500;
              this.super();
              if (isParent) this.speed = 0;
            </method>
          </spacedlayout>
          <replicator classname="attributeeditor">
            <handler event="ondelayedselected" args="selected" reference="selectionmanager">
              this.setAttribute('data', selected ? selected.getAttrsListForDetails() : []);
            </handler>
          </replicator>
        </view>
        
        <!-- More attrs subpanel. -->
        <view width="100%">
          <attribute name="selected" type="boolean" value="false"/>
          <handler event="onselected" args="selected">
            var header = this.header;
            header.updateUI();
            header.setActualAttribute('text', (selected ? '▼' : '▶') + " more");
            
            this.updateHeight();
          </handler>
          
          <handler name="updateHeight" event="ondelayedselected" reference="selectionmanager">
            var animAttrs = {attribute:'height', to:0, duration:500};
            if (selectionmanager.selected) {
              var svs = this.content.getSubviews();
              if (this.selected) {
                var lastChild = svs[svs.length - 1];
                animAttrs.to = lastChild ? lastChild.y + lastChild.height + this.header.height + 5 : 0;
              } else {
                animAttrs.to = svs.length > 0 ? this.header.height : 0;
              }
            }
            this.stopActiveAnimators('height');
            this.animate(animAttrs);
          </handler>
          
          <text with="button" name="header" width="60" textalign="right"
            toppadding="4" bottompadding="4" fontsize="14" focusembellishment="false"
            disabled="${!selectionmanager.selected || this.parent.height === 0}"
          >
            <method name="doActivated">
              if (!this.disabled) this.parent.setActualAttribute('selected', !this.parent.selected);
            </method>
            <method name="drawDisabledState">
              this.setActualAttribute('color', '#999999');
            </method>
            <method name="drawHoverState">
              this.setActualAttribute('color', '#666666');
            </method>
            <method name="drawActiveState">
              this.setActualAttribute('color', '#333333');
            </method>
            <method name="drawReadyState">
              this.setActualAttribute('color', '#000000');
            </method>
          </text>
          
          <view name="content" width="100%" y="${this.parent.header.height}" maskfocus="${!this.parent.selected}">
            <spacedlayout axis="y" spacing="5" inset="5">
              <method name="update">
                this.super();
                if (this.canUpdate()) this.parent.parent.updateHeight();
              </method>
            </spacedlayout>
            <replicator classname="attributeeditor">
              <handler event="ondelayedselected" args="selected" reference="selectionmanager">
                this.setAttribute('data', selected ? selected.getMoreAttrsListForDetails() : []);
              </handler>
            </replicator>
          </view>
        </view>
      </view>
      
      <subhead id="layouts_subhead" width="100%" text="Layouts"/>
      
      <view id="layouts_panel" width="100%" clip="true">
        <spacedlayout axis="y" inset="-1" spacing="5" updateparent="true">
          <method name="__positionView" args="view, attrName, value">
            // Only animate the parent updates
            var isParent = view === this.parent;
            if (isParent) this.speed = 500;
            this.super();
            if (isParent) this.speed = 0;
          </method>
        </spacedlayout>
        
        <handler name="refresh" event="ondelayedselectedview" args="selectedview" reference="selectionmanager">
          this.repl.setActualAttribute('data', selectedview ? selectedview.getLayouts(true) : []);
        </handler>
        
        <replicator name="repl" classname="subnodeeditor"/>
      </view>
      
      <subhead id="behaviors_subhead" width="100%" text="Behaviors"/>
      
      <view id="behaviors_panel" width="100%" clip="true">
        <spacedlayout axis="y" inset="-1" spacing="5" updateparent="true"/>
        
        <handler name="refresh" event="ondelayedselectedview" args="selectedview" reference="selectionmanager">
          this.repl.setActualAttribute('data', selectedview ? selectedview.getBehaviors() : []);
        </handler>
        
        <replicator name="repl" classname="subnodeeditor"/>
      </view>

      <subhead id="data_subhead" width="100%" text="Data"/>

      <view id="data_panel" width="100%" clip="true">
        <spacedlayout axis="y" updateparent="true"/>

        <handler name="refresh" event="ondelayedselected" args="selectedview" reference="selectionmanager">
          if (selectedview && selectedview.data) {
            this.dinspect.setAttribute('rootname', '$' + selectedview.name);
            this.dinspect.setAttribute('data', selectedview.data);
            this.dinspect.setAttribute('visible', true);
          } else {
            this.dinspect.setAttribute('rootname', '$root');
            this.dinspect.setAttribute('data', undefined);
            this.dinspect.setAttribute('visible', false);
          }
        </handler>

        <datainspector name="dinspect" x="20" padding="10"/>
      </view>
    </view>
    
    <!-- Line at the top of the attribute panels so that a visual separation
         occurs even when scrolled. -->
    <view ignoreplacement="true"
      width="100%" y="${this.parent.divider_top.y}" height="1"
      bgcolor="${config.secondary_panel_color}"
    />
    
    <view name="divider_top" with="keyboarddraggable" cursor="row-resize"
      draggroups="{divider:true}"
      y="123" width="100%"
    >
      <method name="initNode" args="parent, attrs">
        var config = dr.sprite.retrieveGlobal('config');
        attrs.y = dr.global.clientstorage.getItem('_divider_top') || 123;
        attrs.height = config.divider_width;
        
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        if (!this.disabled) {
          this.setActualAttribute('y', Math.max(123, Math.min(290, y)));
          dr.global.clientstorage.setItem('_divider_top', this.y);
        }
      </method>
    </view>
  </view>


  <!--// Misc Lines //-->
  <!-- Line directly below the header. -->
  <view ignoreplacement="true"
    width="100%" y="${config.topbar_height}" height="1"
    bgcolor="${config.secondary_panel_color}"
  />

  <!-- Line at the left edge of the rightbar. -->
  <view ignoreplacement="true"
    x="${this.parent.rightbar.x}" y="${this.parent.rightbar.y}"
    width="1" height="${this.parent.rightbar.height}"
    bgcolor="${config.secondary_panel_color}"
  />


  <!--// Dividers //-->
  <view name="divider_left" with="keyboarddraggable" ignoreplacement="true" cursor="col-resize"
    draggroups="{divider:true}"
    height="${this.parent.leftbar.height}"
  >
    <method name="initNode" args="parent, attrs">
      var config = dr.sprite.retrieveGlobal('config');
      attrs.x = dr.global.clientstorage.getItem('_divider_left') || config.leftbar_minwidth + 20;
      attrs.y = config.topbar_height;
      attrs.width = config.divider_width;
      
      this.super();
    </method>
    <method name="updatePosition" args="x, y">
      if (!this.disabled) {
        this.setActualAttribute('x', Math.max(config.leftbar_minwidth, Math.min(config.leftbar_maxwidth, x)));
        dr.global.clientstorage.setItem('_divider_left', this.x);
      }
    </method>
  </view>

  <view name="divider_right" with="keyboarddraggable" ignoreplacement="true" cursor="col-resize"
    draggroups="{divider:true}"
    y="${config.topbar_height}"
    width="${config.divider_width}" height="${this.parent.leftbar.height}"
  >
    <handler event="oninnerwidth" reference="parent" args="innerwidth">
      // Respond to browser window resizing
      var x = this.inited ? this.x : dr.global.clientstorage.getItem('_divider_right') || innerwidth - config.rightbar_minwidth;
      this.updatePosition(x, this.y);
    </handler>
    <method name="updatePosition" args="x, y">
      if (!this.disabled) {
        this.setAttribute('x', Math.max(config.rightbar_minx, Math.min(this.parent.innerwidth - config.rightbar_minwidth, x)));
        dr.global.clientstorage.setItem('_divider_right', this.x);
      }
    </method>
  </view>

  <!--// Top Panel //-->
  <view id="messages" ignoreplacement="true"
    x="center" width="550" height="12"
    bgcolor="#dddddd" boxshadow="${config.boxshadow_large}"
    bottomleftcornerradius="6" bottomrightcornerradius="6" opacity="0.85"
  >
    <attribute name="selected" type="boolean" value="false"/>
    <handler event="onselected" args="selected">
      this.stopActiveAnimators('height');
      this.stopActiveAnimators('y');
      this.animate({
        attribute:'height',
        to: 2 + (selected ? this.container.content.height : 0),
        duration:selected ? 400 : 1000
      });
      this.animate({
        attribute:'y', 
        to:selected ? editormenubar.height : 0, 
        duration:selected ? 400 : 1000
      });
      
      // Animate closed after a delay
      if (selected) {
        var self = this,
          delay = 1000 + 50 * (this._lastMsgLen || 0);
        if (this._timerId) clearTimeout(this._timerId);
        this._timerId = setTimeout(function() {
          self.setActualAttribute('selected', false);
        }, delay);
      }
    </handler>
    <method name="open">
      if (this.selected) {
        this.setActualAttribute('selected', false); // Force reanimation
        this.setActualAttribute('selected', true);
      } else {
        this.setActualAttribute('selected', true);
      }
    </method>
    <method name="addMessage" args="msg, noopen, notime">
      if (msg) {
        var content = this.container.content;
        
        // Remove any existing children that have the exact same message.
        var svs = content.getSubviews(), i = svs.length, sv;
        while (i) {
          sv = svs[--i];
          if (sv.msg === msg) sv.destroy();
        }
        
        // Create a new message.
        var child = content.createChild({
          class:'text',
          text:'${this.time + this.msg}',
          width:content.innerwidth,
          fontsize:14, multiline:true, opacity:0,
          msg:msg,
          time:notime ? '' : ((new Date()).toLocaleTimeString() + ' - ')
        });
        child.animate({attribute:'opacity', to:1, duration:600});
        this._lastMsgLen = msg.length;
        
        // Only retain 5 most recent messages
        while (svs.length > 5) svs[0].destroy();
        
        // Dim out all but the most recent message
        while (svs.length - 1 > i) svs[i++].setActualAttribute('color', '#aaaaaa');
        
        if (!noopen) this.open();
      }
    </method>
    
    <view name="container" width="550" height="${this.parent.innerheight - 2}" scrollable="true">
      <view name="content" x="2" width="546"
        leftpadding="4" rightpadding="4" toppadding="4" bottompadding="2"
        bgcolor="white"
        bottomleftcornerradius="4" bottomrightcornerradius="4" color="#666666"
      >
        <spacedlayout axis="y" spacing="4" updateparent="true" reverse="true" speed="400">
          <method name="__positionView" args="view, attrName, value">
            if (view === this.parent) {
              // Make parent updates happen immediately
              this.speed = 0;
              this.super();
              this.speed = 400;
            } else {
              this.super();
            }
          </method>
        </spacedlayout>
      </view>
    </view>
  </view>

  <!--// The menu bar at the top of the editor. //-->
  <view id="editormenubar" ignoreplacement="true"
    width="100%" height="${config.topbar_height}" bgcolor="#eeeeee" boxshadow="[0,0,3,0,'#999999']"
    oktosave="${undo.isundoable && editor.editmode}"
  >
    <attribute name="oktosave" type="boolean" value="false"/>
    
    <menubutton name="fileMenu" floatingpanelid="filemenu" label="File">
      <handler event="onoktosave" reference="parent" method="updateConfig"/>
      
      <method name="initNode" args="parent, attrs">
        var accChar = dr.global.keys.getAcceleratorChar();
        this.cfg = [
          {attrs:{name:'stop', text:'exit', shortcut:accChar + 'E'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'save', text:'save', shortcut:accChar + 'S'}},
          {attrs:{name:'editPreview', text:'preview'}},
          {attrs:{name:'livePreview', text:'open a live preview'}}
        ];
        this.super();
      </method>

      <method name="prepareConfig" args="cfg">
        var i = cfg.length, attrs;
        while (i) {
          attrs = cfg[--i].attrs;
          if (attrs) {
            switch(attrs.name) {
              case 'stop':
                attrs.disabled = !editor.editmode;
                break;
              case 'save':
                attrs.disabled = !this.parent.oktosave;
                break;
              case 'editPreview':
                attrs.text = editor.editmode ? 'preview' : 'resume editing';
                break;
              case 'livePreview':
                attrs.disabled = !editor.editmode;
                break;
            }
          }
        }
        return this.super();
      </method>
      
      <method name="getPrevMenu">
        return this.parent.settingsMenu;
      </method>
      <method name="getNextMenu">
        return this.parent.editMenu;
      </method>
    </menubutton>
    
    <menubutton name="editMenu" floatingpanelid="editmenu" label="Edit" disabled="${!editor.editmode}">
      <handler event="oneditmode" reference="editor" method="updateConfig"/>
      <handler event="onisundoable onisredoable" reference="undo" method="updateConfig"/>
      <handler event="onselected onisrootselection" reference="selectionmanager" method="updateConfig"/>
      <handler event="onclipboard" reference="actions" method="updateConfig"/>
      
      <method name="initNode" args="parent, attrs">
        var accChar = dr.global.keys.getAcceleratorChar();
        this.cfg = [
          {attrs:{name:'undo', text:'undo', shortcut:accChar + 'Z'}},
          {attrs:{name:'redo', text:'redo', shortcut:accChar + '⇧Z'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'cut', text:'cut', shortcut:accChar + 'X'}},
          {attrs:{name:'copy', text:'copy', shortcut:accChar + 'C'}},
          {attrs:{name:'paste', text:'paste', shortcut:accChar + 'V'}},
          {attrs:{name:'pasteInside', text:'paste inside', shortcut:accChar + '⇧V'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'deleteSelected', text:'delete', shortcut:'⌫'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'showMessagePanel', text:'show messages panel', shortcut:accChar + 'M'}},
        ];
        this.super();
      </method>
      
      <method name="prepareConfig" args="cfg">
        var i = cfg.length, attrs;
        while (i) {
          attrs = cfg[--i].attrs;
          if (attrs) {
            switch(attrs.name) {
              case 'undo':
                attrs.disabled = !undo.isundoable || !editor.editmode;
                break;
              case 'redo':
                attrs.disabled = !undo.isredoable || !editor.editmode;
                break;
              case 'deleteSelected':
                attrs.disabled = !selectionmanager.selected || selectionmanager.isrootselection;
                break;
              case 'cut':
              case 'copy':
                attrs.disabled = !selectionmanager.selected || selectionmanager.isrootselection || selectionmanager.selected.isA(dr.dataset);
                break;
              case 'paste':
                attrs.disabled = !selectionmanager.selected || actions.clipboard === '' || selectionmanager.selected.isA(dr.dataset);
                break;
              case 'pasteInside':
                attrs.disabled = !selectionmanager.selected || actions.clipboard === '' || selectionmanager.selected.isA(dr.dataset);
                break;
            }
          }
        }
        return this.super();
      </method>
      
      <method name="getPrevMenu">
        return this.parent.fileMenu;
      </method>
      <method name="getNextMenu">
        return this.parent.layerMenu;
      </method>
    </menubutton>
    
    <menubutton name="layerMenu" floatingpanelid="layermenu" label="Layer" disabled="${!editor.editmode}">
      <handler event="onselected onisrootselection" reference="selectionmanager" method="updateConfig"/>
      
      <method name="initNode" args="parent, attrs">
        var accChar = dr.global.keys.getAcceleratorChar();
        this.cfg = [
          {attrs:{name:'bringToFront', text:'bring to front', shortcut:accChar + 'F'}},
          {attrs:{name:'bringForward', text:'bring forward',  shortcut:accChar + '⇧F'}},
          {attrs:{name:'sendToBack',   text:'send to back',   shortcut:accChar + 'B'}},
          {attrs:{name:'sendBackward', text:'send backward',  shortcut:accChar + '⇧B'}},
          {klass:dr.listviewseparator},
          {attrs:{name:'shiftUp',       text:'move up x1',     shortcut:'↑'}},
          {attrs:{name:'shiftUpBig',    text:'move up x10',    shortcut:'⇧↑'}},
          {attrs:{name:'shiftDown',     text:'move down x1',   shortcut:'↓'}},
          {attrs:{name:'shiftDownBig',  text:'move down x10',  shortcut:'⇧↓'}},
          {attrs:{name:'shiftLeft',     text:'move left x1',   shortcut:'←'}},
          {attrs:{name:'shiftLeftBig',  text:'move left x10',  shortcut:'⇧←'}},
          {attrs:{name:'shiftRight',    text:'move right x1',  shortcut:'→'}},
          {attrs:{name:'shiftRightBig', text:'move right x10', shortcut:'⇧→'}},
        ];
        this.super();
      </method>
      
      <method name="prepareConfig" args="cfg">
        var i = cfg.length, attrs;
        while (i) {
          attrs = cfg[--i].attrs;
          if (attrs) {
            switch(attrs.name) {
              case 'bringToFront':
              case 'bringForward':
              case 'sendToBack':
              case 'sendBackward':
              case 'shiftUp':
              case 'shiftUpBig':
              case 'shiftDown':
              case 'shiftDownBig':
              case 'shiftLeft':
              case 'shiftLeftBig':
              case 'shiftRight':
              case 'shiftRightBig':
                attrs.disabled = !selectionmanager.selected || selectionmanager.isrootselection;
                break;
            }
          }
        }
        return this.super();
      </method>
      
      <method name="getPrevMenu">
        return this.parent.editMenu;
      </method>
      <method name="getNextMenu">
        return this.parent.settingsMenu;
      </method>
    </menubutton>
    
    <menufloatingpanelbutton name="settingsMenu" floatingpanelid="settings" label="Settings" disabled="${!editor.editmode}">
      <method name="getPrevMenu">
        return this.parent.layerMenu;
      </method>
      <method name="getNextMenu">
        return this.parent.fileMenu;
      </method>
    </menufloatingpanelbutton>
    
    <spacedlayout inset="2" spacing="1"/>
  </view>
</view>


<!--// FLOATING PANEL VIEWS //-->
<basefloatingpanel panelid="settings"
  width="auto" height="auto" padding="8" clickable="true"
  bottomleftcornerradius="4" bottomrightcornerradius="4"
  boxshadow="[0,3,3,0,'#999999']" border="0" bgcolor="#eeeeee"
>
  <method name="getFirstFocusableDescendant">
    return gridsizex;
  </method>
  
  <spacedlayout axis="y" spacing="8" updateparent="true"/>
  
  <view height="auto">
    <spacedlayout spacing="4" updateparent="true"/>
    <editor_text text="grid x:" y="2"/>
    <editor_inputtext id="gridsizex" width="30" allowedchars="0123456789" maxlength="3">
      <method name="initNode" args="parent, attrs">
        attrs.text = dr.global.clientstorage.getItem('_editor_gridsizex');
        if (attrs.text === null) attrs.text = '0';
        this.super();
      </method>
      <handler event="ontext" args="text">
        dr.global.clientstorage.setItem('_editor_gridsizex', text);
      </handler>
    </editor_inputtext>
    <editor_text text="y:" y="2"/>
    <editor_inputtext id="gridsizey" width="30" allowedchars="0123456789" maxlength="3" text="0">
      <method name="initNode" args="parent, attrs">
        attrs.text = dr.global.clientstorage.getItem('_editor_gridsizey');
        if (attrs.text === null) attrs.text = '0';
        this.super();
      </method>
      <handler event="ontext" args="text">
        dr.global.clientstorage.setItem('_editor_gridsizey', text);
      </handler>
    </editor_inputtext>
  </view>
  
  <view height="auto">
    <spacedlayout spacing="4" updateparent="true"/>
    <checkbox id="snaptoguides" checkcolor="#999999">
      <method name="initNode" args="parent, attrs">
        attrs.selected = dr.global.clientstorage.getItem('_editor_snaptoguides');
        if (attrs.selected === null) attrs.selected = true;
        this.super();
      </method>
      <handler event="onselected" args="selected">
        dr.global.clientstorage.setItem('_editor_snaptoguides', selected);
      </handler>
    </checkbox>
    <editor_text text="snap to guides"/>
  </view>
</basefloatingpanel>

<colorpicker panelid="colorpicker"/>

<fontpicker panelid="fontpicker"/>
