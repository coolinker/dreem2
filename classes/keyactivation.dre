<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
   * @mixin dr.keyactivation {UI Behavior}
   * Provides keyboard handling to "activate" the component when a key is 
   * pressed down or released up. By default, when a keyup event occurs for
   * an activation key and this view is not disabled, the 'doActivated' method
   * will get called.
   */-->
<mixin name="keyactivation">
  <!--// Life Cycle /////////////////////////////////////////////////////////-->
  <method name="initNode" args="parent, attrs">
    this.super();
    
    this.listenToPlatform(this, 'onkeydown', '__handleKeyDown');
    this.listenToPlatform(this, 'onkeypress', '__handleKeyPress');
    this.listenToPlatform(this, 'onkeyup', '__handleKeyUp');
  </method>


  <!--// Attributes /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {Array} activationkeys
    * An array of chars The keys that when keyed down will activate this 
    * component. Note: The value is not copied so modification of the array 
    * outside the scope of this object will effect behavior.
    * The default activation keys are enter (13) and spacebar (32).
    */-->
  <attribute name="activationkeys" type="expression" value="[13,32]"/>

  <!--/**
    * @attribute {Number} activatekeydown
    * @readonly
    * The keycode of the activation key that is currently down. This will 
    * be -1 when no key is down.
    */-->
  <attribute name="activatekeydown" type="number" value="-1"/>

  <!--/**
    * @attribute {Boolean} repeatkeydown
    * Indicates if doActivationKeyDown will be called for repeated keydown 
    * events or not.
    */-->
  <attribute name="repeatkeydown" type="boolean" value="false"/>


  <!--// Methods ////////////////////////////////////////////////////////////-->
  <!--/** @private */-->
  <method name="__handleKeyDown" args="platformEvent">
    if (!this.disabled) {
      if (this.activatekeydown === -1 || this.repeatkeydown) {
        var keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent),
          keys = this.activationkeys, i = keys.length;
        while (i) {
          if (keyCode === keys[--i]) {
            if (this.activatekeydown === keyCode) {
              this.doActivationKeyDown(keyCode, true);
            } else {
              this.activatekeydown = keyCode;
              this.doActivationKeyDown(keyCode, false);
            }
            dr.sprite.preventDefault(platformEvent);
            return;
          }
        }
      }
    }
  </method>

  <!--/** @private */-->
  <method name="__handleKeyPress" args="platformEvent">
    if (!this.disabled) {
      var keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent);
      if (this.activatekeydown === keyCode) {
        var keys = this.activationkeys, i = keys.length;
        while (i) {
          if (keyCode === keys[--i]) {
            dr.sprite.preventDefault(platformEvent);
            return;
          }
        }
      }
    }
  </method>

  <!--/** @private */-->
  <method name="__handleKeyUp" args="platformEvent">
    if (!this.disabled) {
      var keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent);
      if (this.activatekeydown === keyCode) {
        var keys = this.activationkeys, i = keys.length;
        while (i) {
          if (keyCode === keys[--i]) {
            this.activatekeydown = -1;
            this.doActivationKeyUp(keyCode);
            dr.sprite.preventDefault(platformEvent);
            return;
          }
        }
      }
    }
  </method>

  <!--/**
    * @method doBlur
    * @overrides dr.view
    * @returns {void} 
    */-->
  <method name="doBlur">
    this.super();
    
    if (!this.disabled) {
      var keyThatWasDown = this.activatekeydown;
      if (keyThatWasDown !== -1) {
        this.activatekeydown = -1;
        this.doActivationKeyAborted(keyThatWasDown);
      }
    }
  </method>

  <!--/**
    * @method doActivationKeyDown
    * @abstract
    * Called when an activation key is pressed down.
    * @param {Number} key the keycode that is down.
    * @param {Boolean} isRepeat Indicates if this is a key repeat event or not.
    * @returns {void} 
    */-->
  <method name="doActivationKeyDown" args="key, isRepeat">
    // Subclasses to implement as needed.
  </method>

  <!--/**
    * @method doActivationKeyUp
    * Called when an activation key is release up. This executes the 
    * 'doActivated' method by default. 
    * @param {Number} key the keycode that is up.
    * @returns {void} 
    */-->
  <method name="doActivationKeyUp" args="key">
    this.doActivated();
  </method>

  <!--/**
    * @method doActivationKeyAborted
    * @abstract
    * Called when focus is lost while an activation key is down.
    * @param {Number} key the keycode that is down.
    * @returns {void} 
    */-->
  <method name="doActivationKeyAborted" args="key">
    // Subclasses to implement as needed.
  </method>
</mixin>