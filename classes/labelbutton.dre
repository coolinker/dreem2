<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->



<!--/**
   * @class dr.labelbutton {UI Components}
   * @extends dr.buttonbase
   * Button class consisting of text centered in a view. The onclick event
   * is generated when the button is clicked. The visual state of the
   * button changes during onismousedown.
   *
   *     @example
   *     <spacedlayout axis="y"></spacedlayout>
   *
   *     <labelbutton text="click me">
   *       <handler event="onactivated">
   *         hello.setAttribute('text', 'Hello Universe!');
   *       </handler>
   *     </labelbutton>
   *
   *     <text id="hello"></text>
   */-->
<class name="labelbutton" type="coffee" extends="buttonbase">
  <attribute name="indicatorsize" type="number" value="10"></attribute>

  <setter name="$textcontent" args="v">
    @setActualAttribute('text', v)
  </setter>

  <handler event="onismousedown" args="ismousedown">
    if ismousedown
      @visual.setAttribute('bgcolor', @selectcolor)
      @label.setAttribute('color', @defaultcolor)
      @indicator.setAttribute('fill', @defaultcolor)
    else
      @visual.setAttribute('bgcolor', @defaultcolor)
      @label.setAttribute('color', @textcolor)
      @indicator.setAttribute('fill', @textcolor)
  </handler>

  <method name="initNode" args="parent, attrs">
    if attrs.bgcolor
      attrs.defaultcolor = attrs.bgcolor
      delete attrs.bgcolor
    
    @super()

    # visual is the object that makes a visual change when selected
    @visual = @

    @handleResize()
    @visualize()
  </method>

  <method name="handleResize">
    @super()
    
    return if @_resize_lock

    settings = {}

    if @_fixedwidth
      settings.textx = (@innerwidth - @label.width) / 2.0
    else
      settings.width = @label.width + @leftpadding + @rightpadding + @leftborder + @rightborder + (@indicatorsize * 1.5) + 2
      settings.textx = @indicatorsize + 1 if @indicatorsize

    if @_fixedheight
      settings.texty = (@innerheight - @label.height) / 2.0
    else
      settings.height = @label.height + @toppadding + @bottompadding + @topborder + @bottomborder

    @_resize_lock = true
    @setAttributes(settings)
    @_resize_lock = false
  </method>

  <indicator name="indicator" width="${this.parent.indicatorsize}" height="${this.parent.indicatorsize}"></indicator>
</class>
