<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Setters'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view width="100%" height="100%" bgcolor="#eeeeee" scrollable="true">
      <!-- Test a setter can modify a value. -->
      <class name="item" type="coffee" width="10" height="10" bgcolor="#999999">
        <setter name="x" args="x">
          return Math.round(x / 10) * 10
        </setter>
        
        <attribute name="foo" type="string" value=""></attribute>
        <setter name="foo" args="foo">
          return foo
        </setter>
        
        <handler event="onfoo">
          @fooEventCount ?= 0
          @fooEventCount++
        </handler>
      </class>
      
      <!-- Test multiple setters can modify a value. -->
      <class name="subitem" extends="item" type="coffee">
        <setter name="x" args="x">
          return 2 * @super()
        </setter>
        
        <setter name="foo" args="foo">
          if foo.length > 10
            return @super()
          else
            @setActual('bar', foo)
            return dr.noop
        </setter>
        
        <handler event="onbar">
          @barEventCount ?= 0
          @barEventCount++
        </handler>
      </class>
      
      <item name="v1" x="5" y="5" foo="hey"></item>
      <subitem name="v2" x="5" y="25" foo="there"></subitem>
      
      <!-- Verify setter order and early/late attrs. I mixed up the
           attr definitions and setter implementations between the class,
           a subclass and an instance so that the test is 
           more comprehensive. -->
      <class name="foo">
        <attribute name="k" type="number" value="1"></attribute>
        <attribute name="a" type="number" value="1"></attribute>
        <attribute name="j" type="number" value="1"></attribute>
        <attribute name="b" type="number" value="1"></attribute>
        <attribute name="i" type="number" value="1"></attribute>
        <attribute name="c" type="number" value="1"></attribute>
        <attribute name="d" type="number" value="1"></attribute>
        
        <setter name="a" args="v">this.output.push('a'); return v;</setter>
        <setter name="b" args="v">this.output.push('b'); return v;</setter>
        <setter name="c" args="v">this.output.push('c'); return v;</setter>
        
        <method name="initNode" args="parent, attrs">
          var output = this.output = [];
          
          this.appendToEarlyAttrs('j');
          this.prependToEarlyAttrs('k');
          
          this.appendToLateAttrs('a');
          this.prependToLateAttrs('b');
          
          this.super();
        </method>
      </class>
      
      <class name="subfoo" extends="foo" i="9">
        <attribute name="g" type="number" value="1"></attribute>
        <setter name="g" args="v">this.output.push('g'); return v;</setter>
      </class>
      
      <mixin name="bar" d="4">
        <attribute name="h" type="number" value="1"></attribute>
        
        <setter name="h" args="v">this.output.push('h'); return v;</setter>
        <setter name="d" args="v">this.output.push('d'); return v;</setter>
      </mixin>
      
      <subfoo name="v3" with="bar" a="2" b="3" c="4">
        <attribute name="e" type="number" value="1"></attribute>
        <attribute name="f" type="number" value="1"></attribute>
        
        <setter name="i" args="v">this.output.push('i'); return v;</setter>
        <setter name="j" args="v">this.output.push('j'); return v;</setter>
        <setter name="k" args="v">this.output.push('k'); return v;</setter>
        
        <setter name="e" args="v">this.output.push('e'); return v;</setter>
        <setter name="f" args="v">this.output.push('f'); return v;</setter>
        
        <method name="initNode" args="parent, attrs">
          // Happens before superclass
          this.prependToEarlyAttrs('f');
          this.appendToLateAttrs('c');
          
          this.super();
          
          var expectedEarlyAttrs = ['k','f','j'];
          var expectedLateAttrs = ['b','c','a'];
          var expected = [
            'k','f','j', // Early
            'd','e','g','h','i', // Normal
            'b','c','a' // Late
          ];
          
          assert.deepEqual(this.earlyAttrs, expectedEarlyAttrs);
          assert.deepEqual(this.lateAttrs, expectedLateAttrs);
          
          assert.deepEqual(this.output, expected);
        </method>
      </subfoo>
      
      <handler event="oninit">
        var v1 = this.v1,
          v2 = this.v2;
        
        assert.equal(10, v1.x, 'View one has an x of 10.');
        assert.equal(5, v1.y, 'View one has a y of 5.');
        
        assert.equal(20, v2.x, 'View one has an x of 20.');
        assert.equal(25, v2.y, 'View one has a y of 25.');
        
        v1.setAttribute('x', 17);
        
        assert.equal(20, v1.x, 'View one has an x of 20.');
        
        v2.setAttribute('x', 17);
        
        assert.equal(40, v2.x, 'View one has an x of 40.');
        
        // Verify noop return type for setters and defaultSetAttriubteBehavior
        assert.equal("hey", v1.foo, 'The foo attribute should have been set.');
        assert.equal(1, v1.fooEventCount, '1 event should have fired');
        
        assert.equal(undefined, v2.foo, 'The foo attribute should not have been set since dr._noop was returned.');
        assert.equal("there", v2.bar, 'The bar attribute should have been set instead.');
        assert.equal(undefined, v2.fooEventCount, '0 foo events should have fired');
        assert.equal(1, v2.barEventCount, '1 bar event should have fired');
        
        v2.setAttribute('foo', 'this is longer than 10 chars');
        assert.equal('this is longer than 10 chars', v2.foo, 'Normal processing should have occurred.');
        assert.equal("there", v2.bar, 'The bar attribute should not have changed.');
        assert.equal(1, v2.fooEventCount, '1 foo event should have fired');
        assert.equal(1, v2.barEventCount, '1 bar event should have fired');
      </handler>
    </view>
  </screen>
</screens>
</composition>