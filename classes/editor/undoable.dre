<!--  Copyright 2015-2016 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
  * @class dr.editor.undoable {UI Components}
  * @extends dr.eventable
  * @abstract
  * An object that encapsulates doing and undoing a change. Typically this
  * change would be on a target object of some sort, but that is really
  * up to the specific implementation.
  *
  * When an undoable is in either the "done" or "undone" state. The "done"
  * state means the change has been applied and the "undone" state means
  * that it has not been applied. An undoable always starts out in the
  * undone state when it is created.
  *
  * Typically an undoable will be added to an editor-undostack and will
  * be managed through that object.
  */-->
<class name="editor-undoable" extends="eventable">
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {Boolean} [done]
    * @readonly
    * Indicates if this undoable is in the "done" or "undone" state.
    * Undoables begin in the undone state.
    */-->
  <attribute name="done" type="boolean" value="false"></attribute>

  <!--/**
    * @attribute {String} [undodescription]
    * A human readable representation of the undoable. The description
    * should describe what will be undone when the undoable is
    * executed.
    */-->
  <attribute name="undodescription" type="string" value=""></attribute>

  <!--/**
    * @attribute {String} [redodescription]
    * A human readable representation of the undoable. The description
    * should describe what will be done/redone when the undoable is
    * executed.
    */-->
  <attribute name="redodescription" type="string" value=""></attribute>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method getUndoDescription
    * Gets a human readable description of this undoable for use when it
    * can be undone.
    * @returns {String} The human readable string.
    */-->
  <method name="getUndoDescription">
    return this.undodescription;
  </method>

  <!--/**
    * @method getRedoDescription
    * Gets a human readable description of this undoable for use when it
    * can be done.
    * @returns {String} The human readable string.
    */-->
  <method name="getRedoDescription">
    return this.redodescription;
  </method>

  <!--/**
    * @method undo
    * Rolls back this undoable if it is in the done state. Sets the "done"
    * attribute to false if successfull.
    * @param {Function} callback An optional function that will be executed if 
    * undo succeeds. The undoable is passed in as an argument to the callback.
    * @returns {this}
    */-->
  <method name="undo" args="callback">
    if (this.done) {
      this.setAttribute('done', false);
      if (callback && typeof callback === 'function') callback(this);
    }
    return this;
  </method>

  <!--/**
    * @method undo
    * Rolls forward this undoable if it is in the undone state. Sets the "done"
    * attribute to true if successfull.
    * @param {Function} callback An optional function that will be executed if 
    * redo succeeds. The undoable is passed in as an argument to the callback.
    * @returns {this}
    */-->
  <method name="redo" args="callback">
    if (!this.done) {
      this.setAttribute('done', true);
      if (callback && typeof callback === 'function') callback(this);
    }
    return this;
  </method>

  <!--/**
    * @method serialize
    * Serializes this undoable as a JSON string. Subclasses should implement
    * this method and call super from that implementation. The obj passed in 
    * is what actually gets serialized via JSON.stringify. Subclasses should 
    * store attrs on this object as needed before calling super.
    * @param {Object} obj An object passed up from subclasses that should
    * contain the main payload for the undoable.
    * @returns {String}
    */-->
  <method name="serialize" args="obj">
    return JSON.stringify({classname:this.$tagname, data:obj || null});
  </method>

  <!--/**
    * @method deserialize
    * Restores the state of an undoable from serialized data. Subclasses should
    * implement this method and call super from that implementation. The obj
    * passed in is a set of attributes that will be directly assigned to this
    * undoable instance (setAttribute is not called).
    * @param {Object} data An object containing attribute values to be restored
    * via direct assignment.
    * @returns {void}
    */-->
  <method name="deserialize" args="obj">
    if (obj) for (var key in obj) this[key] = obj[key];
  </method>

  <!--/**
    * @method retrieveById
    * Used by previewer clients during deserialization to get a node from the 
    * tree that has the provided ID.
    * @param {String} id The id to get the node for.
    * @returns {Node}
    */-->
  <method name="retrieveById" args="id" allocation="class">
    if (id === null) {
      // Special case for changes on the root view. In the editor the "root" 
      // view will not have an id so it gets serialized as a null target.
      return dr.global.roots.getRoots()[2];
    }
    return dr.sprite.retrieveGlobal(id);
  </method>
</class>
