<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<include href='./keyboarddraggable.dre'/>
<include href='./editable.dre'/>
<include href='./controlhandle.dre'/>
<include href='./reticle.dre'/>
<include href='./toolbarbutton.dre'/>
<include href='./attributeeditor.dre'/>
<include href='./layouteditor.dre'/>
<include href='./colorpicker.dre'/>
<include href='./componentdropable.dre'/>
<include href='./componentsource.dre'/>

<include href='./undo/createlayoutundoable.dre'/>
<include href='./undo/deletelayoutundoable.dre'/>

<view name="editor" id="editor" width="100%" height="100%"
  ignoreplacement="true" ignorelayout="true"
  bgcolor="white" clip="true"
  defaultplacement="content_bg.content.inner"
>
  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <attribute name="paused" type="boolean" value="true"/>

  <attribute name="showlocationmarkers" type="boolean" value="true"/>

  <!-- Enforce a minimum width for the editor. -->
  <setter name="width" args="width">
    return this.super(Math.max(width, 1000));
  </setter>

  <!-- Enforce a minimum height for the editor. -->
  <setter name="height" args="height">
    return this.super(Math.max(height, 500));
  </setter>


  <!--// SERVICE NODES //////////////////////////////////////////////////////-->
  <include href='./service_nodes/config.dre'/>
  <include href='./service_nodes/selectionmanager.dre'/>
  <include href='./service_nodes/actions.dre'/>
  <include href='./service_nodes/editormodel.dre'/>

  <editor-undostack id="undo"></editor-undostack>


  <!--// HANDLERS ///////////////////////////////////////////////////////////-->
  <handler event="onkeydown" reference="dr.keyboard" args="platformEvent">
    var keyboard = dr.keyboard,
      keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent),
      isAcceleratorKeyDown = keyboard.isAcceleratorKeyDown(),
      isShiftKeyDown = keyboard.isShiftKeyDown();
    
    // If current focus is an input text don't do anything. In particular,
    // we want to allow the delete key to be processed normally.
    var focusedView = dr.global.focus.focusedView;
    if (focusedView && focusedView.sprite.isA(dr.sprite.InputText)) {
      if (!isAcceleratorKeyDown) return;
      if (keyCode !== 90) return; // Z: Process undo/redo below since we want to supress the browser undo/redo mechanism
    }
    
    if (isAcceleratorKeyDown) {
      switch (keyCode) {
        case 66: // B: Reorder backward
          platformEvent.preventDefault(); // Prevent browser show bookmarks bar functionality
          actions[(isShiftKeyDown ? 'sendBackward' : 'sendToBack')]();
          break;
        case 70: // F: Reorder forward
          platformEvent.preventDefault(); // Prevent browser find functionality
          actions[(isShiftKeyDown ? 'bringForward' : 'bringToFront')]();
          break;
        case 83: // S: Save document
          platformEvent.preventDefault(); // Prevent browser save functionality
          saveButton.doActivated();
          break;
        case 90: // Z: Undo/Redo
          platformEvent.preventDefault(); // Prevent browser undo/redo functionality
          actions[(isShiftKeyDown ? 'redo' : 'undo')]();
          break;
      }
    } else {
      var GK = dr.sprite.GlobalKeys;
      switch (keyCode) {
        case GK.KEYCODE_BACKSPACE: // Delete selected view
          actions.deleteSelected();
          break;
        case GK.KEYCODE_ESC: // Clear selection
          if (!reticle.isStarted) selectionmanager.clear();
          break;
      }
    }
  </handler>

  <handler name="updateLocationMarkers" event="onmousemove" reference="dr.mouse" args="event">
    if (event) {
      this._lastMouseEvent = event;
    } else {
      event = this._lastMouseEvent;
    }
    
    var x = event.x, 
      y = event.y,
      xLoc = this.xLocation,
      yLoc = this.yLocation,
      content_bg = this.content_bg,
      content = content_bg.content,
      inner = content.inner;
    
    xLoc.setAttribute('visible', this.showlocationmarkers);
    xLoc.setAttribute('x', x - 1);
    xLoc.label.setAttribute('text', x - content.x - content_bg.x + content_bg.scrollx + inner.scrollx);
    
    yLoc.setAttribute('visible', this.showlocationmarkers);
    yLoc.setAttribute('y', y - 1);
    yLoc.label.setAttribute('text', y - content.y - content_bg.y + content_bg.scrolly + inner.scrolly);
    
    return true;
  </handler>
  <handler event="onscrollx, onscrolly" reference="this.content_bg">
    this.updateLocationMarkers();
  </handler>

  <!-- Eat attempts to open the context menu since this typically messes up
       drag and drop. -->
  <handler event="oncontextmenu" args="event"/>



  <!--// VIEWS //////////////////////////////////////////////////////////////-->
  <!--// Rulers, Location and Selection Overlays //-->
  <view id="ruler_horizontal" name="ruler_horizontal" ignoreplacement="true" clip="true"
    x="${this.parent.ruler_corner.x + this.parent.ruler_corner.width}"
    y="${config.topbar_height}"
    width="${this.parent.divider_right.x - this.x}"
    height="${config.ruler_thickness}"
    scrollx="${this.parent.content_bg.scrollx + this.parent.content_bg.content.inner.scrollx + 100 - config.content_inset}"
  >
    <spacedlayout axis="x" spacing="100" inset="102"/>
    <replicator name="repl" classname="horizontal_rulertext" data="${config.ruler_marks}"/>
    
    <bitmap width="5200" ignorelayout="true"
      height="${config.ruler_thickness}"
      src="/classes/editor/img/ruler_horizontal.png" stretches="contain" repeat="repeat-x"
    >
      <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    </bitmap>
  </view>
  
  <view id="ruler_vertical" name="ruler_vertical" ignoreplacement="true" clip="true"
    x="${this.parent.divider_left.x}"
    y="${this.parent.ruler_corner.y + this.parent.ruler_corner.height}"
    width="${config.ruler_thickness}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
    scrolly="${this.parent.content_bg.scrolly + this.parent.content_bg.content.inner.scrolly + 100 - config.content_inset}"
  >
    <spacedlayout axis="y" spacing="100" inset="97"/>
    <replicator name="repl" classname="vertical_rulertext" data="${config.ruler_marks}"/>
    
    <bitmap height="5200" ignorelayout="true"
      width="${config.ruler_thickness}"
      src="/classes/editor/img/ruler_vertical.png" stretches="contain" repeat="repeat-y"
    >
      <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    </bitmap>
  </view>
  
  <view id="xLocation" name="xLocation" ignoreplacement="true"
    y="${this.parent.ruler_horizontal.y}" width="1" height="${config.ruler_thickness}" bgcolor="${config.location_color}"
  >
    <text with="locationtext" name="label" x="3" y="2"/>
  </view>

  <view id="yLocation" name="yLocation" ignoreplacement="true"
    x="${this.parent.ruler_vertical.x}" width="${config.ruler_thickness}" height="1" bgcolor="${config.location_color}"
  >
    <verticaltext with="locationtext" name="label" x="2" y="-2"/>
  </view>
  
  <view id="horizontal_selection" with="button, keyboarddraggable" ignoreplacement="true"
    disabled="${selectionmanager.isrootselection}"
    cursor="col-resize"
    visible="${reticle.visible}" opacity="0.75"
    x="${reticle.x}" y="${this.parent.ruler_horizontal.y}"
    width="${Math.max(1, reticle.width)}" height="${config.ruler_thickness}"
  >
    <view name="fill" width="100%" height="100%" opacity="0.15" bgcolor="${config.selection_color}"/>
    <view name="lower" width="1" height="100%" bgcolor="${config.selection_color}"/>
    <view name="upper" width="1" x="right" height="100%" bgcolor="${config.selection_color}"/>
    
    <view with="button, keyboarddraggable" width="10" x="-5" height="100%" cursor="w-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        reticle._start();
        this._origTargetX = reticle.target.x;
        this._origTargetW = reticle.target.width;
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          var diff = Math.min(this._origTargetW, x + 5);
          
          x = this._origTargetX + diff;
          var gx = Number(gridsizex.value);
          if (gx > 0) x = gx * Math.round(x / gx);
          diff = x - this._origTargetX;
          
          target.setAttribute('x', this._origTargetX + diff, true); // 3rd arg enables model update
          target.setAttribute('width', this._origTargetW - diff, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <view with="button, keyboarddraggable" width="10" x="${this.parent.width - 5}" height="100%" cursor="e-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        reticle._start();
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          x = Math.max(0, x + 5);
          var gx = Number(gridsizex.value);
          if (gx > 0) x = gx * Math.round(x / gx);
          target.setAttribute('width', x, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <horizontal_ruler_relselecttext name="locrelstart" x="${-this.width - config.selection_marker_offset}"/>
    <horizontal_ruler_selecttext name="locstart" x="${-this.width - config.selection_marker_offset}"/>
    <horizontal_ruler_selecttext name="locsize" x="center"/>
    <horizontal_ruler_selecttext name="locend" x="${this.parent.width + config.selection_marker_offset}"/>
    <horizontal_ruler_relselecttext name="locrelend" x="${this.parent.width + config.selection_marker_offset}"/>
    
    <method name="startDrag" args="event">
      reticle._start();
      this.super();
    </method>
    <method name="stopDrag" args="event, isAbort">
      if (isAbort) {
        reticle._abort();
      } else {
        reticle._stop();
      }
      this.super();
    </method>
    <method name="updatePosition" args="x, y">
      var target = reticle.target;
      if (!this.disabled && target) {
        x = x - target.getAbsolutePosition().x + target.x;
        var gx = Number(gridsizex.value);
        if (gx > 0) x = gx * Math.round(x / gx);
        target.setAttribute('x', x, true); // 3rd arg enables model update
      }
    </method>
    
    <method name="drawHoverState">
      this.fill.setAttribute('opacity', 0.25);
    </method>
    <method name="drawActiveState">
      this.fill.setAttribute('opacity', 0.4);
    </method>
    <method name="drawReadyState">
      this.fill.setAttribute('opacity', 0.15);
    </method>
  </view>
  
  <view id="vertical_selection" with="button, keyboarddraggable" ignoreplacement="true"
    disabled="${selectionmanager.isrootselection}"
    visible="${reticle.visible}" opacity="0.75"
    x="${this.parent.ruler_vertical.x}" y="${reticle.y}"
    width="${config.ruler_thickness}" height="${Math.max(1, reticle.height)}"
    cursor="row-resize"
  >
    <view name="fill" width="100%" height="100%" opacity="0.15" bgcolor="${config.selection_color}"/>
    <view name="lower" height="1" width="100%" bgcolor="${config.selection_color}"/>
    <view name="upper" height="1" y="bottom" width="100%" bgcolor="${config.selection_color}"/>
    
    <vertical_ruler_relselecttext name="locrelstart" y="${-config.selection_marker_offset}"/>
    <vertical_ruler_selecttext name="locstart" y="${-config.selection_marker_offset}"/>
    <vertical_ruler_selecttext name="locsize" y="middle"/>
    <vertical_ruler_selecttext name="locend" y="${this.parent.height + this.height + config.selection_marker_offset}"/>
    <vertical_ruler_relselecttext name="locrelend" y="${this.parent.height + this.height + config.selection_marker_offset}"/>
    
    <view with="button, keyboarddraggable" height="10" y="-5" width="100%" cursor="n-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        reticle._start();
        this._origTargetY = reticle.target.y;
        this._origTargetH = reticle.target.height;
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          var diff = Math.min(this._origTargetH, y + 5);
          
          y = this._origTargetY + diff;
          var gy = Number(gridsizey.value);
          if (gy > 0) y = gy * Math.round(y / gy);
          diff = y - this._origTargetY;
          
          target.setAttribute('y', this._origTargetY + diff, true); // 3rd arg enables model update
          target.setAttribute('height', this._origTargetH - diff, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.lower.setAttribute('bgcolor', 'black');
        this.parent.lower.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.lower.setAttribute('bgcolor', config.selection_color);
        this.parent.lower.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <view with="button, keyboarddraggable" height="10" y="${this.parent.height - 5}" width="100%" cursor="s-resize"
      disabled="${selectionmanager.isrootselection}"
    >
      <method name="startDrag" args="event">
        reticle._start();
        this.super();
      </method>
      <method name="stopDrag" args="event, isAbort">
        if (isAbort) {
          reticle._abort();
        } else {
          reticle._stop();
        }
        this.super();
      </method>
      <method name="updatePosition" args="x, y">
        var target = reticle.target;
        if (!this.disabled && target) {
          y = Math.max(0, y + 5);
          var gy = Number(gridsizey.value);
          if (gy > 0) y = gy * Math.round(y / gy);
          target.setAttribute('height', y, true); // 3rd arg enables model update
        }
      </method>
      
      <method name="drawFocusedState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', this.ismouseover ? config.boxshadow_normal : config.boxshadow_large);
      </method>
      <method name="drawHoverState">
        this.parent.upper.setAttribute('bgcolor', 'black');
        this.parent.upper.setAttribute('boxshadow', config.boxshadow_normal);
      </method>
      <method name="drawActiveState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
      <method name="drawReadyState">
        this.parent.upper.setAttribute('bgcolor', config.selection_color);
        this.parent.upper.setAttribute('boxshadow', null);
      </method>
    </view>
    
    <method name="startDrag" args="event">
      reticle._start();
      this.super();
    </method>
    <method name="stopDrag" args="event, isAbort">
      if (isAbort) {
        reticle._abort();
      } else {
        reticle._stop();
      }
      this.super();
    </method>
    <method name="updatePosition" args="x, y">
      var target = reticle.target;
      if (!this.disabled && target) {
        y = y - target.getAbsolutePosition().y + target.y;
        var gy = Number(gridsizey.value);
        if (gy > 0) y = gy * Math.round(y / gy);
        target.setAttribute('y', y, true); // 3rd arg enables model update
      }
    </method>
    
    <method name="drawHoverState">
      this.fill.setAttribute('opacity', 0.25);
    </method>
    <method name="drawActiveState">
      this.fill.setAttribute('opacity', 0.4);
    </method>
    <method name="drawReadyState">
      this.fill.setAttribute('opacity', 0.15);
    </method>
  </view>

  <view name="ruler_corner" ignoreplacement="true" bgcolor="white"
    x="${this.parent.divider_left.x}" y="${config.topbar_height}"
    height="${config.ruler_thickness}" width="${config.ruler_thickness}"
    border="1" bordercolor="${config.secondary_panel_color}"
  >
    <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
  </view>


  <!--// Top Panel //-->
  <view name="topbar" ignoreplacement="true" bgcolor="${config.primary_panel_color}"
    width="100%" height="${config.topbar_height}"
  >
    <view name="left" padding="2" height="${config.topbar_height}">
      <spacedlayout spacing="4" inset="2" outset="2" updateparent="true"/>
      <constantlayout attribute="y" value="'middle'"/>
      
      <listviewbutton id="actionsButton" floatingpanelid="actions" floatingvalignoffset="2" label="Actions"
        width="73" textalign="right"
        listviewattrs="{maxheight:300}"
      >
        <method name="doActivated">
          var editorPlaying = !editor.paused;
          var noActionableSelection = !selectionmanager.selected || selectionmanager.isrootselection;
          var cfg = [
            {attrs:{name:'undo', text:'Undo', disabled:!undo.isundoable || editorPlaying}},
            {attrs:{name:'redo', text:'Redo', disabled:!undo.isredoable || editorPlaying}},
            {klass:dr.listviewseparator},
            {attrs:{name:'bringToFront', text:'Bring to Front', disabled:noActionableSelection}},
            {attrs:{name:'bringForward', text:'Bring Forward', disabled:noActionableSelection}},
            {attrs:{name:'sendToBack', text:'Send to Back', disabled:noActionableSelection}},
            {attrs:{name:'sendBackward', text:'Send Backward', disabled:noActionableSelection}},
            {klass:dr.listviewseparator},
            {attrs:{name:'deleteSelected', text:'Delete', disabled:noActionableSelection}}
          ];
          this.setAttribute('itemconfig', cfg);
          
          this.toggleFloatingPanel();
        </method>
        
        <method name="doItemActivated" args="itemview">
          actions[itemview.name]();
          this.super();
        </method>
      </listviewbutton>
      <floatingpanelbutton id="settingsButton" floatingpanelid="settings" floatingvalignoffset="2" label="Settings"
        width="78" textalign="right"
      />
    </view>
    
    <view name="center" padding="2" x="${this.parent.left.width}" width="${this.parent.right.x - this.x}" height="${config.topbar_height}"/>
    
    <view name="right" padding="2" x="right" height="${config.topbar_height}">
      <spacedlayout spacing="4" inset="2" outset="2" updateparent="true"/>
      <constantlayout attribute="y" value="'middle'"/>
      
      <toolbarbutton id="editPreviewButton" action="editPreview" width="64" textalign="center">Preview</toolbarbutton>
      <view width="1" height="100%" bgcolor="${config.secondary_panel_color}"/>
      <toolbarbutton id="saveButton" action="save" disabled="${!undo.isundoable || !editor.paused}">Save</toolbarbutton>
      <toolbarbutton id="stopButton" action="stop" width="54" textalign="center">Exit</toolbarbutton>
    </view>
  </view>


  <!--// Left Panel //-->
  <view name="leftbar" ignoreplacement="true" bgcolor="white"
    y="${config.topbar_height}"
    width="${this.parent.divider_left.x}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
  />


  <!--// Content Panels //-->
  <view name="content_bg" ignoreplacement="true" bgcolor="${config.content_color}"
    x="${this.parent.ruler_horizontal.x}"
    y="${this.parent.ruler_vertical.y}"
    width="${this.parent.divider_right.x - this.x}"
    height="${this.parent.innerheight - this.y - config.bottombar_height}"
    scrollable="true"
  >
    <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
    
    <view x="69" y="35" color="#999999">
      <spacedlayout spacing="8"/>
      <constantlayout attribute="y" value="'middle'"/>
      
      <view with="button, listviewanchor" id="screenSizeButton"
        width="auto" height="auto"
        floatingpanelid="screensizes" floatingvalignoffset="2"
        focusembellishment="false"
        listviewattrs="{maxheight:300}"
        floatingalign="insideleft" floatingvalign="outsidebottom"
      >
        <method name="initNode" args="parent, attrs">
          this.cfg = [
            {attrs:{name:'custom', text:'custom'}},
            {klass:dr.listviewseparator},
            
            {attrs:{name:'iphonetall', text:'iphone (Portrait)',              w:320, h:480}},
            {attrs:{name:'iphonewide', text:'iphone (Landscape)',             w:480, h:320}},
            
            {attrs:{name:'iphone4tall', text:'iphone 4 (Portrait)',           w:Math.round(640  * 163/326), h:Math.round(960  * 163/326)}},
            {attrs:{name:'iphone4wide', text:'iphone 4 (Landscape)',          w:Math.round(960  * 163/326), h:Math.round(640  * 163/326)}},
            
            {attrs:{name:'iphone5tall', text:'iphone 5 (Portrait)',           w:Math.round(640  * 163/326), h:Math.round(1135 * 163/326)}},
            {attrs:{name:'iphone5wide', text:'iphone 5 (Landscape)',          w:Math.round(1135 * 163/326), h:Math.round(640  * 163/326)}},
            
            {attrs:{name:'iphone6tall', text:'iphone 6 (Portrait)',           w:Math.round(750  * 163/326), h:Math.round(1334 * 163/326)}},
            {attrs:{name:'iphone6wide', text:'iphone 6 (Landscape)',          w:Math.round(1334 * 163/326), h:Math.round(750  * 163/326)}},
            
            {attrs:{name:'iphone6plustall', text:'iphone 6 Plus (Portrait)',  w:Math.round(1080 * 163/401), h:Math.round(1920 * 163/401)}},
            {attrs:{name:'iphone6pluswide', text:'iphone 6 Plus (Landscape)', w:Math.round(1920 * 163/401), h:Math.round(1080 * 163/401)}}
          ];
          
          this.super();
        </method>
        
        <attribute name="isopen" type="boolean" value="false"/>
        <handler event="onisopen" args="isopen">
          this.updateUI();
          this.arrow.setAttribute('text', (isopen ? '▼' : '▶'));
        </handler>
        
        <attribute name="selecteditem" type="expression" value="this.cfg[4].attrs"/>
        <handler event="onselecteditem" args="selecteditem">
          this.label.setAttribute('text', selecteditem.text);
          
          var isCustom = selecteditem.name === 'custom';
          this.parent.custom.setAttribute('visible', isCustom);
          if (!isCustom) {
            screensizew.setAttribute('value', selecteditem.w);
            screensizeh.setAttribute('value', selecteditem.h);
          }
        </handler>
        
        <method name="doActivated">
          if (!this.disabled) {
            var fp = this.getFloatingPanel();
            if (fp) this.toggleFloatingPanel();
          }
        </method>
        
        <method name="notifyPanelHidden" args="panel">
          this.setAttribute('isopen', false);
        </method>
        
        <method name="notifyPanelShown" args="panel">
          this.setAttribute('isopen', true);
        </method>
        
        <method name="drawDisabledState">
          this.setAttribute('color', this.selected ? '#000000' : '#cccccc');
        </method>
        <method name="drawFocusedState">
          this.setAttribute('color', this.selected ? '#000000' : '#aaaaaa');
        </method>
        <method name="drawHoverState">
          this.setAttribute('color', this.selected ? '#000000' : '#aaaaaa');
        </method>
        <method name="drawActiveState">
          this.setAttribute('color', this.selected ? '#000000' : '#888888');
        </method>
        <method name="drawReadyState">
          this.setAttribute('color', this.selected ? '#000000' : '#999999');
        </method>
        <method name="doActivated">
          var cfg = this.cfg, 
            i = cfg.length, attrs, selecteditemname = this.selecteditem.name;
          while (i) {
            attrs = cfg[--i].attrs;
            if (attrs) attrs.disabled = attrs.name === selecteditemname;
          }
          
          this.setAttribute('itemconfig', cfg.concat()); // Concat to work around equality test.
          
          this.toggleFloatingPanel();
        </method>
        
        <method name="doItemActivated" args="itemview">
          this.setAttribute('selecteditem', itemview);
          this.super();
        </method>
        
        <text name="arrow" fontsize="10" y="3"/>
        <text name="label" x="11" y="1" fontsize="12"/>
      </view>
      
      <view name="custom" height="auto" visible="false">
        <spacedlayout spacing="4" updateparent="true"></spacedlayout>
        <editor_text text="w:" y="2" fontsize="12"/>
        <editor_inputtext id="screensizew" width="32" allowedchars="0123456789" maxlength="4" fontsize="12">
          <setter name="value" args="v">
            if (v > 5000) v = 5000;
            return v;
          </setter>
        </editor_inputtext>
        <editor_text text="h:" y="2" fontsize="12"/>
        <editor_inputtext id="screensizeh" width="32" allowedchars="0123456789" maxlength="4" fontsize="12">
          <setter name="value" args="v">
            if (v > 5000) v = 5000;
            return v;
          </setter>
        </editor_inputtext>
      </view>
    </view>
    
    <view name="content"
      x="${config.content_inset}"
      y="${config.content_inset}"
      width="${screensizew.value}"
      height="${screensizeh.value}"
      boxshadow="[0,0,16,4,'#cccccc']"
    >
      <!-- Use an additional inner view so that scrollbars show up inside the
           "page" rather than over the boxshadow. -->
      <view name="inner" with="editable" width="100%" height="100%" scrollable="true"
        maskfocus="${editor.paused}" focuscage="true"
        cursor="pointer"
      >
        <method name="initNode" args="parent, attrs">
          this.super();
          
          this.setAttribute('bgcolor', editor.parent.bgcolor);
        </method>
        
        <handler event="onmousedown" args="event">selectionmanager.clear();</handler>
        
        <method name="notifyDragEnter" args="dropable">
          this.__origBoxShadow = this.getActualAttribute('boxshadow');
          this.setActualAttribute('boxshadow', [0, 0, 12, 1, '#00ff00']);
        </method>
        
        <method name="notifyDragLeave" args="dropable">
          this.setActualAttribute('boxshadow', this.__origBoxShadow);
        </method>
      </view>
    </view>
    
    <view name="extra"
      x="${this.parent.content.x + this.parent.content.width}" width="${config.content_inset}"
      y="${this.parent.content.y + this.parent.content.height}" height="${config.content_inset}"
    />
    
    <webpage name="preview" id="preview" visible="false"
      x="${this.parent.content.x - 2}" y="${this.parent.content.y - 2}"
      width="${this.parent.content.width + 4}" height="${this.parent.content.height + 4}"
      border="2" bordercolor="#66ee00"
      clickable="true" bgcolor="#999999"
    />
  </view>


  <!--// Right Panel //-->
  <view name="rightbar" ignoreplacement="true" bgcolor="#fcfcfc"
    x="right" y="${config.topbar_height}"
    width="${this.parent.innerwidth - this.parent.divider_right.x}"
    height="${this.parent.leftbar.height}"
  >
    <view name="component_list_panel" width="100%" height="${this.parent.divider_top.y}" bgcolor="white" scrollable="true">
      <view width="100%">
        <wrappinglayout axis="x" spacing="5" inset="5" outset="5" linespacing="5" lineinset="5" lineoutset="5" updateparent="true"/>
        <componentsource label="Image" iconname="bitmap"
          dropclass="view"
          dropclassattrs="{width:50, height:50, bgcolor:'#cccccc', instanceattrs:{class:'bitmap', width:50, height:50}}"
        />
        <componentsource label="Text" iconname="text"
          dropclass="text"
          dropclassattrs="{text:'text', instanceattrs:{class:'text', text:'text'}}"
        />
        <componentsource label="Rectangle" iconname="view" layouthint='{"break":true}'
          dropclass="view"
          dropclassattrs="{width:50, height:50, bgcolor:'#cccccc', instanceattrs:{class:'view', width:50, height:50, bgcolor:'#cccccc'}}"
        />
        <componentsource label="Vertical Line" iconname="verticalline"
          dropclass="view"
          dropclassattrs="{width:1, height:'50', bgcolor:'#000000', instanceattrs:{class:'view', width:1, height:'100%', y:'top', bgcolor:'#000000'}}"
        />
        <componentsource label="Horizontal Line" iconname="horizontalline"
          dropclass="view"
          dropclassattrs="{width:'50', height:1, bgcolor:'#000000', instanceattrs:{class:'view', width:'100%', x:'left', height:1, bgcolor:'#000000'}}"
        />
        <!--// Layouts //-->
        <componentsource label="X-Axis Layout" iconname="spacedlayout_x" layouthint='{"break":true}'
          dropclass="bitmap"
          dropclassattrs="{width:60, height:55, bgcolor:'#999999', islayout:true, src:config.img_root + 'spacedlayout_x.png', instanceattrs:{class:'spacedlayout', locked:true, axis:'x'}}"
        />
        <componentsource label="Y-Axis Layout" iconname="spacedlayout_y"
          dropclass="bitmap"
          dropclassattrs="{width:60, height:55, bgcolor:'#999999', islayout:true, src:config.img_root + 'spacedlayout_y.png', instanceattrs:{class:'spacedlayout', locked:true, axis:'y'}}"
        />
        <componentsource label="Variable Layout" iconname="variablelayout"
          dropclass="bitmap"
          dropclassattrs="{width:60, height:55, bgcolor:'#999999', islayout:true, src:config.img_root + 'variablelayout.png', instanceattrs:{class:'variablelayout', locked:true}}"
        />
        <componentsource label="Constant Layout" iconname="constantlayout"
          dropclass="bitmap"
          dropclassattrs="{width:60, height:55, bgcolor:'#999999', islayout:true, src:config.img_root + 'constantlayout.png', instanceattrs:{class:'constantlayout', locked:true}}"
        />
      </view>
    </view>
    
    <view y="${this.parent.divider_top.y}" width="100%" height="${this.parent.innerheight - this.y}" scrollable="true">
      <spacedlayout axis="y"/>
      
      <subhead width="100%" text="Attributes"/>
      
      <view name="attrs_panel" width="100%" clip="true">
        <spacedlayout axis="y" spacing="5" inset="5" outset="5" updateparent="true">
          <method name="__positionView" args="view, attrName, value">
            // Only animate the parent updates so that the panel appears to
            // slide open/closed
            var isParent = view === this.parent;
            if (isParent) this.speed = 500;
            this.super();
            if (isParent) this.speed = 0;
          </method>
        </spacedlayout>
        <replicator classname="attributeeditor"
          data="${selectionmanager.selected ? selectionmanager.selected.getAttrsListForDetails() : []}"
        />
      </view>
      
      <subhead width="100%" text="Layouts"/>
      
      <view name="layouts_panel" id="layouts_panel" width="100%" clip="true">
        <spacedlayout axis="y" spacing="5" updateparent="true">
          <method name="__positionView" args="view, attrName, value">
            // Only animate the parent updates
            var isParent = view === this.parent;
            if (isParent) this.speed = 500;
            this.super();
            if (isParent) this.speed = 0;
          </method>
        </spacedlayout>
        
        <handler name="refresh" event="onselected" args="selected" reference="selectionmanager">
          this.repl.setAttribute('data', selected ? selected.getLayouts(true) : []);
        </handler>
        
        <replicator name="repl" classname="layouteditor"/>
      </view>
    </view>
    
    <view ignoreplacement="true"
      width="100%" y="${this.parent.divider_top.y}" height="1"
      bgcolor="${config.secondary_panel_color}"
    />
    
    <view name="divider_top" with="keyboarddraggable" cursor="row-resize"
      x="0" y="185" width="100%" height="${config.divider_width}"
    >
      <method name="updatePosition" args="x, y">
        if (!this.disabled) this.setAttribute('y', Math.max(95, Math.min(455, y)));
      </method>
    </view>
  </view>


  <!--// Bottom Panel //-->
  <view name="bottombar" ignoreplacement="true" bgcolor="${config.primary_panel_color}"
    y="bottom" width="100%" height="${config.bottombar_height}"
  />


  <!--// Misc Lines //-->
  <!-- Line directly below the header. -->
  <view ignoreplacement="true"
    width="100%" y="${config.topbar_height}" height="1"
    bgcolor="${config.secondary_panel_color}"
  />

  <!-- Line at the left edge of the rightbar. -->
  <view ignoreplacement="true"
    x="${this.parent.rightbar.x}" y="${this.parent.rightbar.y}"
    width="1" height="${this.parent.rightbar.height}"
    bgcolor="${config.secondary_panel_color}"
  />


  <!--// Dividers //-->
  <view name="divider_left" with="keyboarddraggable" ignoreplacement="true" cursor="col-resize"
    x="${config.leftbar_minwidth}" y="${config.topbar_height}"
    width="${config.divider_width}" height="${this.parent.leftbar.height}"
  >
    <method name="updatePosition" args="x, y">
      if (!this.disabled) this.setAttribute('x', Math.max(config.leftbar_minwidth, Math.min(config.leftbar_maxwidth, x)));
    </method>
  </view>

  <view name="divider_right" with="keyboarddraggable" ignoreplacement="true" cursor="col-resize"
    x="${this.parent.innerwidth - config.rightbar_minwidth}" y="${config.topbar_height}"
    width="${config.divider_width}" height="${this.parent.leftbar.height}"
  >
    <handler event="oninnerwidth" reference="parent">
      // Respond to browser window resizing
      this.updatePosition(this.x, this.y);
    </handler>
    <method name="updatePosition" args="x, y">
      if (!this.disabled) this.setAttribute('x', Math.max(config.rightbar_minx, Math.min(this.parent.innerwidth - config.rightbar_minwidth, x)));
    </method>
  </view>

  <view id="guides" ignorelayout="true" ignoreplacement="true"></view>

  <!--// Selection Reticle //-->
  <reticle id="reticle" ignoreplacement="true"/>
</view>

<basefloatingpanel panelid="settings" width="auto" height="auto" padding="4">
  <method name="getFirstFocusableDescendant">
    return gridsizex;
  </method>
  
  <spacedlayout axis="y" spacing="4" updateparent="true"/>
  
  <view height="auto">
    <spacedlayout spacing="4" updateparent="true"></spacedlayout>
    <editor_text text="grid x:" y="2"/>
    <editor_inputtext id="gridsizex" width="26" allowedchars="0123456789" maxlength="3" text="0"/>
    <editor_text text="y:" y="2"/>
    <editor_inputtext id="gridsizey" width="26" allowedchars="0123456789" maxlength="3" text="0"/>
  </view>
  
  <view height="auto">
    <spacedlayout spacing="4" updateparent="true"></spacedlayout>
    <editor_text text="snap to guides:" y="2"/>
    <view with="checkbutton" id="snaptoguides" border="1" selectcolor="#aaa" bordercolor="#eee" width="20" height="20"
      selected="true"
    />
  </view>
</basefloatingpanel>

<colorpicker panelid="colorpicker"/>