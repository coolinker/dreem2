<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->
<node>
  <!-- Important: add required classes to the previewable mixin since the
       previewer clients will also need access to the components. -->
  <method name="initNode" args="parent, attrs">
    this.super();
    
    // Views
    this._addComponent({
      label:'image',
      iconname:'bitmap',
      dropclass:'view',
      dropclassattrs:{width:50, height:50, bgcolor:'#cccccc', instanceattrs:{class:'bitmap', width:50, height:50}}
    });
    
    this._addComponent({
      label:'text',
      iconname:'text',
      dropclass:'text',
      dropclassattrs:{text:'text', instanceattrs:{class:'text', text:'text', multiline:true}}
    });
    
    this._addComponent({
      label:'rectange',
      iconname:'view',
      dropclass:'view',
      dropclassattrs:{width:50, height:50, bgcolor:'#cccccc', instanceattrs:{class:'view', width:50, height:50, bgcolor:'#cccccc'}}
    });
    
    this._addComponent({
      label:'vertical line',
      iconname:'verticalline',
      dropclass:'view',
      dropclassattrs:{width:1, height:'50', bgcolor:'#000000', instanceattrs:{class:'view', width:1, height:'100%', y:'top', bgcolor:'#000000'}}
    });
    
    this._addComponent({
      label:'horizontal line',
      iconname:'horizontalline',
      dropclass:'view',
      dropclassattrs:{width:'50', height:1, bgcolor:'#000000', instanceattrs:{class:'view', width:'100%', x:'left', height:1, bgcolor:'#000000'}}
    });
    
    // Layouts
    this._addLayout('spacedlayout_x', {label:'x layout'}, {class:'spacedlayout', axis:'x'}, true);
    this._addLayout('spacedlayout_y', {label:'y layout'}, {class:'spacedlayout', axis:'y'});
    this._addLayout('wrappinglayout_x', {label:'wrap-x layout'}, {class:'wrappinglayout', axis:'x'});
    this._addLayout('wrappinglayout_y', {label:'wrap-y layout'}, {class:'wrappinglayout', axis:'y'});
    this._addLayout('resizelayout_x', {label:'resize-x layout'}, {class:'resizelayout', axis:'x'});
    this._addLayout('resizelayout_y', {label:'resize-y layout'}, {class:'resizelayout', axis:'y'});
    this._addLayout('alignlayout_x', {label:'align-x layout'}, {class:'alignlayout', align:'center', axis:'x'});
    this._addLayout('alignlayout_y', {label:'align-y layout'}, {class:'alignlayout', align:'middle', axis:'y'});
    //this._addLayout('variablelayout', {label:'variable layout'}, {class:'variablelayout'});
    //this._addLayout('constantlayout', {label:'constant layout'}, {class:'constantlayout'});
    
    // Animators
    this._addComponent({
      label:'animator',
      iconname:'animator',
      dropclass:'bitmap',
      dropclassattrs:{width:'30', height:30, isanimation:true, src:config.img_root + 'animator.png', instanceattrs:{class:'animator'}}
    }, true);
    
    this._addComponent({
      label:'animator group',
      iconname:'animgroup',
      dropclass:'bitmap',
      dropclassattrs:{width:'30', height:30, isanimation:true, src:config.img_root + 'animgroup.png', instanceattrs:{class:'animgroup'}}
    });
    
    // Behaviors
    this._addBehavior('scale', true);
    this._addBehavior('shift');
    this._addBehavior('overborder');
    
    // Misc
    this._addComponent({
      isrootonly:true,
      label:'dataset',
      iconname:'dataset',
      dropclass:'bitmap',
      dropclassattrs:{width:'30', height:30, src:config.img_root + 'dataset.png', instanceattrs:{class:'dataset'}}
    }, true);
    
    this._addComponent({
      label:'replicator',
      iconname:'replicator',
      dropclass:'bitmap',
      dropclassattrs:{width:'30', height:30, isreplicator:true, src:config.img_root + 'replicator.png', instanceattrs:{class:'replicator', classname:'view'}}
    });
  </method>

  <!-- @private -->
  <method name="_addLayout" args="key, attrs, instanceAttrs, isNewLine">
    attrs.dropclass = 'bitmap';
    attrs.iconname = key;
    
    instanceAttrs.locked = true;
    
    attrs.dropclassattrs = {
      width:30, 
      height:30, 
      islayout:true, 
      src:config.img_root + key + '.png', 
      instanceattrs:instanceAttrs
    };
    
    this._addComponent(attrs, isNewLine);
  </method>

  <!-- @private -->
  <method name="_addBehavior" args="key, isNewLine">
    var attrs = {
      dropclass: 'bitmap',
      label:key + ' Behavior',
      iconname:'behavior_' + key,
      dropclassattrs:{width:30, height:30, isbehavior:true, src:config.img_root + 'behavior_' + key + '.png', instanceattrs:{class:'behavior-' + key}}
    };
    
    this._addComponent(attrs, isNewLine);
  </method>
  
  <!-- @private -->
  <method name="_addComponent" args="attrs, isNewLine">
    attrs.class = 'componentsource';
    if (isNewLine) attrs.layouthint = '{"break":true}';
    this.parent.createChild(attrs);
  </method>
</node>