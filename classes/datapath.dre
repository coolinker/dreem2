<!-- The MIT License (MIT)

Copyright ( c ) 2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
  <!--/**
     * @class dr.datapath {Data}
     * @extends dr.node
     * Handles replication and data binding.
     *
     * Sometimes it's necessary to have complete control and flexibility over filtering and transforming results. Adding a [@] operator to the end of your datapath causes {@link #filterfunction filterfunction} to be called for each result. This example shows bike colors for bikes with a price greater than 20, in reverse order:
     *
     *     @example
     *     <dataset name="bikeshop">
     *      {
     *        "bicycle": [
     *          {
     *           "color": "red",
     *           "price": 19.95
     *          },
     *          {
     *           "color": "green",
     *           "price": 29.95
     *          },
     *          {
     *           "color": "blue",
     *           "price": 59.95
     *          }
     *        ]
     *      }
     *     </dataset>
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <replicator classname="text" datapath="$bikeshop/bicycle[*][@]">
     *       <method name="filterfunction" args="obj, accum">
     *         // add the color to the beginning of the results if the price is greater than 20
     *         if (obj.price > 20)
     *           accum.unshift(obj.color);
     *         return accum
     *       </method>
     *     </replicator>
     *
     * See [https://github.com/flitbit/json-path](https://github.com/flitbit/json-path) for more details.
     */-->
    <class name="datapath" type="coffee" extends="node" scriptincludes="lib/json-path+json-ptr-0.1.3.min.js">
      <!--/**
        * @attribute {Array} data
        * The results of the path expression exaluated
        */-->
      <attribute name="data" value="[]" type="expression"></attribute>
      <!--/**
        * @attribute {String} path
        * The datapath expression to be replicated.
        * See [https://github.com/flitbit/json-path](https://github.com/flitbit/json-path) for details.
        */-->
      <setter name="path" args="path">
        return unless path
        orig = path
        # console.log('evaluating path', path)
        re = /^\$([^\/]+)/
        match = path.match(re)
        if match and match[1]
          # found absolute path, look for a dataset
          @setAttribute('_dataset', match[1])
          # remove dataset declaration from the path
          path = path.replace(re, '')

        @setAndFire('path', path)


        @parsedpath = JsonPath.parseSelector(path)
        # console.log('evaluated datapath', datapath, @parsedpath)
        return orig
      </setter>

      <!-- TODO: why can't this attribute/setter be named _dataset? -->
<!--       TODO: attribute value is overwritten by "" later!!!
      <attribute name="_dataset" value="" type="string"></attribute> -->
      <setter name="_dataset" args="dataset">
        return dataset unless dataset and dr.datasets?[dataset]
        @dataset = dr.datasets[dataset]
        @_dataset = dataset

        # console.log('listening to dataset', dataset, dr.datasets, @dataset, @_dataset)
        @listenTo(@dataset, 'data', (data) =>
          # console.log('callback', @, data)
          @data = data
          @applyData()
        )
        @sendEvent('dataset', @dataset)
        return dataset
      </setter>

      <!-- TODO: make this a relative datapath -->
      <!--/**
        * @attribute {String} [sortfield=""]
        * The field in the data to use for sorting. Only sort then this
        */-->
      <attribute name="sortfield" value="" type="string"></attribute>

      <!--/**
        * @attribute {Boolean} [sortasc=true]
        * If true, sort ascending.
        */-->
      <attribute name="sortasc" value="true" type="boolean"></attribute>

      <!--/**
        * @attribute {String} [filterexpression=""]
        * If defined, data will be filtered against a [regular expression](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).
        */-->
      <attribute name="filterexpression" value="" type="string"></attribute>

      <setter name="filterexpression" args="regex">
        _filterexpression = new RegExp(regex)
        # console.log('filtering on', regex, _filterexpression)
        @_filterexpressionfunc = (value) ->
          return (value + '').match(_filterexpression) if (value)
        @doReplication()
        return regex
      </setter>

      <handler event="onsortfield">
        # console.log 'onsortfield', @sortfield, @data
        @buildsortfunc()
        @applyData()
      </handler>

      <handler event="onsortasc">
        # console.log 'onsortasc', @sortasc, @data
        @buildsortfunc()
        @applyData()
      </handler>

      <method name="buildsortfunc">
        if @sortfield
          sortfield = @sortfield
          sortasc = @sortasc
          @sortfunc = (a, b) ->
            keyA = a[sortfield]
            keyB = b[sortfield]
            # Compare the 2 sort fields
            result = 0
            if keyA > keyB
              result = 1
            else if keyA < keyB
              result = -1

            # console.log sortfield, sortasc
            result = -result if (not sortasc)
            result
        else
          @sortfunc = null
      </method>

      <handler event="oninit">
        @setAttribute('_dataset', @_dataset) unless @dataset
        @applyData();
      </handler>

      <handler event="onpath" method="applyData"></handler>

      <handler event="ondestroy">
        @data = @_dataset = null
      </handler>

      <method name="updateData" args="data">
        # remove dataset declaration
        re = /^\$([^\/]+)/
        # Apply the data back to the dataset
        @dataset.updateData(@datapath.replace(re, ''), data);
      </method>

      <!--/**
        * @method refresh
        * Refreshes the results manually
        */-->
      <method name="refresh">
        this.applyData()
      </method>

      <!--/**
        * @method filterfunction
        * @abstract
        * Called to filter data.
        * @param obj An individual item to be processed.
        * @param {Object[]} accum The array of items that have been accumulated. To keep a processed item, it must be added to the accum array.
        * @returns {Object[]} The accum array. Must be returned otherwise results will be lost.
        */-->
      <method name="applyData">
        return unless @inited and @parent
        # console.log('applyData', @data, @classname, @parent, @children, @, @inited)

        if @datapath
          if @_dataset
            # absolute datapath
            # console.log 'evaluating absolute datapath', @datapath, @_dataset
            unless @dataset
              console.warn 'missing dataset', @_dataset
              return

            if @datapath == '$' + @_dataset
              # console.log('dataset only', @datapath, @dataset)
              # return an instance with data attribute set to the dataset
              # this allows relative datapath children to find this dataset
              @data = [@dataset]
            else
              # found dataset
              # console.log('evaluating absolute selector', @datapath, @dataset.data, @parsedpath)
              @data = JsonPath.executeSelectors(@dataset.data, @parsedpath, @filterfunction?.bind(@))
          else
            # relative datapath, look for dataset reference in parents
            parentdata = @_findInParents('data')
            if parentdata?
              # console.log 'found dataset in parent ', parentdata
              if parentdata.$tagname is 'dataset' and parentdata.data
                # console.log 'found parentdata.data', parentdata
                parentdata = parentdata.data
              # console.log('executing relative selector', @datapath, @parsedpath, parentdata)
              @data = JsonPath.executeSelectors(parentdata, @parsedpath, @filterfunction?.bind(@))
              # console.log('looking for data', @datapath, parentdata, data)
            else
              console.warn('No parent datapath found', @datapath, @)
        else
          # no datapath
          filterfunction = @filterfunction
          if filterfunction? and @data?
            filterfunction = filterfunction.bind(@)
            accum = []
            for datum in @data
              accum = filterfunction(datum, accum)
            @data = accum

        return unless @data

        @_origdata = @data
        return unless @data and @parent

        if @filterexpression and @_filterexpressionfunc
          @data = @_origdata.filter(@_filterexpressionfunc)
          # console.log('_filterexpressionfunc', @_filterexpressionfunc, @data, @_origdata)

        @data.sort(@sortfunc) if (@sortfunc)
        @sendEvent('data', @data) if @data.length
      </method>
    </class>