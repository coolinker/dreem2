<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->

<class name="colorpicker" extends="basefloatingpanel" scriptincludes="/lib/colorpicker.min.js"
  height="auto" width="auto"
>
  <method name="initNode" args="parent, attrs">
    this.colorTable = {"aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff", "beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887", "cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff", "darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f", "darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkturquoise":"#00ced1", "darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dodgerblue":"#1e90ff", "firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff", "gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","gray":"#808080","green":"#008000","greenyellow":"#adff2f", "honeydew":"#f0fff0","hotpink":"#ff69b4", "indianred ":"#cd5c5c","indigo":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c", "lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2", "lightgrey":"#d3d3d3","lightgreen":"#90ee90","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightsteelblue":"#b0c4de", "lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6", "magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370d8","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee", "mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5", "navajowhite":"#ffdead","navy":"#000080", "oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6", "palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#d87093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080", "red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1", "saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4", "tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0", "violet":"#ee82ee", "wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5", "yellow":"#ffff00","yellowgreen":"#9acd32"};
    this.super();
  </method>

  <attribute name="redcolor" type="Number" value="-1"/>
  <setter name="redcolor" args="red">
    if (red > -1) {
      return red
    }
  </setter>
  <handler event="onredcolor" method="setControlsToColorValues"/>

  <attribute name="greencolor" type="Number" value="-1"/>
  <setter name="greencolor" args="green">
    if (green > -1) {
      return green
    }
  </setter>
  <handler event="ongreencolor" method="setControlsToColorValues"/>

  <attribute name="bluecolor" type="Number" value="-1"/>
  <setter name="bluecolor" args="blue">
    if (blue > -1) {
      return blue
    }
  </setter>
  <handler event="onbluecolor" method="setControlsToColorValues"/>

  <attribute name="alphacolor" type="Number" value="-1"/>
  <setter name="alphacolor" args="alpha">
    var a = parseFloat(alpha)
    if (a > -1) {
      return parseFloat(a.toFixed(2))
    }
  </setter>
  <handler event="onalphacolor" method="setControlsToColorValues"/>

  <method name="hexColor">
    var r = this.redcolor.toString(16);
    if (r.length == 1) {
      r = '0' + r;
    }
    var g = this.greencolor.toString(16);
    if (g.length == 1) {
      g = '0' + g;
    }
    var b = this.bluecolor.toString(16);
    if (b.length == 1) {
      b = '0' + b;
    }

    return '#' + r + g + b;
  </method>

  <method name="rgbaColor">
    var r = this.redcolor;
    if (isNaN(r)) {
      r = 0
    }
    var g = this.greencolor;
    if (isNaN(g)) {
      g = 0
    }
    var b = this.bluecolor;
    if (isNaN(b)) {
      b = 0
    }
    var a = this.alphacolor;
    if (isNaN(a)) {
      a = 1.0
    }
    a = a.toFixed(2)

    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  </method>

  <method name="resetColor">
    this.setAttribute('color', this.rgbaColor())
  </method>

  <method name="setControlsToColorValues">
    if (!this.owner) {
      return;
    }
    var rgba = this.rgbaColor();
    var rgbhex = this.hexColor();

    var r = this.redcolor;
    if (isNaN(r)) {
      r = 0
    }
    var g = this.greencolor;
    if (isNaN(g)) {
      g = 0
    }
    var b = this.bluecolor;
    if (isNaN(b)) {
      b = 0
    }
    var a = this.alphacolor;
    if (isNaN(a)) {
      a = 1.0
    }

    if (this.colorpicker) {
      this.colorpicker.setHex(rgbhex);
    }

    if (this.alphapicker) {
      this.alphapicker.setAttribute('value', a * this.alphapicker.maxvalue);
      this.alphapicker.setAttribute('progresscolor', rgba);
    }

    this.colorvalues.red.setAttribute('value',r);
    this.colorvalues.green.setAttribute('value', g);
    this.colorvalues.blue.setAttribute('value', b);
    this.colorvalues.alpha.setAttribute('value', a.toFixed(2));

    if (this.owner) {
      if (a >= 1) {
        this.owner.setAttribute('value', rgbhex)
      } else {
        this.owner.setAttribute('value', rgba)
      }
    }

  </method>

  <attribute name="color" type="color" value="red"/>
  <setter name="color" args="color">
    if (color == this.color) {
      return;
    }

    var lookup = this.colorTable[color]
    if (lookup) {
      color = lookup
    }

    //parses #RRGGBB, #RRGGBBAA, rgb(R,G,B), and rgba(R,G,B,A)
    var regex = /(?:\#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?|rgba?\(\s*([\d\.]+)\s*,\s*([\d\.]+)\s*,\s*([\d\.]+)\s*(?:,\s*([\d\.]+)\s*)?\))/i
    var match = regex.exec(color)

    if (match) {
      var red, green, blue, alpha;

      if (match[1]) {
        red = parseInt(match[1], 16)
      } else if (match[5]) {
        red = parseFloat(match[5])
      }

      if (match[2]) {
        green = parseInt(match[2], 16)
      } else if (match[6]) {
        green = parseFloat(match[6])
      }

      if (match[3]) {
        blue = parseInt(match[3], 16)
      } else if (match[7]) {
        blue = parseFloat(match[7])
      }

      if (match[4]) {
        alpha = parseInt(match[4], 16)
      } else if (match[8]) {
        alpha = parseFloat(match[8])
      }

      if (isNaN(alpha)) {
        alpha = this.alphacolor;
      }
      if (isNaN(alpha)) {
        alpha = 1.0;
      }

      // this probably color using values between 0 ~ 1.0, need to convert to 0-255
      if (1.0 >= red && 1.0 >= blue && 1.0 >= green) {
        red   = red * 255
        green = green * 255
        blue  = blue * 255
      }

      if (alpha > 1.0) {
        alpha = alpha / 255
      }

      red = Math.floor(red)
      green = Math.floor(green)
      blue = Math.floor(blue)
      alpha = parseFloat(alpha.toFixed(2))

      this.setAttribute('redcolor', red)
      this.setAttribute('greencolor', green)
      this.setAttribute('bluecolor', blue)
      this.setAttribute('alphacolor', alpha)
    }
  </setter>

  <handler event="onvisible" args="visible">
    if (visible) {
      if (!this.colorpicker) {
        var _this = this;
        this.colorpicker = ColorPicker(
          this.colorpanel.slider.sprite.platformObject,
          this.colorpanel.colors.sprite.platformObject,
          function(hex, hsv, rgb) {
            if (hex !== _this.color) {
              _this.setAttribute('color', hex);
            }
        });
        this.colorpanel.colors.sprite.platformObject.$view = this.colorpanel.slider.sprite.platformObject.$view = this;
      }
    }
  </handler>

  <spacedlayout axis="y" updateparent="true"/>
  <view name="colorpanel" height="auto" width="auto">
    <spacedlayout axis="x" updateparent="true"/>
    <view width="200" height="200" name="colors" clickable="true"/>
    <view width="30" height="200" name="slider" clickable="true"/>
  </view>
  <slider name="alphapicker"
    bgcolor="#999999"
    bordercolor="transparent"
    selectcolor="transparent"
    progresscolor="${this.parent.color}"
    width="${this.parent.colorpanel.width}"
    maxvalue="100"
    height="20">
    <setter name="value" args="v">
      v = Math.round(v);
      if (v > this.maxvalue) {
        v = this.maxvalue;
      }
      if (v < 0) {
        v = 0;
      }

      var av = v / this.maxvalue;
      av = parseFloat(av.toFixed(2))

      if (this.classroot.alphacolor != av) {
        this.classroot.setAttribute('alphacolor', av);
      }

      return v;
    </setter>
  </slider>
  <view name="colorvalues" height="auto" width="auto">
    <spacedlayout axis="x" updateparent="true"/>
    <text text="R" fontsize="14"></text>
    <inputtext name="red" width="40" fontsize="14">
      <setter name="value" args="v">
        var r = parseInt(v);
        if (!isNaN(r) && this.classroot.redcolor != r) {
          this.classroot.setAttribute('redcolor', r)
        }
        return v;
      </setter>
    </inputtext>
    <text text="G" fontsize="14"></text>
    <inputtext name="green" width="40" fontsize="14">
      <setter name="value" args="v">
        var g = parseInt(v);
        if (!isNaN(g) && this.classroot.greencolor != g) {
          this.classroot.setAttribute('greencolor', g)
        }
        return v;
      </setter>
    </inputtext>
    <text text="B" fontsize="14"></text>
    <inputtext name="blue" width="40" fontsize="14">
      <setter name="value" args="v">
        var b = parseInt(v);
        if (!isNaN(b) && this.classroot.bluecolor != b) {
          this.classroot.setAttribute('bluecolor', b)
        }
        return v;
      </setter>
    </inputtext>
    <text text="A" fontsize="14"></text>
    <inputtext name="alpha" width="40" fontsize="14">
      <setter name="value" args="v">
        var a = parseFloat(v);
        if (!isNaN(a)) {
          a = parseFloat(a.toFixed(2));
          if (a != this.classroot.alphacolor) {
            this.classroot.setAttribute('alphacolor', a)
          }
        }
        return v;
      </setter>

    </inputtext>
  </view>
  <view name="pots" height="auto" width="auto">
    <spacedlayout axis="x" updateparent="true"/>
  </view>
</class>