<!--
Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->
<node id="editormodel">
  <!--// Attributes /////////////////////////////////////////////////////////-->
  <!-- @private
       Flag that indicates if changes to a replicated view have 
       occurred or not. -->
  <attribute name="_replicatorchanges" value="false" type="boolean"/>

  <attribute name="screenname" type="string" value="default"/>


  <!--// Handlers ///////////////////////////////////////////////////////////-->
  <handler name="_showReplicationWarning" event="on_replicatorchanges">
    if (this.inited && preview.visible !== true) {
      messages.addMessage('Changes to replicated classes may require a save or preview to show changes accurately.');
    }
  </handler>

  <handler event="ondelayedselectedview" args="selected" reference="selectionmanager">
    // selection was lost and we have changes that would require a save
    if (this._replicatorchanges && selected) this._showReplicationWarning();
  </handler>


  <!--// Life Cycle /////////////////////////////////////////////////////////-->
  <method name="initNode" args="parent, attrs">
    this.super();
    
    // Extract screen from the query and store it.
    var screenname = 'default',
      query = this._getSearch();
    if (query) {
      query = (query.substring(1)).split('&');
      var i = query.length, entry;
      while (i) {
        entry = query[--i].split('=');
        if (entry[0] === 'screen') {
          screenname = entry[1];
          break;
        }
      }
    }
    this.setAttribute('screenname', screenname);
    
    // Fetch the composition model from the server since that is what we will
    // be editing.
    var self = this;
    dr.global.requestor.fetch(this._getPath() + '?raw=1').success(
      function(data, status) {
        var parser = new dr.htmlparser();
        
        var model = parser.parse(data);
        self.setAttribute('model', model);
        
        // Store screenmodel for future use
        var curScreenName = self.screenname,
          i,
          screensModel = self._findChildByTag('screens', model);
        if (screensModel) {
          var children = screensModel.child, childModel;
          i = children.length;
          while (i) {
            childModel = children[--i]
            if (childModel.tag === 'screen' && childModel.attr.name === curScreenName) {
              self.setAttribute('screenmodel', childModel);
              break;
            }
          }
        }
        
        self.sendEvent('onmodelchange', self);
        
        // Update screenname chooser
        var cfg = [], screennames = self.getScreenNames(), screenname;
        i = screennames.length;
        while (i) {
          screenname = screennames[--i];
          cfg.unshift({attrs:{name:screenname, text:screenname, disabled:screenname === curScreenName}});
        }
        var screennameChooser = dr.sprite.retrieveGlobal('screennamechooser');
        screennameChooser.setAttribute('itemconfig', cfg);
        screennameChooser.setAttribute('label', 'current screen: ' + curScreenName);
        
        // Refresh previewer clients
        // Send the current state of the composition to the server so the previewer clients will refresh
        if (model) {
          var baseUrl = self._getBaseUrl(),
            url = baseUrl + (baseUrl.indexOf('?') === -1) ? '?' : '&';
          url += 'edit=1&notifyPreviewers=1';
          dr.global.requestor.send(url, JSON.stringify(model));
        }
      }
    );
  </method>


  <!--// Methods ////////////////////////////////////////////////////////////-->
  <!-- @private -->
  <method name="_setLocation" args="url">
    window.location = url;
  </method>

  <!-- @private -->
  <method name="_getPath">
    var pathname = window.location.pathname;
    
    // WORKAROUND: PhantomJS prepends an extra '/' character. This prevents
    // the requestors from working correctly, so look for it and remove it.
    return (pathname.startsWith('//') && dr.sprite.platform.browser === 'PhantomJS') ? pathname.substring(1) : pathname;
  </method>

  <!-- @private -->
  <method name="_getSearch">
    return window.location.search;
  </method>

  <!-- @private -->
  <method name="_getBaseUrl">
    return this._getPath() + this._getSearch();
  </method>

  <method name="getPreviewerUrl">
    return '/preview' + this._getPath();
  </method>

  <method name="updateAttr" args="childView, name, value">
    var model = this.model;
    if (model) {
      // Update class if the childView is replicated
      if (childView.__replicator) {
        var classModel = this._findClassInModel(childView.__replicator.classname, model);
        if (classModel) {
          classModel.attr[name] = value;
          this.setAttribute('_replicatorchanges', true);
          this.sendEvent('onmodelchange', this);
        }
      } else {
        // If we're inside a class that's being replicated prompt to save when done editing
        if (childView._isInReplicator()) this.setAttribute('_replicatorchanges', true);
        
        // TODO: this could fail for replicated instances that don't have editor 
        // IDs, or subnodes of replicated classes with repeated IDs
        var childModel = this._findChildById(this._getId(childView), model);
        if (childModel) {
          if (value == null) {
            delete childModel.attr[name];
          } else {
            childModel.attr[name] = value;
          }
          if (['name', 'title', 'tag', 'text'].indexOf(name) >= 0) {
            this.sendEvent('onmodelchange', this);
          }
        }
      }
    }
  </method>

  <method name="deleteNode" args="childView, oldParentView">
    var model = this.model;
    if (model) {
      var childModel;
      
      if (oldParentView) {
        childModel = this._findChildById(childView.id, model);
        
        if (oldParentView.__replicator) {
          // special case for new instance in root of class tag
          var classModel = this._findClassInModel(oldParentView.__replicator.classname, model);
          if (childView && classModel) {
            var idx = this._findChildIndex(classModel, childModel);
            if (idx >= 0) {
              // Store the model on the now orphaned view
              childView.__editorModel = classModel.child[idx];
              
              // Remove the view's model from the composition model
              classModel.child.splice(idx, 1);
              
              this.sendEvent('onmodelchange', this);
            }
          }
        } else {
          var parentModel = this._findChildById(this._getId(oldParentView), model);
          if (childModel && parentModel) {
            var idx = this._findChildIndex(parentModel, childModel);
            if (idx >= 0) {
              // Store the model on the now orphaned view
              childView.__editorModel = parentModel.child[idx];
              
              // Remove the view's model from the composition model
              parentModel.child.splice(idx, 1);
              
              this.sendEvent('onmodelchange', this);
            }
          }
        }
      } else {
        // Dataset deletion happens here since they are root nodes
        
        // Find the parent model of the dataset model
        childModel = this._findChildById(childView.id, model, true);
        if (childModel) {
          var parentModel = childModel[0];
          childModel = childModel[1];
          
          var idx = this._findChildIndex(parentModel, childModel);
          
          // Store the model on the now orphaned view
          childView.__editorModel = parentModel.child[idx];
          
          // Remove the view's model from the composition model
          parentModel.child.splice(idx, 1);
          
          this.sendEvent('onmodelchange', this);
        }
      }
    }
  </method>

  <method name="createNode" args="childView">
    var model = this.model;
    if (model) {
      var parentView = childView.parent;
      if (parentView) {
        if (parentView.__replicator) {
          // special case for new instance in root of class tag
          var classModel = this._findClassInModel(parentView.__replicator.classname, model);
          if (childView && classModel) {
            if (!classModel.child) classModel.child = [];
            classModel.child.push(this._objectify(childView));
            this.setAttribute('_replicatorchanges', true);
            this.sendEvent('onmodelchange', this);
          }
        } else {
          var parentModel = this._findChildById(this._getId(parentView), model);
          if (childView && parentModel) {
            if (!parentModel.child) parentModel.child = [];
            
            if (childView.isA(dr.View)) {
              var prevSiblingView = childView.getPrevSiblingView(),
                prevSiblingModel = prevSiblingView ? this._findChildById(prevSiblingView.id, model) : null,
                idx = prevSiblingModel ? this._findChildIndex(parentModel, prevSiblingModel) : -1;
              
              // Convert childView (and tree) to object structure and insert
              parentModel.child.splice(idx + 1, 0, this._objectify(childView));
              this.sendEvent('onmodelchange', this);
            } else {
              parentModel.child.push(this._objectify(childView));
              this.sendEvent('onmodelchange', this);
            }
          }
        }
      } else {
        // Dataset creation happens here since they are root nodes
        var parentModel = this.screenmodel;
        if (childView && parentModel) {
          if (!parentModel.child) parentModel.child = [];
          parentModel.child.push(this._objectify(childView));
          this.sendEvent('onmodelchange', this);
        }
      }
    }
  </method>

  <!-- @private -->
  <method name="_objectify" args="childView">
    return childView.__editorModel || childView.objectify({});
  </method>

  <method name="moveNode" args="childView, oldParentView">
    var model = this.model;
    if (model) {
      var childModel = this._findChildById(childView.id, model),
        oldParentModel = this._findChildById(this._getId(oldParentView), model);
      if (childModel && oldParentModel) {
        var idx = this._findChildIndex(oldParentModel, childModel);
        if (idx >= 0) {
          oldParentModel.child.splice(idx, 1);
          
          var newParentModel = this._findChildById(this._getId(childView.parent), model);
          if (newParentModel) {
            if (!newParentModel.child) newParentModel.child = [];
            
            if (childView.isA(dr.View)) {
              var prevSiblingView = childView.getPrevSiblingView(),
                prevSiblingModel = prevSiblingView ? this._findChildById(prevSiblingView.id, model) : null,
                newIdx = prevSiblingModel ? this._findChildIndex(newParentModel, prevSiblingModel) : -1;
              newParentModel.child.splice(newIdx + 1, 0, childModel);
            } else {
              newParentModel.child.push(childModel);
            }
          }
          this.sendEvent('onmodelchange', this);
        }
      }
    }
  </method>

  <method name="moveInFrontOf" args="childView, siblingView">
    var model = this.model;
    if (model) {
      var childModel = this._findChildById(childView.id, model),
        siblingModel = this._findChildById(siblingView.id, model),
        parentModel = this._findChildById(this._getId(childView.parent), model);
      if (childModel && siblingModel && parentModel) {
        // Remove child
        var idx = this._findChildIndex(parentModel, childModel);
        if (idx >= 0) parentModel.child.splice(idx, 1);
        
        // Insert child
        idx = this._findChildIndex(parentModel, siblingModel);
        if (idx >= 0) parentModel.child.splice(idx + 1, 0, childModel);
        this.sendEvent('onmodelchange', this);
      }
    }
  </method>

  <method name="moveToBack" args="childView">
    var model = this.model;
    if (model) {
      var childModel = this._findChildById(childView.id, model),
        parentModel = this._findChildById(this._getId(childView.parent), model);
      if (childModel && parentModel) {
        var idx = this._findChildIndex(parentModel, childModel);
        if (idx > 0) {
          parentModel.child.splice(idx, 1);
          
          // HACK: if the parent is the root then the first child must continue
          // to be the editor include tag.
          var searchChildModel;
          for (var i = 0, len = parentModel.child.length; len > i; i++) {
            searchChildModel = parentModel.child[i];
            if (searchChildModel.tag !== 'include') {
              parentModel.child.splice(i, 0, childModel);
              break;
            }
          }
          this.sendEvent('onmodelchange', this);
        }
      }
    }
  </method>

  <method name="getModelNode" args="childView">
    return this._findChildById(this._getId(childView), this.model);
  </method>

  <method name="generateModelId">
    var id = 'lzeditor_client_' + dr.generateGuid();
    while (dr.sprite.retrieveGlobal(id)) id = 'lzeditor_client_' + dr.generateGuid();
    return id;
  </method>

  <!-- @private -->
  <method name="_getId" args="childView">
    return childView.id || childView.getRoot().id;
  </method>

  <!-- @private -->
  <method name="_findClassInModel" args="classname, model">
    var children = model.child, i = children.length, childModel;
    while (i) {
      childModel = children[--i]
      if (childModel.tag === 'class' && childModel.attr.name === classname) {
        return childModel;
      } else if (childModel.child) {
        var newChildModel = this._findClassInModel(classname, childModel);
        if (newChildModel) return newChildModel;
      }
    }
  </method>

  <!-- @private -->
  <method name="_findChildIndex" args="parentModel, childModel">
    var children = parentModel.child;
    if (children) {
      var i = children.length,
        searchId = childModel.attr.id,
        searchChildModel;
      while (i) {
        searchChildModel = children[--i];
        if (searchChildModel.attr && searchChildModel.attr.id === searchId) return i;
      }
    } else {
      return -1;
    }
  </method>

  <!-- @private -->
  <method name="_findChildById" args="id, model, returnParent">
    if (id) {
      var children = model.child, i = children.length, childModel;
      while (i) {
        childModel = children[--i]
        if (childModel.attr && childModel.attr.id === id) {
          return returnParent ? [model, childModel] : childModel;
        } else if (childModel.child) {
          var newChildModel = this._findChildById(id, childModel, returnParent);
          if (newChildModel) return newChildModel;
        }
      }
    }
  </method>

  <!-- @private -->
  <method name="_findChildByTag" args="tagname, model">
    var children = model.child, i = children.length, childModel;
    while (i) {
      childModel = children[--i]
      if (childModel.tag === tagname) {
        return childModel;
      } else if (childModel.child) {
        var newChildModel = this._findChildByTag(tagname, childModel);
        if (newChildModel) return newChildModel;
      }
    }
  </method>

  <!-- Save the model changes to the server and reload for editing again. -->
  <method name="save">
    var baseUrl = this._getBaseUrl(),
      url = baseUrl + (baseUrl.indexOf('?') === -1) ? '?' : '&';
    url += 'edit=1';
    
    var self = this;
    dr.global.requestor.send(url, JSON.stringify(this.model)).success(function(data, status) {
      self._setLocation(baseUrl);
    });
  </method>

  <!-- End the editing process. -->
  <method name="stop">
    var baseUrl = this._getBaseUrl(),
      url = baseUrl + (baseUrl.indexOf('?') === -1) ? '?' : '&';
    url += 'edit=1&stripeditor=1';
    
    var self = this;
    dr.global.requestor.fetch(url).success(function(data, status) {
      if (window.parent !== window) { // Only do this when embedded in the flowgraph
        console.log("POSTING CLOSE WINDOW")
        window.parent.postMessage({type:'closewindow'}, '*');
      }
      self._setLocation(baseUrl);
    });
  </method>

  <!-- Start editing another screen. -->
  <method name="changeScreen" args="screenname">
    this._setLocation(this._getPath() + '?edit=1&screen=' + screenname);
  </method>

  <method name="getScreenNames">
    var retval = [], screensModel = this._findChildByTag('screens', this.model);
    if (screensModel) {
      var children = screensModel.child, childModel, i = children.length;
      while (i) {
        childModel = children[--i]
        if (childModel.tag === 'screen') retval.push(childModel.attr.name);
      }
    }
    return retval;
  </method>

  <!-- Used by preview.dre to get the model to instantiate. -->
  <method name="getPkg">
    var compositionNode = this._findChildByTag('composition', this.model);
    
    // Copy it
    compositionNode = JSON.parse(JSON.stringify(compositionNode));
    
    // Clean composition node
    var depth = 0;
    function cleanComposition(jsobj) {
      depth++;
      
      var children = jsobj.child;
      if (children) {
        var child, i = children.length, attrs;
        while (i) {
          child = children[--i];
          
          attrs = child.attr;
          if (attrs) {
            if (depth === 4 && attrs.placement === 'editor') delete attrs.placement;
            
            var mixins = attrs.with;
            if (mixins) {
              var newMixins = [];
              mixins.split(define.SEPARATOR_REGEX).forEach(
                function(mixinName) {
                  if (mixinName !== 'editable' && mixinName !== 'editableanimator') newMixins.push(mixinName);
                }
              );
              attrs.with = newMixins.join(',');
            }
          }
          
          if (child.tag === 'include') {
            children.splice(i, 1);
          } else {
            cleanComposition(child);
          }
        }
      }
      
      depth--;
    };
    cleanComposition(compositionNode);
    
    return {
      composition:compositionNode,
      classmap:dr.classmap,
      teem:dr.teem
    };
  </method>
</node>