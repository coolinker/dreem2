<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Undo/Redo Compound'>
    <include href="./includes/boilerplate.dre"></include>
    
    <expectedoutput>Invalid redo in compoundundoable.</expectedoutput>
    <expectedoutput>Invalid undo in compoundundoable.</expectedoutput>
    
    <editor-undostack id="undo"></editor-undostack>
    
    <view width="100%" height="100%">
      <view name="foo" width="50" height="50" bgcolor="red"></view>
      
      <handler event="oninit">
        var foo = this.foo;
        var undo = dr.sprite.retrieveGlobal('undo');
        
        // Add an undoable
        assert.equal(foo.width, 50, 'Verify original width of foo view.');
        var compound = new dr.editor.compoundundoable();
        var undoable1 = new dr.editor.attrundoable({target:foo, attribute:'width', newvalue:100});
        var undoable2 = new dr.editor.attrundoable({target:foo, attribute:'height', newvalue:75});
        compound.add(undoable1).add(undoable2);
        
        assert.isFalse(compound.done);
        assert.isFalse(undoable1.done);
        assert.isFalse(undoable2.done);
        assert.equal(foo.width, 50, 'Verify width of foo view has not changed yet.');
        assert.equal(foo.height, 50, 'Verify height of foo view has not changed yet.');
        
        assert.isTrue(undo.do(compound), 'The do method returns a boolean true if it succeeds.');
        assert.equal(foo.width, 100, 'Now that the undoable has been done foo should be updated.');
        assert.equal(foo.height, 75, 'Now that the undoable has been done foo should be updated.');
        assert.isTrue(compound.done);
        assert.isTrue(undoable1.done);
        assert.isTrue(undoable2.done);
        
        // Undo it
        assert.isTrue(undo.undo());
        assert.equal(foo.width, 50, 'Verify width of foo view has not changed yet.');
        assert.equal(foo.height, 50, 'Verify height of foo view has not changed yet.');
        assert.isFalse(compound.done);
        assert.isFalse(undoable1.done);
        assert.isFalse(undoable2.done);
        
        // Redo it
        assert.isTrue(undo.redo());
        assert.equal(foo.width, 100, 'Now that the undoable has been done foo should be updated.');
        assert.equal(foo.height, 75, 'Now that the undoable has been done foo should be updated.');
        assert.isTrue(compound.done);
        assert.isTrue(undoable1.done);
        assert.isTrue(undoable2.done);
        
        undo.reset();
        
        assert.isTrue(compound.destroyed);
        assert.isTrue(undoable1.destroyed);
        assert.isTrue(undoable2.destroyed);
        
        
        // Verify execution order of sub-undoables
        var compound2 = new dr.editor.compoundundoable();
        var compound3 = new dr.editor.compoundundoable();
        
        var undoable3 = new dr.editor.attrundoable({target:foo, attribute:'width', newvalue:100});
        var undoable4 = new dr.editor.attrundoable({target:foo, attribute:'width', newvalue:200});
        var undoable5 = new dr.editor.attrundoable({target:foo, attribute:'width', newvalue:100});
        var undoable6 = new dr.editor.attrundoable({target:foo, attribute:'width', newvalue:200});
        
        compound2.add(undoable3).add(undoable4);
        compound3.add(undoable6).add(undoable5); // Opposite order
        
        foo.setAttribute('width', 50); // Reset width
        assert.equal(foo.width, 50);
        
        undo.do(compound2);
        assert.equal(foo.width, 200);
        
        undo.undo();
        assert.equal(foo.width, 50);
        
        undo.redo();
        assert.equal(foo.width, 200);
        
        undo.reset();
        foo.setAttribute('width', 50); // Reset width
        assert.equal(foo.width, 50);
        
        undo.do(compound3);
        assert.equal(foo.width, 100);
        
        undo.undo();
        assert.equal(foo.width, 50);
        
        undo.redo();
        assert.equal(foo.width, 100);
        
        
        // Verify there is protection against cyclic calls in undo/redo
        undo.reset();
        
        var compound4 = new dr.editor.compoundundoable();
        var compound5 = new dr.editor.compoundundoable();
        
        compound4.add(compound5);
        compound5.add(compound4);
        
        assert.isFalse(undo.do(compound4));
        assert.isFalse(undo.canUndo());
        assert.isFalse(undo.canRedo());
        
        compound5.destroy();
        
        assert.isTrue(compound4.destroyed);
        assert.isTrue(compound5.destroyed);
      </handler>
    </view>
  </screen>
</screens>
</composition>