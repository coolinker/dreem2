<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Dataset'>
    <include href="./includes/boilerplate.dre"></include>
    
    <view>
      <!-- Verify that a warning occurs when no name is provided. -->
      <expectedoutput>No name provided to dataset.</expectedoutput>
      <dataset>
        <handler event="oninit">
          assert.isUndefined(this.data);
          assert.isUndefined(this.name);
        </handler>
      </dataset>
      
      <!-- Verify that a dataset with no initial data has undefined data.
           Also checks that the dataset gets stored in dr.dataset.datasets. -->
      <dataset name="empty">
        <handler event="oninit">
          var dataset = dr.dataset.datasets.empty
          assert.equal(dataset, this);
          assert.equal(dataset.name, 'empty', 'Dataset should be addressible by name.');
          assert.isUndefined(dataset.data);
        </handler>
      </dataset>
      
      <!-- Verify that data can be provided as text content. -->
      <dataset name="example">
        {
          "store": {
            "book": [
              {
                "category": "reference",
                "author": "Nigel Rees",
                "title": "Sayings of the Century",
                "price": 8.95
              },
              {
                "category": "fiction",
                "author": "Evelyn Waugh",
                "title": "Sword of Honour",
                "price": 12.99
              },
              {
                "category": "fiction",
                "author": "Herman Melville",
                "title": "Moby Dick",
                "isbn": "0-553-21311-3",
                "price": 8.99
              },
              {
                "category": "fiction",
                "author": "J. R. R. Tolkien",
                "title": "The Lord of the Rings",
                "isbn": "0-395-19395-8",
                "price": 22.99
              }
            ],
            "bicycle": {
              "color": "red",
              "price": 19.95
            }
          }
        }
        <handler event="oninit">
          var dataset = dr.dataset.datasets.example
          assert.equal(dataset, this);
          assert.equal(dataset.name, 'example', 'Dataset should be addressible by name.');
          var json = JSON.stringify(dataset.data)
          assert.equal(json.length, 466, 'Serialized JSON should be a specific size.');
        </handler>
      </dataset>
      
      <!-- Verify direct data assignment. Also check that data deeply equals
           what was provided. -->
      <dataset name="example2" data='{"foo":5,"bar":false,"baz":"hey"}'>
        <handler event="oninit">
          assert.deepEqual(this.data, {"foo":5,"bar":false,"baz":"hey"});
        </handler>
      </dataset>
      
      <!-- Verify direct data assignment using a constraint. Also verifies
           that we can change the data and name afterwards. -->
      <expectedoutput>Clobbering existing dataset named: "empty".</expectedoutput>
      <expectedoutput>No name provided to dataset.</expectedoutput>
      <attribute name="examplevalue" type="expression" value='{"foo":5,"bar":false,"baz":"hey"}'></attribute>
      <dataset name="example3" data="${this.parent.examplevalue}">
        <handler event="oninit">
          assert.deepEqual(this.data, {"foo":5,"bar":false,"baz":"hey"});
          
          // Change data
          this.setAttribute('data', [5,3,9]);
          assert.deepEqual(this.data, [5,3,9]);
          
          // Change name to a new valid value
          assert.equal(dr.dataset.datasets.example3, this);
          assert.equal(this.name, 'example3');
          
          this.setAttribute('name', 'different');
          assert.isUndefined(dr.dataset.datasets.example3);
          assert.equal(dr.dataset.datasets.different, this);
          assert.equal(this.name, 'different');
          
          // Change name to a value that is already in use
          this.setAttribute('name', 'empty');
          assert.equal(dr.dataset.datasets.empty, this);
          assert.equal(this.name, 'empty');
          
          // Change name to '' will not be stored in datasets, nor will old
          // clobbered dataset be restored
          this.setAttribute('name', '');
          assert.isUndefined(dr.dataset.datasets.empty);
          assert.equal(this.name, '');
        </handler>
      </dataset>
      
      <dataset name="remotedata" url="/data/top_movies.json">
        <handler event="ondata" args="data">
          assert.equal('searchResponse' in data, true, 'Data should be loaded')
        </handler>
      </dataset>

      <!-- Verify the stored datasets. This indirectly verifies
           that the unnamed dataset at the beginning of this test was not
           stored. -->
      <handler event="oninit">
        assert.sameMembers(Object.keys(dr.dataset.datasets), ['example', 'example2', 'remotedata']);
      </handler>
    </view>
  </screen>
</screens>
</composition>