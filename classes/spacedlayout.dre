<!-- The MIT License (see LICENSE)
     Copyright (C) 2014-2015 Teem2 LLC -->
<!--/**
      * @class dr.spacedlayout {Layout}
      * @extends dr.variablelayout
      * An extension of variableLayout that positions views horizontally or
      * vertically using an initial inset and spacing between each view. If
      * updateparent is true an outset is also used to leave space after
      * the last subview.
      *
      * Each view managed by a spaced layout supports two layout hints.
      *     spacingbefore {Number} Indicates custom spacing to use before the
      *         view. This value overrides spacing for the view it is defined
      *         on. If spacingafter was used on the previous view this will
      *         override that. Ignored for the first view layed out.
      *     spacingafter {Number} Indicates custom spacing to use after the
      *         view. This value overrides spacing for the view it is defined
      *         on. Ignord on the last view layed out.
      *
      * This spacedlayout will position the first view at a y of 5 and each
      * subsequent view will be 2 pixels below the bottom of the preceding one.
      * Since updateparent is true and an outset is defined the parent view
      * will be sized to 5 pixels more than the bottom of the last view. A
      * layout hint has been used on the fourth view so that it will have
      * 10 pixels of space before it and 5 pixels of space after it instead
      * of the spacing of 2 defined on the layout.
      *
      *     @example
      *     <spacedlayout axis="y" spacing="2" inset="5" outset="5" updateparent="true">
      *     </spacedlayout>
      *
      *     <view width="100" height="25" bgcolor="lightpink"></view>
      *     <view width="100" height="35" bgcolor="plum"></view>
      *     <view width="100" height="15" bgcolor="lightblue"></view>
      *     <view width="100" height="35" bgcolor="plum" layouthint='{"spacingbefore":10, "spacingafter":5}'></view>
      *     <view width="100" height="15" bgcolor="lightblue"></view>
      */-->
<class name="spacedlayout" extends="variablelayout" type="coffee">
  <method name="initNode" args="parent, attrs">
    # Use whichever attribute or aliased attribute is not the default and
    # delete the unnecessary initial value.
    if attrs.value isnt '0' and attrs.inset is '0'
      attrs.inset = attrs.value
    delete attrs.value
    
    if attrs.attribute isnt 'x' and attrs.axis is 'x'
      attrs.axis = attrs.attribute
    delete attrs.attribute
    
    @super()
  </method>
  
  <!--/**
    * @attribute {Number} [spacing=0]
    * The spacing between views.
    */-->
  <attribute name="spacing" type="number" value="0"></attribute>
  <handler event="onspacing" method="update"></handler>
  
  <!--/**
    * @attribute {Number} [outset=0]
    * Space after the last view. Only used when updateparent is true.
    */-->
  <attribute name="outset" type="number" value="0"></attribute>
  <handler event="onoutset" method="update"></handler>
  
  <!--/**
    * @attribute {Number} [inset=0]
    * Space before the first view. This is an alias for the "value" attribute.
    * attribute.
    */-->
  <attribute name="inset" type="number" value="0"></attribute>
  <setter name="inset" args="inset">
    # An alias for value.
    @setActual('inset', inset, 'number', 0)
    @setAttribute('value', @inset)
  </setter>
  
  <!--/**
    * @attribute {String} [axis='x']
    * The orientation of the layout. Supported values are 'x' and 'y'.
    * A value of 'x' will orient the views horizontally and a value of 'y'
    * will orient them vertically. This is an alias for the "attribute" 
    * attribute.
    */-->
  <attribute name="axis" type="string" value="x"></attribute>
  <setter name="axis" args="axis">
    # An alias for attribute.
    @setActual('axis', axis, 'string', 'x')
    @setAttribute('attribute', @axis)
  </setter>
  
  <!--/**
    * @attribute attribute
    * @private
    * The axis attribute is an alias for this attribute.
    */-->
  <setter name="attribute" args="attribute">
    if @attribute isnt attribute
      # Stop monitoring since the "axis" changed. This needs to
      # be done before the new "axis" value is set since stopMonitoringSubview
      # needs to know the old values.
      @stopMonitoringAllSubviews()
      
      # Setup private attributes based on axis
      if attribute is 'y'
        # The layout is oriented vertically
        @__parentAttrName = 'height'        # The attr to update on the parent if updateparent is true
        @__innerAttrName = 'innerheight'    # The attr used to get available space
        @__measureAttrName = 'boundsheight' # The attr to measure the size needed for a subview
        @__diffAttrName = 'boundsydiff'     # The attr used to offset the position of a transformed subview so it will not overlap adjacent views
      else
        # The layout is oriented horizontally
        @__parentAttrName = 'width'
        @__innerAttrName = 'innerwidth'
        @__measureAttrName = 'boundswidth'
        @__diffAttrName = 'boundsxdiff'
      
      @setActual('attribute', attribute, 'string')
      
      if @inited
        # Start monitoring again and update since we have a new axis. This needs
        # to be done after the new axis value is set since startMonitoringSubview
        # needs to use the new values.
        @startMonitoringAllSubviews()
        @update()
      else
        @__redoMonitoring = true
  </setter>
  
  <handler event="oninit">
    if @__redoMonitoring
      @stopMonitoringAllSubviews()
      @startMonitoringAllSubviews()
  </handler>
  
  <method name="startMonitoringSubview" args="view">
    @super()
    
    # Monitor each subview's measure and bounds offset
    @listenTo(view, 'on' + @__measureAttrName, 'update')
    @listenTo(view, 'on' + @__diffAttrName, 'update')
    @listenTo(view, 'onlayouthint', 'update')
  </method>
  
  <method name="stopMonitoringSubview" args="view">
    @super()
    
    # No longer monitor each subview's measure and bounds offset
    @stopListening(view, 'on' + @__measureAttrName, 'update')
    @stopListening(view, 'on' + @__diffAttrName, 'update')
    @stopListening(view, 'onlayouthint', 'update')
  </method>
  
  <method name="updateSubview" args="count, view, attribute, value">
    # Determine hint based spacing
    if count > 1
      before = view.getLayoutHint(@name, 'spacingbefore')
      unless isNaN before
        value += before - @__spacingAfter
    
    # Position the view at the provided value and compensate for 
    # any transformation position difference
    @__positionView(view, attribute, view[@__diffAttrName] + value)
    
    # Use spacingafter hint if defined instead of spacing
    @__spacingAfter = view.getLayoutHint(@name, 'spacingafter')
    if isNaN @__spacingAfter then @__spacingAfter = @spacing
    
    # The next view should be positioned after this view plus the spacing.
    return value + view[@__measureAttrName] + @__spacingAfter
  </method>
  
  <method name="updateParent" args="attribute, value, count">
    # Resize the parent to the last returned value from updateLayout plus
    # the outset less spacing since updateSubview added an extra spacing.
    # Also allow for the difference between innersize and size due to border 
    # and padding.
    parent = @parent
    if count is 0
      @__positionView(parent, @__parentAttrName, parent[@__parentAttrName] - parent[@__innerAttrName])
    else
      @__positionView(parent, @__parentAttrName, value + @outset - @__spacingAfter + parent[@__parentAttrName] - parent[@__innerAttrName])
  </method>
  
  <!--// Editor //-->
  <method name="__getLayoutDomains">
    retval = {}
    retval[@axis] = true
    return retval
  </method>
  <method name="__getLayoutParentDomains">
    retval = {}
    retval[@__parentAttrName] = true
    return retval
  </method>
  
  <attribute name="hiddenattrs" type="expression" value="{attribute:true, value:true}" allocation="class"/>
  <attribute name="readonlyattrs" type="expression" value="{axis:true}" allocation="class"/>
  <attribute name="attrimportance" type="expression" value="{name:-1}" allocation="class"/>
</class>
