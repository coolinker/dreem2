<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->

<!--/**
      * @class dr.datainspector {UI Components, Data}
      * @extends dr.view
      * The datainspector extracts the underlying structure from a JSON document
      * and displays it as a visual tree.  The structure tree can be manipulated
      * to extract x-paths and rename structure elements.
      *
      *     @example
      *
      *     <datainspector width="500" height="500" data="${this.people.data}">
      *       <dataset name='people'>
      *         [
      *           { "firstName":"John",  "lastName":"Upton", "address":{ "street":"123 Fake Street", "city":"Chicago", "state":"TN" } },
      *           { "firstName":"Sally", "lastName":"Upton", "address":{ "street":"123 Fake Street", "city":"Chicago", "state":"TN" } },
      *           { "firstName":"Jane",  "lastName":"Doe",   "address":{ "street":"123 Real Street", "city":"Paris",   "state":"FR" } }
      *         ]
      *       </dataset>
      *     </datainspector>
      *
      */-->

<class name="datainspector" extends="view">

  <!--/**
  * @attribute {Object} data
  * The data to extract structure from.
  */-->
  <attribute name="data" type="expression" value="undefined"></attribute>

  <!--/**
  * @attribute {Object} structure
  * The structure tree extracted from the data attribute.
  *
  */-->
  <attribute name="structure" type="expression" value="undefined"></attribute>


  <!--/**
  * @method inspect
  * Inspects an object and returns it's structure.
  *
  * The returned structure object contains a `__type`, which can be a simple type, which is one of
  * `u` (undefined), `s` (string), 'i' (number), 'b' (boolean).  Or it can be one of two complex types,
  * for arrays and objects.
  *
  * Array `__type` names begin with `[` and contain an alphabetized, comma seperated list of it's inner types,
  * followed by a closing `]`.  For example, an array of numbers and strings would become `[i,s]`
  *
  * Object `__type` names begin with `{` and contain sorted `key:type` pairs on all it's properties, ending with `}`.
  * For example, an object with a string `name` field and a number `age` field would become `{age:n,name:s}`
  *
  * `__type` names can be arbitrarily nested, for example `[{address:{city:s,state:s,street:s},name:{first:s,last:s}}]`
  *
  * Array structures will have a number of additional properties, one for each type of object that it contains.
  * Each of these objects will have a `__count` attribute indicating how many of that tpe the array contains.
  *
  * Object structures will have a number of additional properties, one for each of the named properties of the original
  * structure.  The value of these proprties will be an object containing the `__type` structure of the property.
  *
  * Note, objects structures with more than one type for the same property will be considered different objects, even if
  * thier property type structure otherwise matches.
  *
  */-->
  <method name="inspect" args="obj">

    var memo = {
      __type: 'u'
    }

    if (typeof(obj) == 'undefined' || obj == null) {
      return memo;
    }

    var t, i, j, types = [];
    if (Array.isArray(obj)) {
      var idx = 0;
      for (i = 0;i < obj.length; i++) {
        var item = obj[i];
        t = this.inspect(item);
        if (memo[t.__type]) {
          memo[t.__type].__count++;
        } else {
          t.__count = 1;
          memo[t.__type] = t;
          types.push(t.__type)
        }
      }

      memo.__type = '[' + types.sort().join(',') + ']';
    } else if (typeof(obj) === 'object') {

      var keys = Object.keys(obj).sort();
      for (i=0; i < keys.length; i++) {
        var k = keys[i];
        var v = obj[k];
        if (!k.startsWith('__')) {
          t = this.inspect(v);

          memo[k] = t;
          types.push(k + ":" + t.__type)
        } else {
          memo[k] = v;
        }
      }

      memo.__type = '{' + types.sort().join(',') + '}';
    } else if (typeof(obj) === 'string') {
      memo.__type = 's';
    } else if (typeof(obj) === 'number') {
      memo.__type = 'i';
    } else if (typeof(obj) === 'boolean') {
      memo.__type = 'b';
    }

    if (obj.__type) {
      memo.__type = obj.__type;
    }

    return memo;

  </method>

  <handler event="ondata" args="data">
     this.setAttribute('structure', this.inspect(data));
  </handler>

  <handler event="onstructure" args="structure">
    function buildItems(parent) {
      var items = [];

      var keys = Object.keys(parent).sort();
      for (var i=0; i < keys.length; i++) {
        var k = keys[i];
        if (!k.startsWith('__')) {
          var v = parent[k];

          var label = k;
          if (v.__typename) {
            label = v.__typename;
          }
          if (v.__type[0] == '[') {
            label = '[' + label + ']'
          } else if (v.__type[0] == '{') {
            if (label[0] != '{') {
              label = '{' + label + '}'
            }
          } else if (parent.__type[0] == '[') {
            label = ' &lt;' + label + '&gt;'
          } else {
            label = label + ' &lt;' + v.__type[0] + '&gt;'
          }

          if (v.__count) {
            label = label + ' (' + v.__count + ')'
          }

          items.push({ label:label, items:buildItems(v) })
        }
      }

      return items;

    }

    var root = {label: '', items: buildItems(structure) }

    this.tree.setAttribute('data', root)

  </handler>

  <spacedlayout axis="y"></spacedlayout>

  <tree name="tree" height="${this.parent.height}" width="${this.parent.width}"></tree>


</class>
