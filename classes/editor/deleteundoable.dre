<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->


<!--/**
  * @class dr.editor.deleteundoable {UI Components}
  * @extends dr.editor.undoable
  * An undoable that removes a node from its parent node.
  */-->
<class name="editor-deleteundoable" extends="editor-undoable"
  undodescription='Undo delete.'
  redodescription='Redo delete.'
>
  <!--// LIFE CYCLE /////////////////////////////////////////////////////////-->
  <!--/**
    * @method destroy
    * @overrides
    */-->
  <method name="destroy" args="parent, attrs">
    if (this.isdone) this.target.destroy();
    this.super();
  </method>


  <!--// ATTRIBUTES /////////////////////////////////////////////////////////-->
  <!--/**
    * @attribute {dr.AccessorSupport} [target]
    * The node/view to remove.
    */-->
  <attribute name="target" type="expression" value=""/>


  <!--// METHODS ////////////////////////////////////////////////////////////-->
  <!--/**
    * @method undo
    * @overrides
    * Reinserts the target.
    */-->
  <method name="undo" args="callback">
    if (this.done) {
      var target = this.target;
      if (target) {
        target.setAttribute('parent', this._targetParent);
        if (target.isA(dr.View)) {
          if (this._targetWasVisible === true) target.setAttribute('visible', true);
          if (this._prevSibling) {
            target.moveInFrontOf(this._prevSibling);
          } else {
            target.moveToBack();
          }
        }
        target.resumeConstraints();
        return this.super();
      } else {
        dr.global.error.notifyWarn('invalidUndo', "No target provided to deleteundoable.");
      }
    } else {
      dr.global.error.notifyWarn('invalidUndo', "Invalid undo in deleteundoable.");
    }
    return this;
  </method>

  <!--/**
    * @method redo
    * @overrides
    * Removes the target from its parent.
    */-->
  <method name="redo" args="callback">
    if (this.done) {
      dr.global.error.notifyWarn('invalidRedo', "Invalid redo in deleteundoable.");
    } else {
      var target = this.target;
      if (target) {
        this._targetParent = target.parent;
        if (target.isA(dr.View)) {
          this._targetWasVisible = target.visible;
          this._prevSibling = target.getPrevSiblingView();
          target.setAttribute('visible', false);
        }
        target.setAttribute('parent', null);
        target.pauseConstraints();
        return this.super();
      } else {
        dr.global.error.notifyWarn('invalidRedo', "No target provided to deleteundoable.");
      }
    }
    return this;
  </method>

  <!--/**
    * @method serialize
    * @overrides
    */-->
  <method name="serialize" args="obj">
    if (!obj) obj = {};
    
    // Use IDs for node/view references since we just want to retrieve the 
    // objects from the composition during deserialization not 
    // serialize/deserialize entire view/node objects.
    obj.target = this.target.id || null;
    
    return this.super(obj);
  </method>

  <!--/**
    * @method deserialize
    * @overrides
    */-->
  <method name="deserialize" args="data">
    // Retrieve objects via the serialized IDs. Also, note that unlike
    // createundoable, previewinfo is not necessary since we begin by
    // deleting an existing node/view and thus never need to create anything
    // from scratch.
    data.target = dr.editor.undoable.retrieveById(data.target);
    
    if (!data.target) {
      dr.global.error.notifyWarn('deserialization', "Target could not be found for deleteundoable: " + data.target);
      return null;
    }
    
    return this.super(data);
  </method>
</class>
