<composition>
<server name='mysvr'>
  <handler name='init'>
    teem.setInterval(function(){
     // console.log('whee')
      //teem.screens.browser.dosomething()

    },100)
  </handler>
</server>
<screens>
  
  <screen type="browser" name="default" title='Whoo'>
    <method name="foo" args="bar">
      console.log('foo was called.');
    </method>
    <view name="root_instance" width="100%" height="100%" minwidth="1000" bgcolor="#cc99cc" scrollable="true">
      <handler event="onscroll" args="scroll">
        console.log('onscroll', scroll);
      </handler>
      
      <!--// Class Definitions //-->
      <class name="item" with="button" extends="view" height="15" width="100" bgcolor="#ff0000">
        <attribute name="thing" type="number" value="20"></attribute>
        <handler event="onactivated" args="activated" type="coffee">
          @count ?= 0
          @count++
          switch @count
            when 1
              @setAttribute('width', 2 * @width)
              @setAttribute('height', 2 * @height) 
            when 2
              @setAttribute('width', @width / 2) 			  
              @setAttribute('height', @height / 2)
            when 3
              @destroy()
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item class', width);
          this.callSuper(width);
          this.foo();
        </setter>
	
        <method name="foo" args="bar">
          console.log('METHOD:foo', this.width);
        </method>
      </class>
      
      <class name="item2" extends="item" height="20" width="40" bgcolor="#0000ff"></class>
      
      <class name="foo" height="20" width="40" bgcolor="#0000cc">
        <view name="a" with="bar" x="1" y="1" width="20" height="20" bgcolor="#669933">
          <view name="aa" x="12" y="1" width="5" height="5" bgcolor="#ffffcc"></view>
        </view>
        <view name="b" x="25" y="1" width="20" height="20" bgcolor="#996633"></view>
      </class>
      
      <class name="subfoo" extends="foo">
        <view name="c" x="1" y="25" width="10" height="10" bgcolor="#ff0000"></view>
      </class>
      
      <mixin name="baz" opacity="0.5"></mixin>
      
      <mixin name="bar" with="baz">
        <view name="m1" x="1" y="1" width="10" height="10" bgcolor="#ff0000"></view>
      </mixin>
      
      <!--// Instances //-->

      <view with="bar" name="view_instance" x="10" y="20" width="100" height="500" bgcolor="#ff9999">
        <constantlayout attr="x" value="10"></constantlayout>
        <spacedlayout axis="y" spacing="2" inset="20"></spacedlayout>
        
        <view name="v1" placement="m1" width="5" height="5" bgcolor="#ffffff"></view>
        
        <view name="v2" width="25" height="25" bgcolor="#aaaaaa"></view>
        <view name="v3" width="25" height="25" bgcolor="#bbbbbb"></view>
        <view name="v4" width="25" height="25" bgcolor="#cccccc"></view>
        <view name="v5" width="25" height="25" bgcolor="#dddddd"></view>
        <view name="v6" width="25" height="25" bgcolor="#eeeeee"></view>
      </view>
      
      <subfoo id="bar" name="subfoo_instance" x="200" width="100" height="40">
        <view name="d" x="50" y="5" width="10" height="10" bgcolor="#9933cc"></view>
      </subfoo>
      
    <!--  <item2 name="item2_instance" y="200" x="${this.y / 10 + foo.width + foo.x}" bgcolor="green"></item2>-->
      
      <item name="item_instance" y="250" id="foo" bgcolor="orange">
        <attribute name="thing" type="number" value="5"></attribute>
        <attribute name="another" type="string" value="hello"></attribute>
        <attribute name="again" type="boolean" value="true"></attribute>
        
        <handler event="onactivated" args="activated">
          console.log('HANDLER:activated', activated, this.thing, this.another, this.again);
        </handler>
        <handler event="onanother" args="another">
          console.log('HANDLER:another', another);
        </handler>
        <handler event="onthing" args="thing">
          console.log('HANDLER:thing', thing);
        </handler>
        <handler event="onthing,onanother  oninit" args="value">
          console.log('MULTI HANDLER', value);
        </handler>
        <handler event="ondestroy" args="value">
          console.log('HANDLER:destroy', value);
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item instance', width, this.inited);
          if (this.inited) {
            this.setAttribute('opacity', this.opacity / 2);
            this.setAttribute('another', 'hi there');
            this.setAttribute('thing', 132);
          }
          this.callSuper(width);
        </setter>
        <animator name="anim_1" attribute="x" to="100" repeat="2" running="true"></animator>
        <animator name="anim_2" attribute="y" to="-25" relative="true" running="true"></animator>
      </item>
      <handler event="onanother" args="another" reference="this.item_instance">
        console.log('HANDLER:another by reference', another);
      </handler>
      <handler event="onthing" args="thing" reference="foo">
        console.log('HANDLER:thing by reference', thing);
      </handler>
      
      <dreem-text name="dreemtext_instance" text="hello there." x="50" y="100" bgcolor="white"></dreem-text>
      <text name="text_instance" x="50" y="150" bgcolor="orange">text as content</text>
      <!--markup x="50" y="120">asdf asdf asdf</markup-->
    </view>
  </screen>

  <screen type="dali" name="dali" title='Whoo'>
    <view name="root_instance" width="100%" height="100%" minwidth="1000" bgcolor="#cc99cc" scrollable="true">
      <handler event="onscroll" args="scroll">
        console.log('onscroll', scroll);
      </handler>
      
      <!--// Class Definitions //-->
      <class name="item" with="button" extends="view" height="15" width="100" bgcolor="#ff0000">
        <attribute name="thing" type="number" value="20"></attribute>
        <handler event="onactivated" args="activated" type="coffee">
          @count ?= 0
          @count++
          switch @count
            when 1
              @setAttribute('width', 2 * @width)
              @setAttribute('height', 2 * @height) 
            when 2
              @setAttribute('width', @width / 2) 			  
              @setAttribute('height', @height / 2)
            when 3
              @destroy()
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item class', width);
          this.callSuper(width);
          this.foo();
        </setter>
	
        <method name="foo" args="bar">
          console.log('METHOD:foo', this.width);
        </method>
      </class>
      
      <class name="item2" extends="item" height="20" width="40" bgcolor="#0000ff"></class>
      
      <class name="foo" height="20" width="40" bgcolor="#0000cc">
        <view name="a" with="bar" x="1" y="1" width="20" height="20" bgcolor="#669933">
          <view name="aa" x="12" y="1" width="5" height="5" bgcolor="#ffffcc"></view>
        </view>
        <view name="b" x="25" y="1" width="20" height="20" bgcolor="#996633"></view>
      </class>
      
      <class name="subfoo" extends="foo">
        <view name="c" x="1" y="25" width="10" height="10" bgcolor="#ff0000"></view>
      </class>
      
      <mixin name="baz" opacity="0.5"></mixin>
      
      <mixin name="bar" with="baz">
        <view name="m1" x="1" y="1" width="10" height="10" bgcolor="#ff0000"></view>
      </mixin>
      
      <!--// Instances //-->
    <!-- <view with="bar" name="view_instance" x="10" y="20" width="100" height="${this.parent.item2_instance.x + 100}" bgcolor="#ff9999">
        <view name="v1" placement="m1" x="1" y="1" width="5" height="5" bgcolor="#ffffff"></view>
      </view>-->
      
      <subfoo id="bar" name="subfoo_instance" x="200" width="100" height="40">
        <view name="d" x="50" y="5" width="10" height="10" bgcolor="#9933cc"></view>
      </subfoo>
      
    <!--  <item2 name="item2_instance" y="200" x="${this.y / 10 + foo.width + foo.x}" bgcolor="green"></item2>-->
      
      <item name="item_instance" y="250" id="foo" bgcolor="orange">
        <attribute name="thing" type="number" value="5"></attribute>
        <attribute name="another" type="string" value="hello"></attribute>
        <attribute name="again" type="boolean" value="true"></attribute>
        
        <handler event="onactivated" args="activated">
          console.log('HANDLER:activated', activated, this.thing, this.another, this.again);
        </handler>
        <handler event="onanother" args="another">
          console.log('HANDLER:another', another);
        </handler>
        <handler event="onthing" args="thing">
          console.log('HANDLER:thing', thing);
        </handler>
        <handler event="onthing,onanother  oninit" args="value">
          console.log('MULTI HANDLER', value);
        </handler>
        <handler event="ondestroy" args="value">
          console.log('HANDLER:destroy', value);
        </handler>
        <setter name="width" args="width">
          console.log('SETTER:width on item instance', width, this.inited);
          if (this.inited) {
            this.setAttribute('opacity', this.opacity / 2);
            this.setAttribute('another', 'hi there');
            this.setAttribute('thing', 132);
          }
          this.callSuper(width);
        </setter>
        <animator name="anim_1" attribute="x" to="100" repeat="2" running="true"></animator>
        <animator name="anim_2" attribute="y" to="-25" relative="true" running="true"></animator>
      </item>
      <handler event="onanother" args="another" reference="this.item_instance">
        console.log('HANDLER:another by reference', another);
      </handler>
      <handler event="onthing" args="thing" reference="foo">
        console.log('HANDLER:thing by reference', thing);
      </handler>
      
      <dreem-text name="dreemtext_instance" text="hello there." x="50" y="100" bgcolor="white"></dreem-text>
      <text name="text_instance" x="50" y="150" bgcolor="orange">text as content</text>
      <!--markup x="50" y="120">asdf asdf asdf</markup-->
    </view>
  </screen>

  </screens>
</composition>