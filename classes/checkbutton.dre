<!--  Copyright 2015 Teem2 LLC. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 either express or implied. See the License for the specific language governing permissions and limitations under the License.  -->



<!--/**
   * @class dr.checkbutton {UI Components}
   * @extends dr.buttonbase
   * Button class consisting of text and a visual element to show the
   * current state of the component. The state of the
   * button changes each time the button is clicked. The select property
   * holds the current state of the button. The onselected event
   * is generated when the button is the selected state.
   *
   *     @example
   *     <spacedlayout axis="y"></spacedlayout>
   *
   *     <checkbutton text="pink" selectcolor="pink"></checkbutton>
   *     <checkbutton text="blue" selectcolor="lightblue"></checkbutton>
   *     <checkbutton text="green" selectcolor="lightgreen"></checkbutton>
   *
   * Here we listen for the onselected event on a checkbox and print the value that is passed to the handler.
   *
   *     @example
   *     <spacedlayout axis="y"></spacedlayout>
   *
   *     <checkbutton text="green" selectcolor="lightgreen">
   *       <handler event="onselected" args="value">
   *         displayselected.setAttribute('text', value);
   *       </handler>
   *     </checkbutton>
   *
   *     <view>
   *       <spacedlayout></spacedlayout>
   *       <text text="Selected:"></text>
   *       <text id="displayselected"></text>
   *     </view>
   *
   */-->
<class name="checkbutton" type="coffee" extends="buttonbase" defaultcolor="transparent">
  <!-- check_x, check_y: Location of check box with button -->
  <!-- check_w, check_h: Size of check box with button -->
  <attribute name="checkx" type="number" value="0"></attribute>
  <attribute name="checky" type="number" value="0"></attribute>
  <attribute name="checkw" type="number" value="0"></attribute>
  <attribute name="checkh" type="number" value="0"></attribute>
  <attribute name="innerspacing" type="number" value="0"></attribute>

  <handler event="onactivated">
    @setAttribute('selected', !@selected);
  </handler>

  <handler event="onismousedown">
    if @selected
      @check.setAttribute('fill', @textcolor)
      @check.setAttribute('bgcolor', @defaultcolor)
      @label.setAttribute('color', @textcolor)
    else
      @check.setAttribute('fill', @selectcolor)
      @check.setAttribute('bgcolor', @selectcolor)
      @label.setAttribute('color', @selectcolor)
  </handler>

  <handler event="oninit">
    # visual is the object that makes a visual change when selected
    @visual = @check

    @handleResize()
    @visualize()
  </handler>

  <method name="visualize">
    @super()

    if @selected
      @check.setAttribute('fill', @selectcolor)
      @label.setAttribute('color', @selectcolor)
    else
      @check.setAttribute('fill', @textcolor)
      @label.setAttribute('color', @textcolor)
  </method>

  <method name="handleResize">
    @super()

    return if @_resize_lock or not @inited
    @_resize_lock = true

    defaultchecksize = 20

    checkx = checky = 0
    textx = texty = 0

    height = @innerheight
    width = @innerwidth

    if !@_fixedheight
      height = Math.max(@label.height, defaultchecksize)

    if !@_fixedwidth
      width = @label.height
      width += @innerspacing + @label.width if @label.visible
      width = Math.max(width, defaultchecksize)

    checkw = width
    checkh = height

    if @label.visible
      checkw = Math.max(checkw - @label.width - @innerspacing, @label.height)
      textx = checkw + @innerspacing
      texty = (height / 2.0) - (@label.height / 2.0)

    checks = Math.min(checkw, checkh)

    checky = (height / 2.0) - (checks / 2.0) if checky == 0
    checky = Math.max(checky, 0)
    checky = Math.min(checky, height - checks)

    checkx = (width / 2.0) - (checks / 2.0) if checkx ==0 && @_fixedwidth && !@label.visible
    checkx = Math.max(checkx, 0)
    checkx = Math.min(checkx, width - checks)

    settings = {checkx: checkx, checky: checky, checkw: checks, checkh: checks, textx: textx, texty: texty}

    bpw = @leftborder + @leftpadding + @rightborder + @rightpadding
    bph = @topborder + @toppadding + @bottomborder + @bottompadding

    settings.height = height + bph if !@_fixedheight
    settings.width = width + bpw if !@_fixedwidth

    @setAttributes(settings)

    @_resize_lock = false
  </method>

  <!-- check: Show button state -->
  <indicator name="check" x="${this.parent.checkx}" y="${this.parent.checky}" width="${this.parent.checkw}" height="${this.parent.checkh}"></indicator>
</class>
