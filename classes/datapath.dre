<!-- The MIT License (MIT)

Copyright ( c ) 2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
  <!--/**
     * @class dr.datapath {Data}
     * @extends dr.node
     * Handles replication and data binding.
     *
     * Sometimes it's necessary to have complete control and flexibility over filtering and transforming results. Adding a [@] operator to the end of your datapath causes {@link #filterfunction filterfunction} to be called for each result. This example shows bike colors for bikes with a price greater than 20, in reverse order:
     *
     *     @example
     *     <dataset name="bikeshop">
     *      {
     *        "bicycle": [
     *          {
     *           "color": "red",
     *           "price": 19.95
     *          },
     *          {
     *           "color": "green",
     *           "price": 29.95
     *          },
     *          {
     *           "color": "blue",
     *           "price": 59.95
     *          }
     *        ]
     *      }
     *     </dataset>
     *     <spacedlayout spacing="5"></spacedlayout>
     *     <datapath datapath="$bikeshop/bicycle[*][@]">
     *       <method name="filterfunction" args="obj, accum">
     *         // add the color to the beginning of the results if the price is greater than 20
     *         if (obj.price > 20)
     *           accum.unshift(obj.color);
     *         return accum
     *       </method>
     *     </datapath>
     *
     * See [https://github.com/flitbit/json-path](https://github.com/flitbit/json-path) for more details.
     */-->
    <class name="datapath" type="coffee" extends="node" scriptincludes="lib/json-path+json-ptr-0.1.3.min.js">
      <!--/**
        * @attribute {Object} data
        * A pointer to the data to be evaluated
        */-->
      <attribute name="data" value="{}" type="expression"></attribute>
      <!--/**
        * @attribute {Array} results
        * The results of the path expression exaluated on data
        */-->
      <attribute name="results" value="[]" type="expression"></attribute>
      <!--/**
        * @attribute {String} path
        * The datapath expression to be replicated.
        * See [https://github.com/flitbit/json-path](https://github.com/flitbit/json-path) for details.
        */-->
      <setter name="path" args="path">
        unless path
          @parsedpath = null
          return path 
        # console.log('evaluating path', path)

        # Find the dataset if this is an absolute path
        newpath = path
        match = path.match(/^\$([^\/]+)/)
        if match and match[1]
          # found absolute path, e.g. $mydataset/, store name for lookup
          @datasetname = match[1]

          # remove dataset declaration from the path
          newpath = path.replace(re, '')
        else
          @datasetname = null

        # store the parsed path (with dataset stripped) for evaluation later
        @parsedpath = JsonPath.parseSelector(newpath)

        # console.log('evaluated datapath', path, @parsedpath)
        return path
      </setter>

      <method name="_findDataset">
        @_datasetupdater ?= (data) =>
          # console.log('callback', @, data)
          @setAttribute('data', data)

        if @dataset
          @stopListening(@dataset, 'ondata', @_datasetupdater)
          @dataset = null

        if @datasetname
          @dataset = dr.dataset.datasets[@datasetname]

          # console.log('listening to dataset', dataset, dr.datasets, @dataset, @_dataset)
          @listenTo(@dataset, 'ondata', @_datasetupdater)
      </method>

      <!-- TODO: make this a relative datapath -->
      <!--/**
        * @attribute {String} [sortfield=""]
        * The field in the data to use for sorting. Only sort then this
        */-->
      <attribute name="sortfield" value="" type="string"></attribute>

      <!--/**
        * @attribute {Boolean} [sortasc=true]
        * If true, sort ascending.
        */-->
      <attribute name="sortasc" value="true" type="boolean"></attribute>

      <!--/**
        * @attribute {String} [filterexpression=""]
        * If defined, data will be filtered against a [regular expression](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).
        */-->
      <attribute name="filterexpression" value="" type="string"></attribute>

      <setter name="filterexpression" args="regex">
        _filterexpression = new RegExp(regex)
        # console.log('filtering on', regex, _filterexpression)
        @_filterexpressionfunc = (value) ->
          return (value + '').match(_filterexpression) if (value)
        @processData()
        return regex
      </setter>

      <handler event="onsortfield">
        # console.log 'onsortfield', @sortfield, @data
        @_buildsortfunc()
        @processData()
      </handler>

      <handler event="onsortasc">
        # console.log 'onsortasc', @sortasc, @data
        @_buildsortfunc()
        @processData()
      </handler>

      <method name="_buildsortfunc">
        if @sortfield
          sortfield = @sortfield
          sortasc = @sortasc
          @sortfunc = (a, b) ->
            keyA = a[sortfield]
            keyB = b[sortfield]
            # Compare the 2 sort fields
            result = 0
            if keyA > keyB
              result = 1
            else if keyA < keyB
              result = -1

            # console.log sortfield, sortasc
            result = -result if (not sortasc)
            result
        else
          @sortfunc = null
      </method>

      <handler event="onpath,ondata,oninit" method="refresh"></handler>

      <method name="updateData" args="data">
        # remove dataset declaration
        re = /^\$([^\/]+)/
        # Apply the data back to the dataset
        @dataset.updateData(@path.replace(re, ''), data);
      </method>

      <!--/**
        * @method refresh
        * Refreshes the results manually
        */-->
      <method name="refresh">
        return unless @inited
        @applyData()
        @processData()
      </method>

      <!--/**
        * @method filterfunction
        * @abstract
        * Called to filter data.
        * @param obj An individual item to be processed.
        * @param {Object[]} accum The array of items that have been accumulated. To keep a processed item, it must be added to the accum array.
        * @returns {Object[]} The accum array. Must be returned otherwise results will be lost.
        */-->

      <method name="applyData">
        return unless @inited
        # console.log('applyData', @data, @classname, @parent, @children, @, @inited)

        _findDataset()

        if @parsedpath
          # found datapath
          if @datasetname
            # absolute datapath, evaluate relative to dataset
            # console.log 'evaluating absolute datapath', @path, @_dataset
            if @path == '$' + @dataset.name
              # console.log('dataset only', @path, @dataset)
              # return an instance with data attribute set to the dataset
              # this allows relative datapath children to find this dataset
              @result = @dataset.data
            else
              # found dataset, evaluate relative to it
              # console.log('evaluating absolute selector', @path, @dataset.data, @parsedpath)
              @result = JsonPath.executeSelectors(@dataset.data, @parsedpath, @filterfunction?.bind(@))
          else
            # relative datapath, look for data in parents
            parentdata = @_findInParents('data')
            if parentdata?
              # console.log('executing relative selector', @path, @parsedpath, parentdata)
              @result = JsonPath.executeSelectors(parentdata, @parsedpath, @filterfunction?.bind(@))
              # console.log('looking for data', @path, parentdata, @result)
            else
              console.warn('No parent data attribute found for', @path, @)
        else
          # no datapath
          filterfunction = @filterfunction
          if filterfunction? and @data?
            filterfunction = filterfunction.bind(@)
            accum = []
            for datum in @data
              accum = filterfunction(datum, accum)
            @result = accum

        @_origresult = @result
      </method>

      <method name="processData">
        return unless @inited and @_origresult

        if @filterexpression and @_filterexpressionfunc
          @result = @_origresult.filter(@_filterexpressionfunc)
          # console.log('_filterexpressionfunc', @_filterexpressionfunc, @data, @result)

        @result.sort(@sortfunc) if (@sortfunc)
        @sendEvent('onresult', @result)
      </method>
    </class>