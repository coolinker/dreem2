<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<composition>
<screens>
  <screen type="browser" name="default" title='Smoke Test - Placement'>
    <include href="./includes/boilerplate.dre"></include>
    
    <node>
      <class name="foo" extends="node" defaultplacement="bar">
        <node name="bar"></node>
        <node name="baz"></node>
        <node name="blob" placement="*"></node>
      </class>
      
      <class name="bar" extends="foo">
        <node name="cn1"></node>
        <node name="cn2" placement="*.blob"></node>
      </class>
      
      <foo name="a">
        <node name="n1"></node>
        <node name="n2" placement="baz"></node>
        <node name="n3" ignoreplacement="true"></node>
      </foo>
      
      <bar name="b">
        <node name="n1"></node>
        <node name="n2" placement="baz"></node>
        <node name="n3" ignoreplacement="true"></node>
      </bar>
      
      <handler event="oninit">
        this.test1();
        this.test2();
        this.test3();
        
        // Declarative tests
        var a = this.a;
        
        assert.equal(a.subnodes.length, 3, "Instance should have three subnodes but instead has: " + a.subnodes.length);
        assert.equal(a.bar.blob.name, 'blob', 'Specific placement still used for children declared in the class.');
        assert.equal(a.bar.name, 'bar', 'No placement used for children declared in the class.');
        assert.equal(a.baz.name, 'baz', 'No placement used for children declared in the class.');
        assert.equal(a.bar.n1.name, 'n1', 'n1 uses default placement so ends up in bar.');
        assert.equal(a.baz.n2.name, 'n2', 'n2 uses specific placement so ends up in baz.');
        assert.equal(a.n3.name, 'n3', 'n3 ignores placement so ends up in the root of the instance.');
        
        var b = this.b;
        
        assert.equal(b.subnodes.length, 4, "Instance should have four subnodes but instead has: " + b.subnodes.length);
        assert.equal(b.bar.blob.name, 'blob', 'Specific placement still used for children declared in the class.');
        assert.equal(b.cn1.name, 'cn1', 'No placement used for children declared in the subclass.');
        assert.equal(b.bar.blob.cn2.name, 'cn2', 'Specific placement used for children declared in the subclass.');
        assert.equal(b.bar.name, 'bar', 'No placement used for children declared in the class.');
        assert.equal(b.baz.name, 'baz', 'No placement used for children declared in the class.');
        assert.equal(b.bar.n1.name, 'n1', 'n1 uses default placement so ends up in bar.');
        assert.equal(b.baz.n2.name, 'n2', 'n2 uses specific placement so ends up in baz.');
        assert.equal(b.n3.name, 'n3', 'n3 ignores placement so ends up in the root of the instance.');
      </handler>
      
      <method name="test1">
        var JS = dr.JS;
        
        // Test some simple default placements. ////////////////////////////////
        var DefaultPlacementTestClass = new JS.Class('DefaultPlacementTestClass', dr.Node, {
          doAfterAdoption: function() {
            new dr.Node(this, {name:'foo'});
            new dr.Node(this, {name:'bar'});
            new dr.Node(this, {name:'baz'});
          }
        });
        
        var n = new DefaultPlacementTestClass();
        
        assert.isObject(n, "New DefaultPlacementTestClass instance exists");
        assert.isUndefined(n.placement, 'Placement is undefined by default.');
        assert.isUndefined(n.defaultplacement, 'Default placement is undefined by default.');
        assert.isUndefined(n.ignoreplacement, 'Ignore placement is undefined by default.');
        
        assert.equal(n.subnodes.length, 3, "Instance should have three subnodes but instead has: " + n.subnodes.length);
        assert.equal(n.foo.name, 'foo', "Child with name 'foo' exists.");
        assert.equal(n.bar.name, 'bar', "Child with name 'bar' exists.");
        assert.equal(n.baz.name, 'baz', "Child with name 'baz' exists.");
        
        new dr.Node(n, {name:'biz'});
        assert.equal(n.biz.name, 'biz', "Child with name 'biz' exists.");
        
        new dr.Node(n, {name:'buz', placement:'bar'});
        assert.equal(n.bar.buz.name, 'buz', "Grandchild with name 'buz' exists.");
        
        // Test that * works the same as empty defaultplacement
        n.set_defaultplacement('*');
        
        assert.equal(n.defaultplacement, '*', "Default placement is now *.");
        
        new dr.Node(n, {name:'bizz'});
        assert.equal(n.bizz.name, 'bizz', "Child with name 'bizz' exists.");
        
        // Specific placement
        var nBuzz = new dr.Node(n, {name:'buzz', placement:'bar'});
        assert.equal(nBuzz.placement, 'bar', "Node has a placement of 'bar'.");
        assert.equal(n.bar.buzz.name, 'buzz', "Grandchild with name 'buzz' exists.");
        
        // IgnorePlacement wins over placement
        var nIgbuzz = new dr.Node(n, {name:'igbuzz', placement:'bar', ignoreplacement:true});
        assert.equal(nIgbuzz.placement, 'bar', "Placement set to 'bar'.");
        assert.isTrue(nIgbuzz.ignoreplacement, "Ignore placement is true.");
        assert.equal(n.igbuzz.name, 'igbuzz', "Child with name 'igbuzz' exists.");
        
        n.destroy();
      </method>
      
      <method name="test2">
        var JS = dr.JS;
        
        // Test various placement options //////////////////////////////////////
        var DefaultPlacementTestClass = new JS.Class('DefaultPlacementTestClass', dr.Node, {
          initNode: function(parent, attrs) {
            attrs.defaultplacement = 'bar';
            this.super(parent, attrs);
          },
          
          doAfterAdoption: function() {
            new dr.Node(this, {name:'foo'}); // No bar will exist yet so 'this' is used.
            new dr.Node(this, {name:'bar'}); // bar now exists but 'this' was used for bar.
            new dr.Node(this, {name:'baz'}); // bar exists so this should get put inside it.
            new dr.Node(this, {name:'biz', ignoreplacement:true}); // biz ignores placement.
            new dr.Node(this, {name:'buz', placement:'bar.baz'}); // Should be placed inside bar.baz
            new dr.Node(this, {name:'def', placement:'*'}); // * means use default placement
          }
        });
        
        var n = new DefaultPlacementTestClass();
        
        assert.isObject(n, "New DefaultPlacementTestClass instance exists");
        assert.equal(n.defaultplacement, 'bar', "Default placement is 'bar'.");
        
        assert.equal(n.subnodes.length, 3, "Instance should have three subnodes but instead has: " + n.subnodes.length);
        assert.equal(n.foo.name, 'foo', "Child with name 'foo' exists.");
        assert.equal(n.bar.name, 'bar', "Child with name 'bar' exists.");
        assert.equal(n.bar.baz.name, 'baz', "Grandchild with name 'baz' exists.");
        assert.equal(n.biz.name, 'biz', "Child with name 'biz' exists.");
        assert.equal(n.bar.baz.buz.name, 'buz', "Great Grandchild with name 'buz' exists.");
        assert.equal(n.bar.def.name, 'def', "Grandchild with name 'def' exists.");
        
        // Make another instance inside the existing one.
        var inner = new DefaultPlacementTestClass(n, {name:'inner'});
        
        assert.equal(n.bar.inner.bar.name, 'bar', "Inner instance has a bar.");
        
        // Verify that updated defaultplacement works. Also tests * placement.
        n.set_defaultplacement('bar.inner.*');
        new dr.Node(n, {name:'deep'});
        
        assert.equal(n.bar.inner.bar.deep.name, 'deep', "Deep node exists.");
        
        // Verify that placement gets evaluated at each class instance
        new dr.Node(n, {name:'deeper', placement:'bar.inner.*.baz'});
        assert.equal(n.bar.inner.bar.baz.deeper.name, 'deeper', "Deeper node exists.");
        
        new dr.Node(n, {name:'deeperAlt', placement:'*.baz'});
        assert.equal(n.bar.inner.bar.baz.deeperAlt.name, 'deeperAlt', "Deeper alt node exists.");
        
        // When too many * are provided it should ignore the extra *s.
        new dr.Node(n, {name:'tooMany', placement:'*.*.*.*.*.*'});
        assert.equal(n.bar.inner.bar.tooMany.name, 'tooMany', "tooMany node exists.");
        
        n.destroy();
      </method>
      
      <method name="test3">
        var JS = dr.JS;
        
        // Test setParent with defaultplacement/placement. /////////////////////
        var DefaultPlacementTestClass = new JS.Class('DefaultPlacementTestClass', dr.Node, {
          initNode: function(parent, attrs) {
              attrs.defaultplacement = 'bar';
              this.super(parent, attrs);
          },
          
          doAfterAdoption: function() {
            new dr.Node(this, {name:'foo'}); // No bar will exist yet so 'this' is used.
            new dr.Node(this, {name:'bar'}); // bar now exists but 'this' was used for bar.
            new dr.Node(this, {name:'baz'}); // bar exists so this should get put inside it.
          }
        });
        
        var n = new DefaultPlacementTestClass();
        
        assert.isObject(n, "New DefaultPlacementTestClass instance exists");
        assert.equal(n.subnodes.length, 2, "Instance should have two subnodes but instead has: " + n.subnodes.length);
        assert.equal(n.foo.name, 'foo', "Child with name 'foo' exists.");
        assert.equal(n.bar.name, 'bar', "Child with name 'bar' exists.");
        assert.equal(n.bar.baz.name, 'baz', "Grandchild with name 'baz' exists.");
        
        var orphan = new dr.Node(null, {name:'orphan'});
        orphan.set_parent(n);
        
        assert.equal(n.bar.orphan.name, 'orphan', "Grandchild with name 'orphan' exists.");
        
        n.destroy();
      </method>
    </node>
  </screen>
</screens>
</composition>