<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<class name="behavioreditor" height="auto" width="100%">
  <method name="initNode" args="parent, attrs">
    this.super();
    
    var data = this.data;
    this.repl.setAttribute('data', data.target.getAttrsListForBehavior(data.behavior));
    this.label.setAttribute('text', data.behavior.__displayName);
    this.checkbutton.syncValue();
  </method>
  
  <method name="getMixinsFromModel">
    var data = this.data, 
      target = data.target,
      mixinValue = editormodel.getAttrValue(target, 'with'),
      mixinMap = {};
    if (mixinValue) mixinValue.split(define.SEPARATOR_REGEX).forEach(function(mixin) {if (mixin) mixinMap[mixin] = mixin;});
    return mixinMap;
  </method>

  <spacedlayout axis="y" spacing="5" outset="5" updateparent="true"/>
  
  <text name="label" leftpadding="27" toppadding="6" bottompadding="6"
    topborder="1" bottomborder="1" bordercolor="${config.secondary_panel_color}"
    bgcolor="#f8f8f8" color="${config.label_text_color}"
    fontsize="10" width="100%"
  />
  
  <view name="checkbutton" with="checkbutton"
    border="1" selectcolor="#aaa" bordercolor="#eee" width="20" height="20"
    x="3" y="3" ignorelayout="true"
  >
    <handler event="onvalue" args="value">
      this.setAttribute('selected', value);
    </handler>
    <handler event="onselected" args="selected">
      if (!this.disabled && !this._isSync) {
        var data = this.classroot.data, 
          behaviorName = data.behavior.__displayName,
          mixinMap = this.classroot.getMixinsFromModel();
        
        if (selected) {
          mixinMap[behaviorName] = behaviorName;
        } else {
          delete mixinMap[behaviorName];
        }
        
        var newvalue = Object.keys(mixinMap).join(',');
        actions.do(new dr.editor.modelattrundoable({
          target:data.target,
          attribute:'with',
          newvalue:newvalue || undefined
        }));
      }
    </handler>
    <method name="syncValue">
      this._isSync = true;
      
      var data = this.classroot.data, 
        behaviorName = data.behavior.__displayName,
        mixinMap = this.classroot.getMixinsFromModel();
      this.setAttribute('value', mixinMap[behaviorName] === behaviorName);
      
      this._isSync = false;
    </method>
  </view>
  
  <replicator name="repl" classname="behaviorattributeeditor"/>
</class>

<class name="behaviorattributeeditor" height="auto" width="100%"
  color="${this.parent.checkbutton.value ? '#000000' : '#999999'}"
>
  <method name="initNode" args="parent, attrs">
    this.super();
    
    var self = this,
      data = this.data,
      name = data.name,
      target = data.target,
      attrs = {
        name:'field',
        x:config.attribute_label_width + 4, // 4 pixel spacing
        target:target, 
        targetattr:name
      };
    
    attrs.class = 'behaviortexteditor';
    
    var child = this.createChild(attrs);
    
    // Text may look like a constraint so call setActualAttribute rather than
    // setAttribute to work around constraint binding.
    child.setActualAttribute('value', target.getAttribute(name));
    
    // update when selected item's value changes
    child.listenTo(target, 'on__cfg_' + name, function(val) {
      this._isSync = true;
      this.setActualAttribute('value', val);
      self._checkActualIsDifferent();
      this._isSync = false;
    });
    
    child.syncTo(this, 'oninnerwidth', function(w) {
      this.setAttribute('width', w - this.x - self.actual.width - 8); // 8 is 4 pixel spacing before and after
    });
    
    this.actual.syncTo(target, 'on' + name, function(val) {
      this.setActualAttribute('text', val);
      self._checkActualIsDifferent();
    });
    
    this.label.setAttribute('text', name);
  </method>
  
  <method name="_checkActualIsDifferent">
    var actual = this.actual;
    actual.setAttribute('visible', '' + this.field.value !== actual.text);
  </method>

  <editor_text name="label" x="${config.attribute_label_width - this.width}" y="2"/>
  <editor_text name="actual" x="${this.parent.innerwidth - this.width - 4}" y="2" width="60"/><!-- 4 pixel spacing -->
</class>

<class name="behaviortexteditor" extends="editor_inputtext"
  disabled="${!this.parent.parent.checkbutton.value}"
>
  <handler event="onfocus">
    this.oldvalue = this.text;
  </handler>
  <handler event="onvalue" args="value">
    // Reset the oldvalue whenever an external update occurs.
    if (this._isSync) this.oldvalue = value;
  </handler>
  <handler event="onkeydown" args="platformEvent">
    var keyCode = dr.sprite.KeyObservable.getKeyCodeFromEvent(platformEvent);
    if (keyCode === 13) this._applyChange();
  </handler>
  <handler name="_applyChange" event="onblur">
    if (!this.isBeingDestroyed) {
      /*var oldvalue = this.oldvalue, 
        newvalue = this.value,
        target = this.target,
        targetAttr = this.targetattr;
      
      // If attribute is layout locked then revert
      if (target.isA(dr.View) && target.__layoutDomainInUseForView(targetAttr)) {
        this.setAttribute('value', oldvalue);
        // FIXME: Alert dialog saying why we're rolling back the change.
        return;
      }
      
      if (oldvalue !== newvalue) {
        actions.do(new dr.editor.editorattrundoable({
          target:target, attribute:targetAttr, oldvalue:oldvalue, newvalue:newvalue
        }));
        this.oldvalue = newvalue;
      }
      */
    }
  </handler>
</class>